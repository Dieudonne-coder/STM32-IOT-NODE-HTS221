
proximite1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b478  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000744  0800b608  0800b608  0001b608  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bd4c  0800bd4c  000204f8  2**0
                  CONTENTS
  4 .ARM          00000008  0800bd4c  0800bd4c  0001bd4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bd54  0800bd54  000204f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bd54  0800bd54  0001bd54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bd58  0800bd58  0001bd58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000004f8  20000000  0800bd5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000250  200004f8  0800c254  000204f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000748  0800c254  00020748  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000204f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e9c9  00000000  00000000  00020528  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003598  00000000  00000000  0003eef1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000014b8  00000000  00000000  00042490  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001300  00000000  00000000  00043948  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002a0bd  00000000  00000000  00044c48  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011ca5  00000000  00000000  0006ed05  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f4fe0  00000000  00000000  000809aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0017598a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005dbc  00000000  00000000  00175a08  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200004f8 	.word	0x200004f8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b5f0 	.word	0x0800b5f0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200004fc 	.word	0x200004fc
 80001cc:	0800b5f0 	.word	0x0800b5f0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ae:	f1a4 0401 	sub.w	r4, r4, #1
 80003b2:	d1e9      	bne.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_d2iz>:
 80005e8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80005ec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80005f0:	d215      	bcs.n	800061e <__aeabi_d2iz+0x36>
 80005f2:	d511      	bpl.n	8000618 <__aeabi_d2iz+0x30>
 80005f4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80005f8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80005fc:	d912      	bls.n	8000624 <__aeabi_d2iz+0x3c>
 80005fe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000602:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000606:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800060a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800060e:	fa23 f002 	lsr.w	r0, r3, r2
 8000612:	bf18      	it	ne
 8000614:	4240      	negne	r0, r0
 8000616:	4770      	bx	lr
 8000618:	f04f 0000 	mov.w	r0, #0
 800061c:	4770      	bx	lr
 800061e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000622:	d105      	bne.n	8000630 <__aeabi_d2iz+0x48>
 8000624:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000628:	bf08      	it	eq
 800062a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800062e:	4770      	bx	lr
 8000630:	f04f 0000 	mov.w	r0, #0
 8000634:	4770      	bx	lr
 8000636:	bf00      	nop

08000638 <__aeabi_uldivmod>:
 8000638:	b953      	cbnz	r3, 8000650 <__aeabi_uldivmod+0x18>
 800063a:	b94a      	cbnz	r2, 8000650 <__aeabi_uldivmod+0x18>
 800063c:	2900      	cmp	r1, #0
 800063e:	bf08      	it	eq
 8000640:	2800      	cmpeq	r0, #0
 8000642:	bf1c      	itt	ne
 8000644:	f04f 31ff 	movne.w	r1, #4294967295
 8000648:	f04f 30ff 	movne.w	r0, #4294967295
 800064c:	f000 b972 	b.w	8000934 <__aeabi_idiv0>
 8000650:	f1ad 0c08 	sub.w	ip, sp, #8
 8000654:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000658:	f000 f806 	bl	8000668 <__udivmoddi4>
 800065c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000660:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000664:	b004      	add	sp, #16
 8000666:	4770      	bx	lr

08000668 <__udivmoddi4>:
 8000668:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800066c:	9e08      	ldr	r6, [sp, #32]
 800066e:	4604      	mov	r4, r0
 8000670:	4688      	mov	r8, r1
 8000672:	2b00      	cmp	r3, #0
 8000674:	d14b      	bne.n	800070e <__udivmoddi4+0xa6>
 8000676:	428a      	cmp	r2, r1
 8000678:	4615      	mov	r5, r2
 800067a:	d967      	bls.n	800074c <__udivmoddi4+0xe4>
 800067c:	fab2 f282 	clz	r2, r2
 8000680:	b14a      	cbz	r2, 8000696 <__udivmoddi4+0x2e>
 8000682:	f1c2 0720 	rsb	r7, r2, #32
 8000686:	fa01 f302 	lsl.w	r3, r1, r2
 800068a:	fa20 f707 	lsr.w	r7, r0, r7
 800068e:	4095      	lsls	r5, r2
 8000690:	ea47 0803 	orr.w	r8, r7, r3
 8000694:	4094      	lsls	r4, r2
 8000696:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800069a:	0c23      	lsrs	r3, r4, #16
 800069c:	fbb8 f7fe 	udiv	r7, r8, lr
 80006a0:	fa1f fc85 	uxth.w	ip, r5
 80006a4:	fb0e 8817 	mls	r8, lr, r7, r8
 80006a8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80006ac:	fb07 f10c 	mul.w	r1, r7, ip
 80006b0:	4299      	cmp	r1, r3
 80006b2:	d909      	bls.n	80006c8 <__udivmoddi4+0x60>
 80006b4:	18eb      	adds	r3, r5, r3
 80006b6:	f107 30ff 	add.w	r0, r7, #4294967295
 80006ba:	f080 811b 	bcs.w	80008f4 <__udivmoddi4+0x28c>
 80006be:	4299      	cmp	r1, r3
 80006c0:	f240 8118 	bls.w	80008f4 <__udivmoddi4+0x28c>
 80006c4:	3f02      	subs	r7, #2
 80006c6:	442b      	add	r3, r5
 80006c8:	1a5b      	subs	r3, r3, r1
 80006ca:	b2a4      	uxth	r4, r4
 80006cc:	fbb3 f0fe 	udiv	r0, r3, lr
 80006d0:	fb0e 3310 	mls	r3, lr, r0, r3
 80006d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80006d8:	fb00 fc0c 	mul.w	ip, r0, ip
 80006dc:	45a4      	cmp	ip, r4
 80006de:	d909      	bls.n	80006f4 <__udivmoddi4+0x8c>
 80006e0:	192c      	adds	r4, r5, r4
 80006e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80006e6:	f080 8107 	bcs.w	80008f8 <__udivmoddi4+0x290>
 80006ea:	45a4      	cmp	ip, r4
 80006ec:	f240 8104 	bls.w	80008f8 <__udivmoddi4+0x290>
 80006f0:	3802      	subs	r0, #2
 80006f2:	442c      	add	r4, r5
 80006f4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80006f8:	eba4 040c 	sub.w	r4, r4, ip
 80006fc:	2700      	movs	r7, #0
 80006fe:	b11e      	cbz	r6, 8000708 <__udivmoddi4+0xa0>
 8000700:	40d4      	lsrs	r4, r2
 8000702:	2300      	movs	r3, #0
 8000704:	e9c6 4300 	strd	r4, r3, [r6]
 8000708:	4639      	mov	r1, r7
 800070a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800070e:	428b      	cmp	r3, r1
 8000710:	d909      	bls.n	8000726 <__udivmoddi4+0xbe>
 8000712:	2e00      	cmp	r6, #0
 8000714:	f000 80eb 	beq.w	80008ee <__udivmoddi4+0x286>
 8000718:	2700      	movs	r7, #0
 800071a:	e9c6 0100 	strd	r0, r1, [r6]
 800071e:	4638      	mov	r0, r7
 8000720:	4639      	mov	r1, r7
 8000722:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000726:	fab3 f783 	clz	r7, r3
 800072a:	2f00      	cmp	r7, #0
 800072c:	d147      	bne.n	80007be <__udivmoddi4+0x156>
 800072e:	428b      	cmp	r3, r1
 8000730:	d302      	bcc.n	8000738 <__udivmoddi4+0xd0>
 8000732:	4282      	cmp	r2, r0
 8000734:	f200 80fa 	bhi.w	800092c <__udivmoddi4+0x2c4>
 8000738:	1a84      	subs	r4, r0, r2
 800073a:	eb61 0303 	sbc.w	r3, r1, r3
 800073e:	2001      	movs	r0, #1
 8000740:	4698      	mov	r8, r3
 8000742:	2e00      	cmp	r6, #0
 8000744:	d0e0      	beq.n	8000708 <__udivmoddi4+0xa0>
 8000746:	e9c6 4800 	strd	r4, r8, [r6]
 800074a:	e7dd      	b.n	8000708 <__udivmoddi4+0xa0>
 800074c:	b902      	cbnz	r2, 8000750 <__udivmoddi4+0xe8>
 800074e:	deff      	udf	#255	; 0xff
 8000750:	fab2 f282 	clz	r2, r2
 8000754:	2a00      	cmp	r2, #0
 8000756:	f040 808f 	bne.w	8000878 <__udivmoddi4+0x210>
 800075a:	1b49      	subs	r1, r1, r5
 800075c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000760:	fa1f f885 	uxth.w	r8, r5
 8000764:	2701      	movs	r7, #1
 8000766:	fbb1 fcfe 	udiv	ip, r1, lr
 800076a:	0c23      	lsrs	r3, r4, #16
 800076c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000770:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000774:	fb08 f10c 	mul.w	r1, r8, ip
 8000778:	4299      	cmp	r1, r3
 800077a:	d907      	bls.n	800078c <__udivmoddi4+0x124>
 800077c:	18eb      	adds	r3, r5, r3
 800077e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000782:	d202      	bcs.n	800078a <__udivmoddi4+0x122>
 8000784:	4299      	cmp	r1, r3
 8000786:	f200 80cd 	bhi.w	8000924 <__udivmoddi4+0x2bc>
 800078a:	4684      	mov	ip, r0
 800078c:	1a59      	subs	r1, r3, r1
 800078e:	b2a3      	uxth	r3, r4
 8000790:	fbb1 f0fe 	udiv	r0, r1, lr
 8000794:	fb0e 1410 	mls	r4, lr, r0, r1
 8000798:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800079c:	fb08 f800 	mul.w	r8, r8, r0
 80007a0:	45a0      	cmp	r8, r4
 80007a2:	d907      	bls.n	80007b4 <__udivmoddi4+0x14c>
 80007a4:	192c      	adds	r4, r5, r4
 80007a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80007aa:	d202      	bcs.n	80007b2 <__udivmoddi4+0x14a>
 80007ac:	45a0      	cmp	r8, r4
 80007ae:	f200 80b6 	bhi.w	800091e <__udivmoddi4+0x2b6>
 80007b2:	4618      	mov	r0, r3
 80007b4:	eba4 0408 	sub.w	r4, r4, r8
 80007b8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80007bc:	e79f      	b.n	80006fe <__udivmoddi4+0x96>
 80007be:	f1c7 0c20 	rsb	ip, r7, #32
 80007c2:	40bb      	lsls	r3, r7
 80007c4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80007c8:	ea4e 0e03 	orr.w	lr, lr, r3
 80007cc:	fa01 f407 	lsl.w	r4, r1, r7
 80007d0:	fa20 f50c 	lsr.w	r5, r0, ip
 80007d4:	fa21 f30c 	lsr.w	r3, r1, ip
 80007d8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80007dc:	4325      	orrs	r5, r4
 80007de:	fbb3 f9f8 	udiv	r9, r3, r8
 80007e2:	0c2c      	lsrs	r4, r5, #16
 80007e4:	fb08 3319 	mls	r3, r8, r9, r3
 80007e8:	fa1f fa8e 	uxth.w	sl, lr
 80007ec:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80007f0:	fb09 f40a 	mul.w	r4, r9, sl
 80007f4:	429c      	cmp	r4, r3
 80007f6:	fa02 f207 	lsl.w	r2, r2, r7
 80007fa:	fa00 f107 	lsl.w	r1, r0, r7
 80007fe:	d90b      	bls.n	8000818 <__udivmoddi4+0x1b0>
 8000800:	eb1e 0303 	adds.w	r3, lr, r3
 8000804:	f109 30ff 	add.w	r0, r9, #4294967295
 8000808:	f080 8087 	bcs.w	800091a <__udivmoddi4+0x2b2>
 800080c:	429c      	cmp	r4, r3
 800080e:	f240 8084 	bls.w	800091a <__udivmoddi4+0x2b2>
 8000812:	f1a9 0902 	sub.w	r9, r9, #2
 8000816:	4473      	add	r3, lr
 8000818:	1b1b      	subs	r3, r3, r4
 800081a:	b2ad      	uxth	r5, r5
 800081c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000820:	fb08 3310 	mls	r3, r8, r0, r3
 8000824:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000828:	fb00 fa0a 	mul.w	sl, r0, sl
 800082c:	45a2      	cmp	sl, r4
 800082e:	d908      	bls.n	8000842 <__udivmoddi4+0x1da>
 8000830:	eb1e 0404 	adds.w	r4, lr, r4
 8000834:	f100 33ff 	add.w	r3, r0, #4294967295
 8000838:	d26b      	bcs.n	8000912 <__udivmoddi4+0x2aa>
 800083a:	45a2      	cmp	sl, r4
 800083c:	d969      	bls.n	8000912 <__udivmoddi4+0x2aa>
 800083e:	3802      	subs	r0, #2
 8000840:	4474      	add	r4, lr
 8000842:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000846:	fba0 8902 	umull	r8, r9, r0, r2
 800084a:	eba4 040a 	sub.w	r4, r4, sl
 800084e:	454c      	cmp	r4, r9
 8000850:	46c2      	mov	sl, r8
 8000852:	464b      	mov	r3, r9
 8000854:	d354      	bcc.n	8000900 <__udivmoddi4+0x298>
 8000856:	d051      	beq.n	80008fc <__udivmoddi4+0x294>
 8000858:	2e00      	cmp	r6, #0
 800085a:	d069      	beq.n	8000930 <__udivmoddi4+0x2c8>
 800085c:	ebb1 050a 	subs.w	r5, r1, sl
 8000860:	eb64 0403 	sbc.w	r4, r4, r3
 8000864:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000868:	40fd      	lsrs	r5, r7
 800086a:	40fc      	lsrs	r4, r7
 800086c:	ea4c 0505 	orr.w	r5, ip, r5
 8000870:	e9c6 5400 	strd	r5, r4, [r6]
 8000874:	2700      	movs	r7, #0
 8000876:	e747      	b.n	8000708 <__udivmoddi4+0xa0>
 8000878:	f1c2 0320 	rsb	r3, r2, #32
 800087c:	fa20 f703 	lsr.w	r7, r0, r3
 8000880:	4095      	lsls	r5, r2
 8000882:	fa01 f002 	lsl.w	r0, r1, r2
 8000886:	fa21 f303 	lsr.w	r3, r1, r3
 800088a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800088e:	4338      	orrs	r0, r7
 8000890:	0c01      	lsrs	r1, r0, #16
 8000892:	fbb3 f7fe 	udiv	r7, r3, lr
 8000896:	fa1f f885 	uxth.w	r8, r5
 800089a:	fb0e 3317 	mls	r3, lr, r7, r3
 800089e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008a2:	fb07 f308 	mul.w	r3, r7, r8
 80008a6:	428b      	cmp	r3, r1
 80008a8:	fa04 f402 	lsl.w	r4, r4, r2
 80008ac:	d907      	bls.n	80008be <__udivmoddi4+0x256>
 80008ae:	1869      	adds	r1, r5, r1
 80008b0:	f107 3cff 	add.w	ip, r7, #4294967295
 80008b4:	d22f      	bcs.n	8000916 <__udivmoddi4+0x2ae>
 80008b6:	428b      	cmp	r3, r1
 80008b8:	d92d      	bls.n	8000916 <__udivmoddi4+0x2ae>
 80008ba:	3f02      	subs	r7, #2
 80008bc:	4429      	add	r1, r5
 80008be:	1acb      	subs	r3, r1, r3
 80008c0:	b281      	uxth	r1, r0
 80008c2:	fbb3 f0fe 	udiv	r0, r3, lr
 80008c6:	fb0e 3310 	mls	r3, lr, r0, r3
 80008ca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008ce:	fb00 f308 	mul.w	r3, r0, r8
 80008d2:	428b      	cmp	r3, r1
 80008d4:	d907      	bls.n	80008e6 <__udivmoddi4+0x27e>
 80008d6:	1869      	adds	r1, r5, r1
 80008d8:	f100 3cff 	add.w	ip, r0, #4294967295
 80008dc:	d217      	bcs.n	800090e <__udivmoddi4+0x2a6>
 80008de:	428b      	cmp	r3, r1
 80008e0:	d915      	bls.n	800090e <__udivmoddi4+0x2a6>
 80008e2:	3802      	subs	r0, #2
 80008e4:	4429      	add	r1, r5
 80008e6:	1ac9      	subs	r1, r1, r3
 80008e8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80008ec:	e73b      	b.n	8000766 <__udivmoddi4+0xfe>
 80008ee:	4637      	mov	r7, r6
 80008f0:	4630      	mov	r0, r6
 80008f2:	e709      	b.n	8000708 <__udivmoddi4+0xa0>
 80008f4:	4607      	mov	r7, r0
 80008f6:	e6e7      	b.n	80006c8 <__udivmoddi4+0x60>
 80008f8:	4618      	mov	r0, r3
 80008fa:	e6fb      	b.n	80006f4 <__udivmoddi4+0x8c>
 80008fc:	4541      	cmp	r1, r8
 80008fe:	d2ab      	bcs.n	8000858 <__udivmoddi4+0x1f0>
 8000900:	ebb8 0a02 	subs.w	sl, r8, r2
 8000904:	eb69 020e 	sbc.w	r2, r9, lr
 8000908:	3801      	subs	r0, #1
 800090a:	4613      	mov	r3, r2
 800090c:	e7a4      	b.n	8000858 <__udivmoddi4+0x1f0>
 800090e:	4660      	mov	r0, ip
 8000910:	e7e9      	b.n	80008e6 <__udivmoddi4+0x27e>
 8000912:	4618      	mov	r0, r3
 8000914:	e795      	b.n	8000842 <__udivmoddi4+0x1da>
 8000916:	4667      	mov	r7, ip
 8000918:	e7d1      	b.n	80008be <__udivmoddi4+0x256>
 800091a:	4681      	mov	r9, r0
 800091c:	e77c      	b.n	8000818 <__udivmoddi4+0x1b0>
 800091e:	3802      	subs	r0, #2
 8000920:	442c      	add	r4, r5
 8000922:	e747      	b.n	80007b4 <__udivmoddi4+0x14c>
 8000924:	f1ac 0c02 	sub.w	ip, ip, #2
 8000928:	442b      	add	r3, r5
 800092a:	e72f      	b.n	800078c <__udivmoddi4+0x124>
 800092c:	4638      	mov	r0, r7
 800092e:	e708      	b.n	8000742 <__udivmoddi4+0xda>
 8000930:	4637      	mov	r7, r6
 8000932:	e6e9      	b.n	8000708 <__udivmoddi4+0xa0>

08000934 <__aeabi_idiv0>:
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop

08000938 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000938:	b590      	push	{r4, r7, lr}
 800093a:	b0bb      	sub	sp, #236	; 0xec
 800093c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800093e:	f006 faca 	bl	8006ed6 <HAL_Init>

  /* USER CODE BEGIN Init */


  BSP_TSENSOR_Init();
 8000942:	f000 ff3d 	bl	80017c0 <BSP_TSENSOR_Init>
  BSP_MAGNETO_Init();
 8000946:	f000 fef7 	bl	8001738 <BSP_MAGNETO_Init>
  VL53L0X_PROXIMITY_MspInit();
 800094a:	f000 ffc1 	bl	80018d0 <VL53L0X_PROXIMITY_MspInit>
  VL53L0X_PROXIMITY_Init();
 800094e:	f000 ff61 	bl	8001814 <VL53L0X_PROXIMITY_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000952:	f000 f8a9 	bl	8000aa8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000956:	f000 f991 	bl	8000c7c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800095a:	f000 f95f 	bl	8000c1c <MX_USART1_UART_Init>
  MX_UART4_Init();
 800095e:	f000 f92d 	bl	8000bbc <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  char str_rst[100] = "";
 8000962:	2300      	movs	r3, #0
 8000964:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000966:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800096a:	2260      	movs	r2, #96	; 0x60
 800096c:	2100      	movs	r1, #0
 800096e:	4618      	mov	r0, r3
 8000970:	f009 fe35 	bl	800a5de <memset>
  char str_tmp[100] = "";
 8000974:	2300      	movs	r3, #0
 8000976:	60bb      	str	r3, [r7, #8]
 8000978:	f107 030c 	add.w	r3, r7, #12
 800097c:	2260      	movs	r2, #96	; 0x60
 800097e:	2100      	movs	r1, #0
 8000980:	4618      	mov	r0, r3
 8000982:	f009 fe2c 	bl	800a5de <memset>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	      Reset_value=HAL_GPIO_ReadPin(GPIOC, BTN_Pin);
 8000986:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800098a:	483e      	ldr	r0, [pc, #248]	; (8000a84 <main+0x14c>)
 800098c:	f006 fdf4 	bl	8007578 <HAL_GPIO_ReadPin>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	bf14      	ite	ne
 8000996:	2301      	movne	r3, #1
 8000998:	2300      	moveq	r3, #0
 800099a:	b2da      	uxtb	r2, r3
 800099c:	4b3a      	ldr	r3, [pc, #232]	; (8000a88 <main+0x150>)
 800099e:	701a      	strb	r2, [r3, #0]

	     snprintf(str_rst,100,"RESET_VALUE=%d\n\r", Reset_value);
 80009a0:	4b39      	ldr	r3, [pc, #228]	; (8000a88 <main+0x150>)
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 80009a8:	4a38      	ldr	r2, [pc, #224]	; (8000a8c <main+0x154>)
 80009aa:	2164      	movs	r1, #100	; 0x64
 80009ac:	f009 fe84 	bl	800a6b8 <sniprintf>

	  	  HAL_UART_Transmit(&huart1,( uint8_t * )str_rst,sizeof(str_tmp),1000);
 80009b0:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 80009b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009b8:	2264      	movs	r2, #100	; 0x64
 80009ba:	4835      	ldr	r0, [pc, #212]	; (8000a90 <main+0x158>)
 80009bc:	f009 f95a 	bl	8009c74 <HAL_UART_Transmit>

	  	  BSP_MAGNETO_GetXYZ(magneto_value);
 80009c0:	4834      	ldr	r0, [pc, #208]	; (8000a94 <main+0x15c>)
 80009c2:	f000 fee5 	bl	8001790 <BSP_MAGNETO_GetXYZ>

	  	  proximity_value = VL53L0X_PROXIMITY_GetDistance();
 80009c6:	f000 ff73 	bl	80018b0 <VL53L0X_PROXIMITY_GetDistance>
 80009ca:	4603      	mov	r3, r0
 80009cc:	b2da      	uxtb	r2, r3
 80009ce:	4b32      	ldr	r3, [pc, #200]	; (8000a98 <main+0x160>)
 80009d0:	701a      	strb	r2, [r3, #0]

	  	  uint16_t prox_value=proximity_value;
 80009d2:	4b31      	ldr	r3, [pc, #196]	; (8000a98 <main+0x160>)
 80009d4:	781b      	ldrb	r3, [r3, #0]
 80009d6:	f8a7 30de 	strh.w	r3, [r7, #222]	; 0xde

	  	  if(prox_value<2900)
 80009da:	f8b7 30de 	ldrh.w	r3, [r7, #222]	; 0xde
 80009de:	f640 3253 	movw	r2, #2899	; 0xb53
 80009e2:	4293      	cmp	r3, r2
 80009e4:	d849      	bhi.n	8000a7a <main+0x142>

	  	  {

	  	  temp_value = BSP_TSENSOR_ReadTemp();
 80009e6:	f000 ff07 	bl	80017f8 <BSP_TSENSOR_ReadTemp>
 80009ea:	eef0 7a40 	vmov.f32	s15, s0
 80009ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80009f2:	edc7 7a01 	vstr	s15, [r7, #4]
 80009f6:	793b      	ldrb	r3, [r7, #4]
 80009f8:	b25a      	sxtb	r2, r3
 80009fa:	4b28      	ldr	r3, [pc, #160]	; (8000a9c <main+0x164>)
 80009fc:	701a      	strb	r2, [r3, #0]

	  	  int tmpInt1 = temp_value;
 80009fe:	4b27      	ldr	r3, [pc, #156]	; (8000a9c <main+0x164>)
 8000a00:	f993 3000 	ldrsb.w	r3, [r3]
 8000a04:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8

	  	  float tmpFrac = temp_value - tmpInt1;
 8000a08:	4b24      	ldr	r3, [pc, #144]	; (8000a9c <main+0x164>)
 8000a0a:	f993 3000 	ldrsb.w	r3, [r3]
 8000a0e:	461a      	mov	r2, r3
 8000a10:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8000a14:	1ad3      	subs	r3, r2, r3
 8000a16:	ee07 3a90 	vmov	s15, r3
 8000a1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a1e:	edc7 7a35 	vstr	s15, [r7, #212]	; 0xd4

	  	  int tmpInt2 = trunc(tmpFrac * 100);
 8000a22:	edd7 7a35 	vldr	s15, [r7, #212]	; 0xd4
 8000a26:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8000aa0 <main+0x168>
 8000a2a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a2e:	ee17 0a90 	vmov	r0, s15
 8000a32:	f7ff fd81 	bl	8000538 <__aeabi_f2d>
 8000a36:	4603      	mov	r3, r0
 8000a38:	460c      	mov	r4, r1
 8000a3a:	ec44 3b10 	vmov	d0, r3, r4
 8000a3e:	f00a fd9d 	bl	800b57c <trunc>
 8000a42:	ec54 3b10 	vmov	r3, r4, d0
 8000a46:	4618      	mov	r0, r3
 8000a48:	4621      	mov	r1, r4
 8000a4a:	f7ff fdcd 	bl	80005e8 <__aeabi_d2iz>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0

	  	  snprintf(str_tmp,100,"TEMPERATURE_VALUE= %d.%02d\n\r", tmpInt1, tmpInt2);
 8000a54:	f107 0008 	add.w	r0, r7, #8
 8000a58:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8000a5c:	9300      	str	r3, [sp, #0]
 8000a5e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8000a62:	4a10      	ldr	r2, [pc, #64]	; (8000aa4 <main+0x16c>)
 8000a64:	2164      	movs	r1, #100	; 0x64
 8000a66:	f009 fe27 	bl	800a6b8 <sniprintf>

	  	  HAL_UART_Transmit(&huart1,( uint8_t * )str_tmp,sizeof(str_tmp),1000);
 8000a6a:	f107 0108 	add.w	r1, r7, #8
 8000a6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a72:	2264      	movs	r2, #100	; 0x64
 8000a74:	4806      	ldr	r0, [pc, #24]	; (8000a90 <main+0x158>)
 8000a76:	f009 f8fd 	bl	8009c74 <HAL_UART_Transmit>

	  	  }
	  HAL_Delay (3000);
 8000a7a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000a7e:	f006 fa9f 	bl	8006fc0 <HAL_Delay>
  {
 8000a82:	e780      	b.n	8000986 <main+0x4e>
 8000a84:	48000800 	.word	0x48000800
 8000a88:	20000632 	.word	0x20000632
 8000a8c:	0800b608 	.word	0x0800b608
 8000a90:	2000052c 	.word	0x2000052c
 8000a94:	2000062c 	.word	0x2000062c
 8000a98:	20000515 	.word	0x20000515
 8000a9c:	20000514 	.word	0x20000514
 8000aa0:	42c80000 	.word	0x42c80000
 8000aa4:	0800b61c 	.word	0x0800b61c

08000aa8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b0b8      	sub	sp, #224	; 0xe0
 8000aac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aae:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000ab2:	2244      	movs	r2, #68	; 0x44
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f009 fd91 	bl	800a5de <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000abc:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	601a      	str	r2, [r3, #0]
 8000ac4:	605a      	str	r2, [r3, #4]
 8000ac6:	609a      	str	r2, [r3, #8]
 8000ac8:	60da      	str	r2, [r3, #12]
 8000aca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000acc:	463b      	mov	r3, r7
 8000ace:	2288      	movs	r2, #136	; 0x88
 8000ad0:	2100      	movs	r1, #0
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f009 fd83 	bl	800a5de <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000ad8:	f007 fd60 	bl	800859c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000adc:	4b36      	ldr	r3, [pc, #216]	; (8000bb8 <SystemClock_Config+0x110>)
 8000ade:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000ae2:	4a35      	ldr	r2, [pc, #212]	; (8000bb8 <SystemClock_Config+0x110>)
 8000ae4:	f023 0318 	bic.w	r3, r3, #24
 8000ae8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000aec:	2314      	movs	r3, #20
 8000aee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000af2:	2301      	movs	r3, #1
 8000af4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000af8:	2301      	movs	r3, #1
 8000afa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000afe:	2300      	movs	r3, #0
 8000b00:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000b04:	2360      	movs	r3, #96	; 0x60
 8000b06:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b0a:	2302      	movs	r3, #2
 8000b0c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000b10:	2301      	movs	r3, #1
 8000b12:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000b16:	2301      	movs	r3, #1
 8000b18:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000b1c:	2328      	movs	r3, #40	; 0x28
 8000b1e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000b22:	2307      	movs	r3, #7
 8000b24:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000b28:	2302      	movs	r3, #2
 8000b2a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000b2e:	2302      	movs	r3, #2
 8000b30:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b34:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f007 fda3 	bl	8008684 <HAL_RCC_OscConfig>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000b44:	f000 fab2 	bl	80010ac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b48:	230f      	movs	r3, #15
 8000b4a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b4e:	2303      	movs	r3, #3
 8000b50:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b54:	2300      	movs	r3, #0
 8000b56:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b60:	2300      	movs	r3, #0
 8000b62:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000b66:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000b6a:	2104      	movs	r1, #4
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f008 f96f 	bl	8008e50 <HAL_RCC_ClockConfig>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000b78:	f000 fa98 	bl	80010ac <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_UART4;
 8000b7c:	2309      	movs	r3, #9
 8000b7e:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000b80:	2300      	movs	r3, #0
 8000b82:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8000b84:	2300      	movs	r3, #0
 8000b86:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b88:	463b      	mov	r3, r7
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f008 fb64 	bl	8009258 <HAL_RCCEx_PeriphCLKConfig>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8000b96:	f000 fa89 	bl	80010ac <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000b9a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000b9e:	f007 fd1b 	bl	80085d8 <HAL_PWREx_ControlVoltageScaling>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d001      	beq.n	8000bac <SystemClock_Config+0x104>
  {
    Error_Handler();
 8000ba8:	f000 fa80 	bl	80010ac <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000bac:	f008 fe3a 	bl	8009824 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000bb0:	bf00      	nop
 8000bb2:	37e0      	adds	r7, #224	; 0xe0
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	40021000 	.word	0x40021000

08000bbc <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000bc0:	4b14      	ldr	r3, [pc, #80]	; (8000c14 <MX_UART4_Init+0x58>)
 8000bc2:	4a15      	ldr	r2, [pc, #84]	; (8000c18 <MX_UART4_Init+0x5c>)
 8000bc4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000bc6:	4b13      	ldr	r3, [pc, #76]	; (8000c14 <MX_UART4_Init+0x58>)
 8000bc8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bcc:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000bce:	4b11      	ldr	r3, [pc, #68]	; (8000c14 <MX_UART4_Init+0x58>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000bd4:	4b0f      	ldr	r3, [pc, #60]	; (8000c14 <MX_UART4_Init+0x58>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000bda:	4b0e      	ldr	r3, [pc, #56]	; (8000c14 <MX_UART4_Init+0x58>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000be0:	4b0c      	ldr	r3, [pc, #48]	; (8000c14 <MX_UART4_Init+0x58>)
 8000be2:	220c      	movs	r2, #12
 8000be4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000be6:	4b0b      	ldr	r3, [pc, #44]	; (8000c14 <MX_UART4_Init+0x58>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bec:	4b09      	ldr	r3, [pc, #36]	; (8000c14 <MX_UART4_Init+0x58>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bf2:	4b08      	ldr	r3, [pc, #32]	; (8000c14 <MX_UART4_Init+0x58>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bf8:	4b06      	ldr	r3, [pc, #24]	; (8000c14 <MX_UART4_Init+0x58>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000bfe:	4805      	ldr	r0, [pc, #20]	; (8000c14 <MX_UART4_Init+0x58>)
 8000c00:	f008 ffea 	bl	8009bd8 <HAL_UART_Init>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8000c0a:	f000 fa4f 	bl	80010ac <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000c0e:	bf00      	nop
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	200005ac 	.word	0x200005ac
 8000c18:	40004c00 	.word	0x40004c00

08000c1c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c20:	4b14      	ldr	r3, [pc, #80]	; (8000c74 <MX_USART1_UART_Init+0x58>)
 8000c22:	4a15      	ldr	r2, [pc, #84]	; (8000c78 <MX_USART1_UART_Init+0x5c>)
 8000c24:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000c26:	4b13      	ldr	r3, [pc, #76]	; (8000c74 <MX_USART1_UART_Init+0x58>)
 8000c28:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c2c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c2e:	4b11      	ldr	r3, [pc, #68]	; (8000c74 <MX_USART1_UART_Init+0x58>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c34:	4b0f      	ldr	r3, [pc, #60]	; (8000c74 <MX_USART1_UART_Init+0x58>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c3a:	4b0e      	ldr	r3, [pc, #56]	; (8000c74 <MX_USART1_UART_Init+0x58>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c40:	4b0c      	ldr	r3, [pc, #48]	; (8000c74 <MX_USART1_UART_Init+0x58>)
 8000c42:	220c      	movs	r2, #12
 8000c44:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c46:	4b0b      	ldr	r3, [pc, #44]	; (8000c74 <MX_USART1_UART_Init+0x58>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c4c:	4b09      	ldr	r3, [pc, #36]	; (8000c74 <MX_USART1_UART_Init+0x58>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c52:	4b08      	ldr	r3, [pc, #32]	; (8000c74 <MX_USART1_UART_Init+0x58>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c58:	4b06      	ldr	r3, [pc, #24]	; (8000c74 <MX_USART1_UART_Init+0x58>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c5e:	4805      	ldr	r0, [pc, #20]	; (8000c74 <MX_USART1_UART_Init+0x58>)
 8000c60:	f008 ffba 	bl	8009bd8 <HAL_UART_Init>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d001      	beq.n	8000c6e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000c6a:	f000 fa1f 	bl	80010ac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c6e:	bf00      	nop
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	2000052c 	.word	0x2000052c
 8000c78:	40013800 	.word	0x40013800

08000c7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b08a      	sub	sp, #40	; 0x28
 8000c80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c82:	f107 0314 	add.w	r3, r7, #20
 8000c86:	2200      	movs	r2, #0
 8000c88:	601a      	str	r2, [r3, #0]
 8000c8a:	605a      	str	r2, [r3, #4]
 8000c8c:	609a      	str	r2, [r3, #8]
 8000c8e:	60da      	str	r2, [r3, #12]
 8000c90:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c92:	4bba      	ldr	r3, [pc, #744]	; (8000f7c <MX_GPIO_Init+0x300>)
 8000c94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c96:	4ab9      	ldr	r2, [pc, #740]	; (8000f7c <MX_GPIO_Init+0x300>)
 8000c98:	f043 0310 	orr.w	r3, r3, #16
 8000c9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c9e:	4bb7      	ldr	r3, [pc, #732]	; (8000f7c <MX_GPIO_Init+0x300>)
 8000ca0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ca2:	f003 0310 	and.w	r3, r3, #16
 8000ca6:	613b      	str	r3, [r7, #16]
 8000ca8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000caa:	4bb4      	ldr	r3, [pc, #720]	; (8000f7c <MX_GPIO_Init+0x300>)
 8000cac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cae:	4ab3      	ldr	r2, [pc, #716]	; (8000f7c <MX_GPIO_Init+0x300>)
 8000cb0:	f043 0304 	orr.w	r3, r3, #4
 8000cb4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cb6:	4bb1      	ldr	r3, [pc, #708]	; (8000f7c <MX_GPIO_Init+0x300>)
 8000cb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cba:	f003 0304 	and.w	r3, r3, #4
 8000cbe:	60fb      	str	r3, [r7, #12]
 8000cc0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cc2:	4bae      	ldr	r3, [pc, #696]	; (8000f7c <MX_GPIO_Init+0x300>)
 8000cc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cc6:	4aad      	ldr	r2, [pc, #692]	; (8000f7c <MX_GPIO_Init+0x300>)
 8000cc8:	f043 0301 	orr.w	r3, r3, #1
 8000ccc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cce:	4bab      	ldr	r3, [pc, #684]	; (8000f7c <MX_GPIO_Init+0x300>)
 8000cd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cd2:	f003 0301 	and.w	r3, r3, #1
 8000cd6:	60bb      	str	r3, [r7, #8]
 8000cd8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cda:	4ba8      	ldr	r3, [pc, #672]	; (8000f7c <MX_GPIO_Init+0x300>)
 8000cdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cde:	4aa7      	ldr	r2, [pc, #668]	; (8000f7c <MX_GPIO_Init+0x300>)
 8000ce0:	f043 0302 	orr.w	r3, r3, #2
 8000ce4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ce6:	4ba5      	ldr	r3, [pc, #660]	; (8000f7c <MX_GPIO_Init+0x300>)
 8000ce8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cea:	f003 0302 	and.w	r3, r3, #2
 8000cee:	607b      	str	r3, [r7, #4]
 8000cf0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cf2:	4ba2      	ldr	r3, [pc, #648]	; (8000f7c <MX_GPIO_Init+0x300>)
 8000cf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cf6:	4aa1      	ldr	r2, [pc, #644]	; (8000f7c <MX_GPIO_Init+0x300>)
 8000cf8:	f043 0308 	orr.w	r3, r3, #8
 8000cfc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cfe:	4b9f      	ldr	r3, [pc, #636]	; (8000f7c <MX_GPIO_Init+0x300>)
 8000d00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d02:	f003 0308 	and.w	r3, r3, #8
 8000d06:	603b      	str	r3, [r7, #0]
 8000d08:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	f44f 718a 	mov.w	r1, #276	; 0x114
 8000d10:	489b      	ldr	r0, [pc, #620]	; (8000f80 <MX_GPIO_Init+0x304>)
 8000d12:	f006 fc49 	bl	80075a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|GPIO_PIN_5|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8000d16:	2200      	movs	r2, #0
 8000d18:	f248 1124 	movw	r1, #33060	; 0x8124
 8000d1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d20:	f006 fc42 	bl	80075a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000d24:	2200      	movs	r2, #0
 8000d26:	f24f 0114 	movw	r1, #61460	; 0xf014
 8000d2a:	4896      	ldr	r0, [pc, #600]	; (8000f84 <MX_GPIO_Init+0x308>)
 8000d2c:	f006 fc3c 	bl	80075a8 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8000d30:	2200      	movs	r2, #0
 8000d32:	f241 0181 	movw	r1, #4225	; 0x1081
 8000d36:	4894      	ldr	r0, [pc, #592]	; (8000f88 <MX_GPIO_Init+0x30c>)
 8000d38:	f006 fc36 	bl	80075a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d42:	4891      	ldr	r0, [pc, #580]	; (8000f88 <MX_GPIO_Init+0x30c>)
 8000d44:	f006 fc30 	bl	80075a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8000d48:	2200      	movs	r2, #0
 8000d4a:	f44f 7110 	mov.w	r1, #576	; 0x240
 8000d4e:	488f      	ldr	r0, [pc, #572]	; (8000f8c <MX_GPIO_Init+0x310>)
 8000d50:	f006 fc2a 	bl	80075a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000d54:	2201      	movs	r2, #1
 8000d56:	2120      	movs	r1, #32
 8000d58:	488a      	ldr	r0, [pc, #552]	; (8000f84 <MX_GPIO_Init+0x308>)
 8000d5a:	f006 fc25 	bl	80075a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000d5e:	2201      	movs	r2, #1
 8000d60:	2101      	movs	r1, #1
 8000d62:	4887      	ldr	r0, [pc, #540]	; (8000f80 <MX_GPIO_Init+0x304>)
 8000d64:	f006 fc20 	bl	80075a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8000d68:	f240 1315 	movw	r3, #277	; 0x115
 8000d6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d6e:	2301      	movs	r3, #1
 8000d70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d72:	2300      	movs	r3, #0
 8000d74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d76:	2300      	movs	r3, #0
 8000d78:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d7a:	f107 0314 	add.w	r3, r7, #20
 8000d7e:	4619      	mov	r1, r3
 8000d80:	487f      	ldr	r0, [pc, #508]	; (8000f80 <MX_GPIO_Init+0x304>)
 8000d82:	f006 fa51 	bl	8007228 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8000d86:	236a      	movs	r3, #106	; 0x6a
 8000d88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d8a:	4b81      	ldr	r3, [pc, #516]	; (8000f90 <MX_GPIO_Init+0x314>)
 8000d8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d92:	f107 0314 	add.w	r3, r7, #20
 8000d96:	4619      	mov	r1, r3
 8000d98:	4879      	ldr	r0, [pc, #484]	; (8000f80 <MX_GPIO_Init+0x304>)
 8000d9a:	f006 fa45 	bl	8007228 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_Pin */
  GPIO_InitStruct.Pin = BTN_Pin;
 8000d9e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000da2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000da4:	2300      	movs	r3, #0
 8000da6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da8:	2300      	movs	r3, #0
 8000daa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 8000dac:	f107 0314 	add.w	r3, r7, #20
 8000db0:	4619      	mov	r1, r3
 8000db2:	4876      	ldr	r0, [pc, #472]	; (8000f8c <MX_GPIO_Init+0x310>)
 8000db4:	f006 fa38 	bl	8007228 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8000db8:	233f      	movs	r3, #63	; 0x3f
 8000dba:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000dbc:	230b      	movs	r3, #11
 8000dbe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dc4:	f107 0314 	add.w	r3, r7, #20
 8000dc8:	4619      	mov	r1, r3
 8000dca:	4870      	ldr	r0, [pc, #448]	; (8000f8c <MX_GPIO_Init+0x310>)
 8000dcc:	f006 fa2c 	bl	8007228 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin PA5 SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|GPIO_PIN_5|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8000dd0:	f248 1324 	movw	r3, #33060	; 0x8124
 8000dd4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dde:	2300      	movs	r3, #0
 8000de0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000de2:	f107 0314 	add.w	r3, r7, #20
 8000de6:	4619      	mov	r1, r3
 8000de8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dec:	f006 fa1c 	bl	8007228 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8000df0:	2308      	movs	r3, #8
 8000df2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df4:	2302      	movs	r3, #2
 8000df6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000e00:	2301      	movs	r3, #1
 8000e02:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8000e04:	f107 0314 	add.w	r3, r7, #20
 8000e08:	4619      	mov	r1, r3
 8000e0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e0e:	f006 fa0b 	bl	8007228 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8000e12:	2310      	movs	r3, #16
 8000e14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000e16:	230b      	movs	r3, #11
 8000e18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8000e1e:	f107 0314 	add.w	r3, r7, #20
 8000e22:	4619      	mov	r1, r3
 8000e24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e28:	f006 f9fe 	bl	8007228 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D12_Pin|ARD_D11_Pin;
 8000e2c:	23c0      	movs	r3, #192	; 0xc0
 8000e2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e30:	2302      	movs	r3, #2
 8000e32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e34:	2300      	movs	r3, #0
 8000e36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e38:	2303      	movs	r3, #3
 8000e3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e3c:	2305      	movs	r3, #5
 8000e3e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e40:	f107 0314 	add.w	r3, r7, #20
 8000e44:	4619      	mov	r1, r3
 8000e46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e4a:	f006 f9ed 	bl	8007228 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8000e4e:	2301      	movs	r3, #1
 8000e50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e52:	4b4f      	ldr	r3, [pc, #316]	; (8000f90 <MX_GPIO_Init+0x314>)
 8000e54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e56:	2300      	movs	r3, #0
 8000e58:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000e5a:	f107 0314 	add.w	r3, r7, #20
 8000e5e:	4619      	mov	r1, r3
 8000e60:	4848      	ldr	r0, [pc, #288]	; (8000f84 <MX_GPIO_Init+0x308>)
 8000e62:	f006 f9e1 	bl	8007228 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000e66:	2302      	movs	r3, #2
 8000e68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000e6a:	230b      	movs	r3, #11
 8000e6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000e72:	f107 0314 	add.w	r3, r7, #20
 8000e76:	4619      	mov	r1, r3
 8000e78:	4842      	ldr	r0, [pc, #264]	; (8000f84 <MX_GPIO_Init+0x308>)
 8000e7a:	f006 f9d5 	bl	8007228 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000e7e:	f24f 0334 	movw	r3, #61492	; 0xf034
 8000e82:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e84:	2301      	movs	r3, #1
 8000e86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e90:	f107 0314 	add.w	r3, r7, #20
 8000e94:	4619      	mov	r1, r3
 8000e96:	483b      	ldr	r0, [pc, #236]	; (8000f84 <MX_GPIO_Init+0x308>)
 8000e98:	f006 f9c6 	bl	8007228 <HAL_GPIO_Init>

  /*Configure GPIO pins : DFSDM1_DATIN2_Pin DFSDM1_CKOUT_Pin */
  GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8000e9c:	f44f 7320 	mov.w	r3, #640	; 0x280
 8000ea0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea2:	2302      	movs	r3, #2
 8000ea4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000eae:	2306      	movs	r3, #6
 8000eb0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000eb2:	f107 0314 	add.w	r3, r7, #20
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	4831      	ldr	r0, [pc, #196]	; (8000f80 <MX_GPIO_Init+0x304>)
 8000eba:	f006 f9b5 	bl	8007228 <HAL_GPIO_Init>

  /*Configure GPIO pins : QUADSPI_CLK_Pin QUADSPI_NCS_Pin OQUADSPI_BK1_IO0_Pin QUADSPI_BK1_IO1_Pin
                           QUAD_SPI_BK1_IO2_Pin QUAD_SPI_BK1_IO3_Pin */
  GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8000ebe:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8000ec2:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec4:	2302      	movs	r3, #2
 8000ec6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ecc:	2303      	movs	r3, #3
 8000ece:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000ed0:	230a      	movs	r3, #10
 8000ed2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ed4:	f107 0314 	add.w	r3, r7, #20
 8000ed8:	4619      	mov	r1, r3
 8000eda:	4829      	ldr	r0, [pc, #164]	; (8000f80 <MX_GPIO_Init+0x304>)
 8000edc:	f006 f9a4 	bl	8007228 <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_I2C2_SCL_Pin INTERNAL_I2C2_SDA_Pin */
  GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8000ee0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000ee4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ee6:	2312      	movs	r3, #18
 8000ee8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000eea:	2301      	movs	r3, #1
 8000eec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eee:	2303      	movs	r3, #3
 8000ef0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000ef2:	2304      	movs	r3, #4
 8000ef4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ef6:	f107 0314 	add.w	r3, r7, #20
 8000efa:	4619      	mov	r1, r3
 8000efc:	4821      	ldr	r0, [pc, #132]	; (8000f84 <MX_GPIO_Init+0x308>)
 8000efe:	f006 f993 	bl	8007228 <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_UART3_TX_Pin INTERNAL_UART3_RX_Pin */
  GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8000f02:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f08:	2302      	movs	r3, #2
 8000f0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f10:	2303      	movs	r3, #3
 8000f12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f14:	2307      	movs	r3, #7
 8000f16:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f18:	f107 0314 	add.w	r3, r7, #20
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	481a      	ldr	r0, [pc, #104]	; (8000f88 <MX_GPIO_Init+0x30c>)
 8000f20:	f006 f982 	bl	8007228 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8000f24:	f64c 4304 	movw	r3, #52228	; 0xcc04
 8000f28:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f2a:	4b19      	ldr	r3, [pc, #100]	; (8000f90 <MX_GPIO_Init+0x314>)
 8000f2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f32:	f107 0314 	add.w	r3, r7, #20
 8000f36:	4619      	mov	r1, r3
 8000f38:	4813      	ldr	r0, [pc, #76]	; (8000f88 <MX_GPIO_Init+0x30c>)
 8000f3a:	f006 f975 	bl	8007228 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8000f3e:	f243 0381 	movw	r3, #12417	; 0x3081
 8000f42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f44:	2301      	movs	r3, #1
 8000f46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f50:	f107 0314 	add.w	r3, r7, #20
 8000f54:	4619      	mov	r1, r3
 8000f56:	480c      	ldr	r0, [pc, #48]	; (8000f88 <MX_GPIO_Init+0x30c>)
 8000f58:	f006 f966 	bl	8007228 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8000f5c:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000f60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f62:	2301      	movs	r3, #1
 8000f64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f66:	2300      	movs	r3, #0
 8000f68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f6e:	f107 0314 	add.w	r3, r7, #20
 8000f72:	4619      	mov	r1, r3
 8000f74:	4805      	ldr	r0, [pc, #20]	; (8000f8c <MX_GPIO_Init+0x310>)
 8000f76:	f006 f957 	bl	8007228 <HAL_GPIO_Init>
 8000f7a:	e00b      	b.n	8000f94 <MX_GPIO_Init+0x318>
 8000f7c:	40021000 	.word	0x40021000
 8000f80:	48001000 	.word	0x48001000
 8000f84:	48000400 	.word	0x48000400
 8000f88:	48000c00 	.word	0x48000c00
 8000f8c:	48000800 	.word	0x48000800
 8000f90:	10110000 	.word	0x10110000

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8000f94:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000f98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f9a:	4b40      	ldr	r3, [pc, #256]	; (800109c <MX_GPIO_Init+0x420>)
 8000f9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fa2:	f107 0314 	add.w	r3, r7, #20
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	483d      	ldr	r0, [pc, #244]	; (80010a0 <MX_GPIO_Init+0x424>)
 8000faa:	f006 f93d 	bl	8007228 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8000fae:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fb2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000fbc:	f107 0314 	add.w	r3, r7, #20
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fc6:	f006 f92f 	bl	8007228 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_ID_Pin USB_OTG_FS_DM_Pin USB_OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8000fca:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000fce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd0:	2302      	movs	r3, #2
 8000fd2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fd8:	2303      	movs	r3, #3
 8000fda:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000fdc:	230a      	movs	r3, #10
 8000fde:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fe0:	f107 0314 	add.w	r3, r7, #20
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fea:	f006 f91d 	bl	8007228 <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_SPI3_SCK_Pin INTERNAL_SPI3_MISO_Pin INTERNAL_SPI3_MOSI_Pin */
  GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8000fee:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000ff2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff4:	2302      	movs	r3, #2
 8000ff6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ffc:	2303      	movs	r3, #3
 8000ffe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001000:	2306      	movs	r3, #6
 8001002:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001004:	f107 0314 	add.w	r3, r7, #20
 8001008:	4619      	mov	r1, r3
 800100a:	4825      	ldr	r0, [pc, #148]	; (80010a0 <MX_GPIO_Init+0x424>)
 800100c:	f006 f90c 	bl	8007228 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8001010:	2302      	movs	r3, #2
 8001012:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001014:	2302      	movs	r3, #2
 8001016:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001018:	2300      	movs	r3, #0
 800101a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800101c:	2303      	movs	r3, #3
 800101e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001020:	2305      	movs	r3, #5
 8001022:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8001024:	f107 0314 	add.w	r3, r7, #20
 8001028:	4619      	mov	r1, r3
 800102a:	481e      	ldr	r0, [pc, #120]	; (80010a4 <MX_GPIO_Init+0x428>)
 800102c:	f006 f8fc 	bl	8007228 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8001030:	2378      	movs	r3, #120	; 0x78
 8001032:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001034:	2302      	movs	r3, #2
 8001036:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001038:	2300      	movs	r3, #0
 800103a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800103c:	2303      	movs	r3, #3
 800103e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001040:	2307      	movs	r3, #7
 8001042:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001044:	f107 0314 	add.w	r3, r7, #20
 8001048:	4619      	mov	r1, r3
 800104a:	4816      	ldr	r0, [pc, #88]	; (80010a4 <MX_GPIO_Init+0x428>)
 800104c:	f006 f8ec 	bl	8007228 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8001050:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001054:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001056:	2312      	movs	r3, #18
 8001058:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800105a:	2301      	movs	r3, #1
 800105c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800105e:	2303      	movs	r3, #3
 8001060:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001062:	2304      	movs	r3, #4
 8001064:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001066:	f107 0314 	add.w	r3, r7, #20
 800106a:	4619      	mov	r1, r3
 800106c:	480e      	ldr	r0, [pc, #56]	; (80010a8 <MX_GPIO_Init+0x42c>)
 800106e:	f006 f8db 	bl	8007228 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001072:	2200      	movs	r2, #0
 8001074:	2100      	movs	r1, #0
 8001076:	2017      	movs	r0, #23
 8001078:	f006 f89f 	bl	80071ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800107c:	2017      	movs	r0, #23
 800107e:	f006 f8b8 	bl	80071f2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001082:	2200      	movs	r2, #0
 8001084:	2100      	movs	r1, #0
 8001086:	2028      	movs	r0, #40	; 0x28
 8001088:	f006 f897 	bl	80071ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800108c:	2028      	movs	r0, #40	; 0x28
 800108e:	f006 f8b0 	bl	80071f2 <HAL_NVIC_EnableIRQ>

}
 8001092:	bf00      	nop
 8001094:	3728      	adds	r7, #40	; 0x28
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	10110000 	.word	0x10110000
 80010a0:	48000800 	.word	0x48000800
 80010a4:	48000c00 	.word	0x48000c00
 80010a8:	48000400 	.word	0x48000400

080010ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80010b0:	bf00      	nop
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
	...

080010bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	b083      	sub	sp, #12
 80010c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010c2:	4b0f      	ldr	r3, [pc, #60]	; (8001100 <HAL_MspInit+0x44>)
 80010c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010c6:	4a0e      	ldr	r2, [pc, #56]	; (8001100 <HAL_MspInit+0x44>)
 80010c8:	f043 0301 	orr.w	r3, r3, #1
 80010cc:	6613      	str	r3, [r2, #96]	; 0x60
 80010ce:	4b0c      	ldr	r3, [pc, #48]	; (8001100 <HAL_MspInit+0x44>)
 80010d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010d2:	f003 0301 	and.w	r3, r3, #1
 80010d6:	607b      	str	r3, [r7, #4]
 80010d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010da:	4b09      	ldr	r3, [pc, #36]	; (8001100 <HAL_MspInit+0x44>)
 80010dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010de:	4a08      	ldr	r2, [pc, #32]	; (8001100 <HAL_MspInit+0x44>)
 80010e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010e4:	6593      	str	r3, [r2, #88]	; 0x58
 80010e6:	4b06      	ldr	r3, [pc, #24]	; (8001100 <HAL_MspInit+0x44>)
 80010e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010ee:	603b      	str	r3, [r7, #0]
 80010f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010f2:	bf00      	nop
 80010f4:	370c      	adds	r7, #12
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr
 80010fe:	bf00      	nop
 8001100:	40021000 	.word	0x40021000

08001104 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b08c      	sub	sp, #48	; 0x30
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800110c:	f107 031c 	add.w	r3, r7, #28
 8001110:	2200      	movs	r2, #0
 8001112:	601a      	str	r2, [r3, #0]
 8001114:	605a      	str	r2, [r3, #4]
 8001116:	609a      	str	r2, [r3, #8]
 8001118:	60da      	str	r2, [r3, #12]
 800111a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a2e      	ldr	r2, [pc, #184]	; (80011dc <HAL_UART_MspInit+0xd8>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d129      	bne.n	800117a <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001126:	4b2e      	ldr	r3, [pc, #184]	; (80011e0 <HAL_UART_MspInit+0xdc>)
 8001128:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800112a:	4a2d      	ldr	r2, [pc, #180]	; (80011e0 <HAL_UART_MspInit+0xdc>)
 800112c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001130:	6593      	str	r3, [r2, #88]	; 0x58
 8001132:	4b2b      	ldr	r3, [pc, #172]	; (80011e0 <HAL_UART_MspInit+0xdc>)
 8001134:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001136:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800113a:	61bb      	str	r3, [r7, #24]
 800113c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800113e:	4b28      	ldr	r3, [pc, #160]	; (80011e0 <HAL_UART_MspInit+0xdc>)
 8001140:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001142:	4a27      	ldr	r2, [pc, #156]	; (80011e0 <HAL_UART_MspInit+0xdc>)
 8001144:	f043 0301 	orr.w	r3, r3, #1
 8001148:	64d3      	str	r3, [r2, #76]	; 0x4c
 800114a:	4b25      	ldr	r3, [pc, #148]	; (80011e0 <HAL_UART_MspInit+0xdc>)
 800114c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800114e:	f003 0301 	and.w	r3, r3, #1
 8001152:	617b      	str	r3, [r7, #20]
 8001154:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8001156:	2303      	movs	r3, #3
 8001158:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800115a:	2302      	movs	r3, #2
 800115c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115e:	2300      	movs	r3, #0
 8001160:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001162:	2303      	movs	r3, #3
 8001164:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001166:	2308      	movs	r3, #8
 8001168:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800116a:	f107 031c 	add.w	r3, r7, #28
 800116e:	4619      	mov	r1, r3
 8001170:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001174:	f006 f858 	bl	8007228 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001178:	e02c      	b.n	80011d4 <HAL_UART_MspInit+0xd0>
  else if(huart->Instance==USART1)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4a19      	ldr	r2, [pc, #100]	; (80011e4 <HAL_UART_MspInit+0xe0>)
 8001180:	4293      	cmp	r3, r2
 8001182:	d127      	bne.n	80011d4 <HAL_UART_MspInit+0xd0>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001184:	4b16      	ldr	r3, [pc, #88]	; (80011e0 <HAL_UART_MspInit+0xdc>)
 8001186:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001188:	4a15      	ldr	r2, [pc, #84]	; (80011e0 <HAL_UART_MspInit+0xdc>)
 800118a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800118e:	6613      	str	r3, [r2, #96]	; 0x60
 8001190:	4b13      	ldr	r3, [pc, #76]	; (80011e0 <HAL_UART_MspInit+0xdc>)
 8001192:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001194:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001198:	613b      	str	r3, [r7, #16]
 800119a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800119c:	4b10      	ldr	r3, [pc, #64]	; (80011e0 <HAL_UART_MspInit+0xdc>)
 800119e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011a0:	4a0f      	ldr	r2, [pc, #60]	; (80011e0 <HAL_UART_MspInit+0xdc>)
 80011a2:	f043 0302 	orr.w	r3, r3, #2
 80011a6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011a8:	4b0d      	ldr	r3, [pc, #52]	; (80011e0 <HAL_UART_MspInit+0xdc>)
 80011aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ac:	f003 0302 	and.w	r3, r3, #2
 80011b0:	60fb      	str	r3, [r7, #12]
 80011b2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 80011b4:	23c0      	movs	r3, #192	; 0xc0
 80011b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b8:	2302      	movs	r3, #2
 80011ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011bc:	2300      	movs	r3, #0
 80011be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011c0:	2303      	movs	r3, #3
 80011c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80011c4:	2307      	movs	r3, #7
 80011c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011c8:	f107 031c 	add.w	r3, r7, #28
 80011cc:	4619      	mov	r1, r3
 80011ce:	4806      	ldr	r0, [pc, #24]	; (80011e8 <HAL_UART_MspInit+0xe4>)
 80011d0:	f006 f82a 	bl	8007228 <HAL_GPIO_Init>
}
 80011d4:	bf00      	nop
 80011d6:	3730      	adds	r7, #48	; 0x30
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	40004c00 	.word	0x40004c00
 80011e0:	40021000 	.word	0x40021000
 80011e4:	40013800 	.word	0x40013800
 80011e8:	48000400 	.word	0x48000400

080011ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80011f0:	bf00      	nop
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr

080011fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011fa:	b480      	push	{r7}
 80011fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011fe:	e7fe      	b.n	80011fe <HardFault_Handler+0x4>

08001200 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001204:	e7fe      	b.n	8001204 <MemManage_Handler+0x4>

08001206 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001206:	b480      	push	{r7}
 8001208:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800120a:	e7fe      	b.n	800120a <BusFault_Handler+0x4>

0800120c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001210:	e7fe      	b.n	8001210 <UsageFault_Handler+0x4>

08001212 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001212:	b480      	push	{r7}
 8001214:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001216:	bf00      	nop
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr

08001220 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001224:	bf00      	nop
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr

0800122e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800122e:	b480      	push	{r7}
 8001230:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001232:	bf00      	nop
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr

0800123c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001240:	f005 fe9e 	bl	8006f80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001244:	bf00      	nop
 8001246:	bd80      	pop	{r7, pc}

08001248 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 800124c:	2020      	movs	r0, #32
 800124e:	f006 f9c3 	bl	80075d8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001252:	2040      	movs	r0, #64	; 0x40
 8001254:	f006 f9c0 	bl	80075d8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001258:	2080      	movs	r0, #128	; 0x80
 800125a:	f006 f9bd 	bl	80075d8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 800125e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001262:	f006 f9b9 	bl	80075d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001266:	bf00      	nop
 8001268:	bd80      	pop	{r7, pc}

0800126a <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800126a:	b580      	push	{r7, lr}
 800126c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 800126e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001272:	f006 f9b1 	bl	80075d8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8001276:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800127a:	f006 f9ad 	bl	80075d8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 800127e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001282:	f006 f9a9 	bl	80075d8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8001286:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800128a:	f006 f9a5 	bl	80075d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800128e:	bf00      	nop
 8001290:	bd80      	pop	{r7, pc}

08001292 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001292:	b580      	push	{r7, lr}
 8001294:	b086      	sub	sp, #24
 8001296:	af00      	add	r7, sp, #0
 8001298:	60f8      	str	r0, [r7, #12]
 800129a:	60b9      	str	r1, [r7, #8]
 800129c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800129e:	2300      	movs	r3, #0
 80012a0:	617b      	str	r3, [r7, #20]
 80012a2:	e00a      	b.n	80012ba <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80012a4:	f3af 8000 	nop.w
 80012a8:	4601      	mov	r1, r0
 80012aa:	68bb      	ldr	r3, [r7, #8]
 80012ac:	1c5a      	adds	r2, r3, #1
 80012ae:	60ba      	str	r2, [r7, #8]
 80012b0:	b2ca      	uxtb	r2, r1
 80012b2:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	3301      	adds	r3, #1
 80012b8:	617b      	str	r3, [r7, #20]
 80012ba:	697a      	ldr	r2, [r7, #20]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	429a      	cmp	r2, r3
 80012c0:	dbf0      	blt.n	80012a4 <_read+0x12>
	}

return len;
 80012c2:	687b      	ldr	r3, [r7, #4]
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	3718      	adds	r7, #24
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}

080012cc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b086      	sub	sp, #24
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	60f8      	str	r0, [r7, #12]
 80012d4:	60b9      	str	r1, [r7, #8]
 80012d6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012d8:	2300      	movs	r3, #0
 80012da:	617b      	str	r3, [r7, #20]
 80012dc:	e009      	b.n	80012f2 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80012de:	68bb      	ldr	r3, [r7, #8]
 80012e0:	1c5a      	adds	r2, r3, #1
 80012e2:	60ba      	str	r2, [r7, #8]
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	4618      	mov	r0, r3
 80012e8:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	3301      	adds	r3, #1
 80012f0:	617b      	str	r3, [r7, #20]
 80012f2:	697a      	ldr	r2, [r7, #20]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	429a      	cmp	r2, r3
 80012f8:	dbf1      	blt.n	80012de <_write+0x12>
	}
	return len;
 80012fa:	687b      	ldr	r3, [r7, #4]
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	3718      	adds	r7, #24
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}

08001304 <_close>:

int _close(int file)
{
 8001304:	b480      	push	{r7}
 8001306:	b083      	sub	sp, #12
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
	return -1;
 800130c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001310:	4618      	mov	r0, r3
 8001312:	370c      	adds	r7, #12
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr

0800131c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800131c:	b480      	push	{r7}
 800131e:	b083      	sub	sp, #12
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
 8001324:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800132c:	605a      	str	r2, [r3, #4]
	return 0;
 800132e:	2300      	movs	r3, #0
}
 8001330:	4618      	mov	r0, r3
 8001332:	370c      	adds	r7, #12
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr

0800133c <_isatty>:

int _isatty(int file)
{
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
	return 1;
 8001344:	2301      	movs	r3, #1
}
 8001346:	4618      	mov	r0, r3
 8001348:	370c      	adds	r7, #12
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr

08001352 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001352:	b480      	push	{r7}
 8001354:	b085      	sub	sp, #20
 8001356:	af00      	add	r7, sp, #0
 8001358:	60f8      	str	r0, [r7, #12]
 800135a:	60b9      	str	r1, [r7, #8]
 800135c:	607a      	str	r2, [r7, #4]
	return 0;
 800135e:	2300      	movs	r3, #0
}
 8001360:	4618      	mov	r0, r3
 8001362:	3714      	adds	r7, #20
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr

0800136c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b086      	sub	sp, #24
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001374:	4a14      	ldr	r2, [pc, #80]	; (80013c8 <_sbrk+0x5c>)
 8001376:	4b15      	ldr	r3, [pc, #84]	; (80013cc <_sbrk+0x60>)
 8001378:	1ad3      	subs	r3, r2, r3
 800137a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001380:	4b13      	ldr	r3, [pc, #76]	; (80013d0 <_sbrk+0x64>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d102      	bne.n	800138e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001388:	4b11      	ldr	r3, [pc, #68]	; (80013d0 <_sbrk+0x64>)
 800138a:	4a12      	ldr	r2, [pc, #72]	; (80013d4 <_sbrk+0x68>)
 800138c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800138e:	4b10      	ldr	r3, [pc, #64]	; (80013d0 <_sbrk+0x64>)
 8001390:	681a      	ldr	r2, [r3, #0]
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	4413      	add	r3, r2
 8001396:	693a      	ldr	r2, [r7, #16]
 8001398:	429a      	cmp	r2, r3
 800139a:	d207      	bcs.n	80013ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800139c:	f009 f8ea 	bl	800a574 <__errno>
 80013a0:	4602      	mov	r2, r0
 80013a2:	230c      	movs	r3, #12
 80013a4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80013a6:	f04f 33ff 	mov.w	r3, #4294967295
 80013aa:	e009      	b.n	80013c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013ac:	4b08      	ldr	r3, [pc, #32]	; (80013d0 <_sbrk+0x64>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013b2:	4b07      	ldr	r3, [pc, #28]	; (80013d0 <_sbrk+0x64>)
 80013b4:	681a      	ldr	r2, [r3, #0]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	4413      	add	r3, r2
 80013ba:	4a05      	ldr	r2, [pc, #20]	; (80013d0 <_sbrk+0x64>)
 80013bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013be:	68fb      	ldr	r3, [r7, #12]
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	3718      	adds	r7, #24
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	20018000 	.word	0x20018000
 80013cc:	00000400 	.word	0x00000400
 80013d0:	20000518 	.word	0x20000518
 80013d4:	20000748 	.word	0x20000748

080013d8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013dc:	4b17      	ldr	r3, [pc, #92]	; (800143c <SystemInit+0x64>)
 80013de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013e2:	4a16      	ldr	r2, [pc, #88]	; (800143c <SystemInit+0x64>)
 80013e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80013ec:	4b14      	ldr	r3, [pc, #80]	; (8001440 <SystemInit+0x68>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a13      	ldr	r2, [pc, #76]	; (8001440 <SystemInit+0x68>)
 80013f2:	f043 0301 	orr.w	r3, r3, #1
 80013f6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80013f8:	4b11      	ldr	r3, [pc, #68]	; (8001440 <SystemInit+0x68>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80013fe:	4b10      	ldr	r3, [pc, #64]	; (8001440 <SystemInit+0x68>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4a0f      	ldr	r2, [pc, #60]	; (8001440 <SystemInit+0x68>)
 8001404:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001408:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800140c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800140e:	4b0c      	ldr	r3, [pc, #48]	; (8001440 <SystemInit+0x68>)
 8001410:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001414:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001416:	4b0a      	ldr	r3, [pc, #40]	; (8001440 <SystemInit+0x68>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4a09      	ldr	r2, [pc, #36]	; (8001440 <SystemInit+0x68>)
 800141c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001420:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001422:	4b07      	ldr	r3, [pc, #28]	; (8001440 <SystemInit+0x68>)
 8001424:	2200      	movs	r2, #0
 8001426:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001428:	4b04      	ldr	r3, [pc, #16]	; (800143c <SystemInit+0x64>)
 800142a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800142e:	609a      	str	r2, [r3, #8]
#endif
}
 8001430:	bf00      	nop
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr
 800143a:	bf00      	nop
 800143c:	e000ed00 	.word	0xe000ed00
 8001440:	40021000 	.word	0x40021000

08001444 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001444:	f8df d034 	ldr.w	sp, [pc, #52]	; 800147c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001448:	f7ff ffc6 	bl	80013d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800144c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800144e:	e003      	b.n	8001458 <LoopCopyDataInit>

08001450 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001450:	4b0b      	ldr	r3, [pc, #44]	; (8001480 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001452:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001454:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001456:	3104      	adds	r1, #4

08001458 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001458:	480a      	ldr	r0, [pc, #40]	; (8001484 <LoopForever+0xa>)
	ldr	r3, =_edata
 800145a:	4b0b      	ldr	r3, [pc, #44]	; (8001488 <LoopForever+0xe>)
	adds	r2, r0, r1
 800145c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800145e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001460:	d3f6      	bcc.n	8001450 <CopyDataInit>
	ldr	r2, =_sbss
 8001462:	4a0a      	ldr	r2, [pc, #40]	; (800148c <LoopForever+0x12>)
	b	LoopFillZerobss
 8001464:	e002      	b.n	800146c <LoopFillZerobss>

08001466 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001466:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001468:	f842 3b04 	str.w	r3, [r2], #4

0800146c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800146c:	4b08      	ldr	r3, [pc, #32]	; (8001490 <LoopForever+0x16>)
	cmp	r2, r3
 800146e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001470:	d3f9      	bcc.n	8001466 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001472:	f009 f885 	bl	800a580 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001476:	f7ff fa5f 	bl	8000938 <main>

0800147a <LoopForever>:

LoopForever:
    b LoopForever
 800147a:	e7fe      	b.n	800147a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800147c:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001480:	0800bd5c 	.word	0x0800bd5c
	ldr	r0, =_sdata
 8001484:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001488:	200004f8 	.word	0x200004f8
	ldr	r2, =_sbss
 800148c:	200004f8 	.word	0x200004f8
	ldr	r3, = _ebss
 8001490:	20000748 	.word	0x20000748

08001494 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001494:	e7fe      	b.n	8001494 <ADC1_2_IRQHandler>
	...

08001498 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b08a      	sub	sp, #40	; 0x28
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80014a0:	4b27      	ldr	r3, [pc, #156]	; (8001540 <I2Cx_MspInit+0xa8>)
 80014a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014a4:	4a26      	ldr	r2, [pc, #152]	; (8001540 <I2Cx_MspInit+0xa8>)
 80014a6:	f043 0302 	orr.w	r3, r3, #2
 80014aa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014ac:	4b24      	ldr	r3, [pc, #144]	; (8001540 <I2Cx_MspInit+0xa8>)
 80014ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014b0:	f003 0302 	and.w	r3, r3, #2
 80014b4:	613b      	str	r3, [r7, #16]
 80014b6:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 80014b8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80014bc:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80014be:	2312      	movs	r3, #18
 80014c0:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 80014c2:	2301      	movs	r3, #1
 80014c4:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014c6:	2303      	movs	r3, #3
 80014c8:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 80014ca:	2304      	movs	r3, #4
 80014cc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80014ce:	f107 0314 	add.w	r3, r7, #20
 80014d2:	4619      	mov	r1, r3
 80014d4:	481b      	ldr	r0, [pc, #108]	; (8001544 <I2Cx_MspInit+0xac>)
 80014d6:	f005 fea7 	bl	8007228 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80014da:	f107 0314 	add.w	r3, r7, #20
 80014de:	4619      	mov	r1, r3
 80014e0:	4818      	ldr	r0, [pc, #96]	; (8001544 <I2Cx_MspInit+0xac>)
 80014e2:	f005 fea1 	bl	8007228 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 80014e6:	4b16      	ldr	r3, [pc, #88]	; (8001540 <I2Cx_MspInit+0xa8>)
 80014e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014ea:	4a15      	ldr	r2, [pc, #84]	; (8001540 <I2Cx_MspInit+0xa8>)
 80014ec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80014f0:	6593      	str	r3, [r2, #88]	; 0x58
 80014f2:	4b13      	ldr	r3, [pc, #76]	; (8001540 <I2Cx_MspInit+0xa8>)
 80014f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014fa:	60fb      	str	r3, [r7, #12]
 80014fc:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 80014fe:	4b10      	ldr	r3, [pc, #64]	; (8001540 <I2Cx_MspInit+0xa8>)
 8001500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001502:	4a0f      	ldr	r2, [pc, #60]	; (8001540 <I2Cx_MspInit+0xa8>)
 8001504:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001508:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 800150a:	4b0d      	ldr	r3, [pc, #52]	; (8001540 <I2Cx_MspInit+0xa8>)
 800150c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800150e:	4a0c      	ldr	r2, [pc, #48]	; (8001540 <I2Cx_MspInit+0xa8>)
 8001510:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001514:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8001516:	2200      	movs	r2, #0
 8001518:	210f      	movs	r1, #15
 800151a:	2021      	movs	r0, #33	; 0x21
 800151c:	f005 fe4d 	bl	80071ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8001520:	2021      	movs	r0, #33	; 0x21
 8001522:	f005 fe66 	bl	80071f2 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8001526:	2200      	movs	r2, #0
 8001528:	210f      	movs	r1, #15
 800152a:	2022      	movs	r0, #34	; 0x22
 800152c:	f005 fe45 	bl	80071ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8001530:	2022      	movs	r0, #34	; 0x22
 8001532:	f005 fe5e 	bl	80071f2 <HAL_NVIC_EnableIRQ>
}
 8001536:	bf00      	nop
 8001538:	3728      	adds	r7, #40	; 0x28
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	40021000 	.word	0x40021000
 8001544:	48000400 	.word	0x48000400

08001548 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	4a12      	ldr	r2, [pc, #72]	; (800159c <I2Cx_Init+0x54>)
 8001554:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	4a11      	ldr	r2, [pc, #68]	; (80015a0 <I2Cx_Init+0x58>)
 800155a:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2200      	movs	r2, #0
 8001560:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2201      	movs	r2, #1
 8001566:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2200      	movs	r2, #0
 800156c:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2200      	movs	r2, #0
 8001572:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2200      	movs	r2, #0
 8001578:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2200      	movs	r2, #0
 800157e:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8001580:	6878      	ldr	r0, [r7, #4]
 8001582:	f7ff ff89 	bl	8001498 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 8001586:	6878      	ldr	r0, [r7, #4]
 8001588:	f006 f849 	bl	800761e <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 800158c:	2100      	movs	r1, #0
 800158e:	6878      	ldr	r0, [r7, #4]
 8001590:	f006 ffb8 	bl	8008504 <HAL_I2CEx_ConfigAnalogFilter>
}
 8001594:	bf00      	nop
 8001596:	3708      	adds	r7, #8
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	40005800 	.word	0x40005800
 80015a0:	00702681 	.word	0x00702681

080015a4 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b08a      	sub	sp, #40	; 0x28
 80015a8:	af04      	add	r7, sp, #16
 80015aa:	60f8      	str	r0, [r7, #12]
 80015ac:	4608      	mov	r0, r1
 80015ae:	4611      	mov	r1, r2
 80015b0:	461a      	mov	r2, r3
 80015b2:	4603      	mov	r3, r0
 80015b4:	72fb      	strb	r3, [r7, #11]
 80015b6:	460b      	mov	r3, r1
 80015b8:	813b      	strh	r3, [r7, #8]
 80015ba:	4613      	mov	r3, r2
 80015bc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80015be:	2300      	movs	r3, #0
 80015c0:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80015c2:	7afb      	ldrb	r3, [r7, #11]
 80015c4:	b299      	uxth	r1, r3
 80015c6:	88f8      	ldrh	r0, [r7, #6]
 80015c8:	893a      	ldrh	r2, [r7, #8]
 80015ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015ce:	9302      	str	r3, [sp, #8]
 80015d0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80015d2:	9301      	str	r3, [sp, #4]
 80015d4:	6a3b      	ldr	r3, [r7, #32]
 80015d6:	9300      	str	r3, [sp, #0]
 80015d8:	4603      	mov	r3, r0
 80015da:	68f8      	ldr	r0, [r7, #12]
 80015dc:	f006 fbf0 	bl	8007dc0 <HAL_I2C_Mem_Read>
 80015e0:	4603      	mov	r3, r0
 80015e2:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80015e4:	7dfb      	ldrb	r3, [r7, #23]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d004      	beq.n	80015f4 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occured */
    I2Cx_Error(i2c_handler, Addr);
 80015ea:	7afb      	ldrb	r3, [r7, #11]
 80015ec:	4619      	mov	r1, r3
 80015ee:	68f8      	ldr	r0, [r7, #12]
 80015f0:	f000 f832 	bl	8001658 <I2Cx_Error>
  }
  return status;
 80015f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	3718      	adds	r7, #24
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}

080015fe <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 80015fe:	b580      	push	{r7, lr}
 8001600:	b08a      	sub	sp, #40	; 0x28
 8001602:	af04      	add	r7, sp, #16
 8001604:	60f8      	str	r0, [r7, #12]
 8001606:	4608      	mov	r0, r1
 8001608:	4611      	mov	r1, r2
 800160a:	461a      	mov	r2, r3
 800160c:	4603      	mov	r3, r0
 800160e:	72fb      	strb	r3, [r7, #11]
 8001610:	460b      	mov	r3, r1
 8001612:	813b      	strh	r3, [r7, #8]
 8001614:	4613      	mov	r3, r2
 8001616:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001618:	2300      	movs	r3, #0
 800161a:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800161c:	7afb      	ldrb	r3, [r7, #11]
 800161e:	b299      	uxth	r1, r3
 8001620:	88f8      	ldrh	r0, [r7, #6]
 8001622:	893a      	ldrh	r2, [r7, #8]
 8001624:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001628:	9302      	str	r3, [sp, #8]
 800162a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800162c:	9301      	str	r3, [sp, #4]
 800162e:	6a3b      	ldr	r3, [r7, #32]
 8001630:	9300      	str	r3, [sp, #0]
 8001632:	4603      	mov	r3, r0
 8001634:	68f8      	ldr	r0, [r7, #12]
 8001636:	f006 faaf 	bl	8007b98 <HAL_I2C_Mem_Write>
 800163a:	4603      	mov	r3, r0
 800163c:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800163e:	7dfb      	ldrb	r3, [r7, #23]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d004      	beq.n	800164e <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8001644:	7afb      	ldrb	r3, [r7, #11]
 8001646:	4619      	mov	r1, r3
 8001648:	68f8      	ldr	r0, [r7, #12]
 800164a:	f000 f805 	bl	8001658 <I2Cx_Error>
  }
  return status;
 800164e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001650:	4618      	mov	r0, r3
 8001652:	3718      	adds	r7, #24
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}

08001658 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
 8001660:	460b      	mov	r3, r1
 8001662:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8001664:	6878      	ldr	r0, [r7, #4]
 8001666:	f006 f869 	bl	800773c <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 800166a:	6878      	ldr	r0, [r7, #4]
 800166c:	f7ff ff6c 	bl	8001548 <I2Cx_Init>
}
 8001670:	bf00      	nop
 8001672:	3708      	adds	r7, #8
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}

08001678 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 800167c:	4802      	ldr	r0, [pc, #8]	; (8001688 <SENSOR_IO_Init+0x10>)
 800167e:	f7ff ff63 	bl	8001548 <I2Cx_Init>
}
 8001682:	bf00      	nop
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	200006b4 	.word	0x200006b4

0800168c <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b084      	sub	sp, #16
 8001690:	af02      	add	r7, sp, #8
 8001692:	4603      	mov	r3, r0
 8001694:	71fb      	strb	r3, [r7, #7]
 8001696:	460b      	mov	r3, r1
 8001698:	71bb      	strb	r3, [r7, #6]
 800169a:	4613      	mov	r3, r2
 800169c:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 800169e:	79bb      	ldrb	r3, [r7, #6]
 80016a0:	b29a      	uxth	r2, r3
 80016a2:	79f9      	ldrb	r1, [r7, #7]
 80016a4:	2301      	movs	r3, #1
 80016a6:	9301      	str	r3, [sp, #4]
 80016a8:	1d7b      	adds	r3, r7, #5
 80016aa:	9300      	str	r3, [sp, #0]
 80016ac:	2301      	movs	r3, #1
 80016ae:	4803      	ldr	r0, [pc, #12]	; (80016bc <SENSOR_IO_Write+0x30>)
 80016b0:	f7ff ffa5 	bl	80015fe <I2Cx_WriteMultiple>
}
 80016b4:	bf00      	nop
 80016b6:	3708      	adds	r7, #8
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	200006b4 	.word	0x200006b4

080016c0 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b086      	sub	sp, #24
 80016c4:	af02      	add	r7, sp, #8
 80016c6:	4603      	mov	r3, r0
 80016c8:	460a      	mov	r2, r1
 80016ca:	71fb      	strb	r3, [r7, #7]
 80016cc:	4613      	mov	r3, r2
 80016ce:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 80016d0:	2300      	movs	r3, #0
 80016d2:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 80016d4:	79bb      	ldrb	r3, [r7, #6]
 80016d6:	b29a      	uxth	r2, r3
 80016d8:	79f9      	ldrb	r1, [r7, #7]
 80016da:	2301      	movs	r3, #1
 80016dc:	9301      	str	r3, [sp, #4]
 80016de:	f107 030f 	add.w	r3, r7, #15
 80016e2:	9300      	str	r3, [sp, #0]
 80016e4:	2301      	movs	r3, #1
 80016e6:	4804      	ldr	r0, [pc, #16]	; (80016f8 <SENSOR_IO_Read+0x38>)
 80016e8:	f7ff ff5c 	bl	80015a4 <I2Cx_ReadMultiple>

  return read_value;
 80016ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	3710      	adds	r7, #16
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	200006b4 	.word	0x200006b4

080016fc <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b084      	sub	sp, #16
 8001700:	af02      	add	r7, sp, #8
 8001702:	603a      	str	r2, [r7, #0]
 8001704:	461a      	mov	r2, r3
 8001706:	4603      	mov	r3, r0
 8001708:	71fb      	strb	r3, [r7, #7]
 800170a:	460b      	mov	r3, r1
 800170c:	71bb      	strb	r3, [r7, #6]
 800170e:	4613      	mov	r3, r2
 8001710:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8001712:	79bb      	ldrb	r3, [r7, #6]
 8001714:	b29a      	uxth	r2, r3
 8001716:	79f9      	ldrb	r1, [r7, #7]
 8001718:	88bb      	ldrh	r3, [r7, #4]
 800171a:	9301      	str	r3, [sp, #4]
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	9300      	str	r3, [sp, #0]
 8001720:	2301      	movs	r3, #1
 8001722:	4804      	ldr	r0, [pc, #16]	; (8001734 <SENSOR_IO_ReadMultiple+0x38>)
 8001724:	f7ff ff3e 	bl	80015a4 <I2Cx_ReadMultiple>
 8001728:	4603      	mov	r3, r0
 800172a:	b29b      	uxth	r3, r3
}
 800172c:	4618      	mov	r0, r3
 800172e:	3708      	adds	r7, #8
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	200006b4 	.word	0x200006b4

08001738 <BSP_MAGNETO_Init>:
/**
 * @brief Initialize a magnetometer sensor
 * @retval COMPONENT_ERROR in case of failure
 */
MAGNETO_StatusTypeDef BSP_MAGNETO_Init(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af00      	add	r7, sp, #0
  MAGNETO_StatusTypeDef ret = MAGNETO_OK;
 800173e:	2300      	movs	r3, #0
 8001740:	71fb      	strb	r3, [r7, #7]
  MAGNETO_InitTypeDef LIS3MDL_InitStructureMag;

  if(Lis3mdlMagDrv.ReadID() != I_AM_LIS3MDL)
 8001742:	4b11      	ldr	r3, [pc, #68]	; (8001788 <BSP_MAGNETO_Init+0x50>)
 8001744:	689b      	ldr	r3, [r3, #8]
 8001746:	4798      	blx	r3
 8001748:	4603      	mov	r3, r0
 800174a:	2b3d      	cmp	r3, #61	; 0x3d
 800174c:	d002      	beq.n	8001754 <BSP_MAGNETO_Init+0x1c>
  {
    ret = MAGNETO_ERROR;
 800174e:	2301      	movs	r3, #1
 8001750:	71fb      	strb	r3, [r7, #7]
 8001752:	e013      	b.n	800177c <BSP_MAGNETO_Init+0x44>
  }
  else
  {
    /* Initialize the MAGNETO magnetometer driver structure */
    MagnetoDrv = &Lis3mdlMagDrv;
 8001754:	4b0d      	ldr	r3, [pc, #52]	; (800178c <BSP_MAGNETO_Init+0x54>)
 8001756:	4a0c      	ldr	r2, [pc, #48]	; (8001788 <BSP_MAGNETO_Init+0x50>)
 8001758:	601a      	str	r2, [r3, #0]
    
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the MAGNETO magnetometer structure */
    LIS3MDL_InitStructureMag.Register1 = LIS3MDL_MAG_TEMPSENSOR_DISABLE | LIS3MDL_MAG_OM_XY_HIGH | LIS3MDL_MAG_ODR_40_HZ;
 800175a:	2358      	movs	r3, #88	; 0x58
 800175c:	703b      	strb	r3, [r7, #0]
    LIS3MDL_InitStructureMag.Register2 = LIS3MDL_MAG_FS_4_GA | LIS3MDL_MAG_REBOOT_DEFAULT | LIS3MDL_MAG_SOFT_RESET_DEFAULT;
 800175e:	2300      	movs	r3, #0
 8001760:	707b      	strb	r3, [r7, #1]
    LIS3MDL_InitStructureMag.Register3 = LIS3MDL_MAG_CONFIG_NORMAL_MODE | LIS3MDL_MAG_CONTINUOUS_MODE;
 8001762:	2300      	movs	r3, #0
 8001764:	70bb      	strb	r3, [r7, #2]
    LIS3MDL_InitStructureMag.Register4 = LIS3MDL_MAG_OM_Z_HIGH | LIS3MDL_MAG_BLE_LSB;
 8001766:	2308      	movs	r3, #8
 8001768:	70fb      	strb	r3, [r7, #3]
    LIS3MDL_InitStructureMag.Register5 = LIS3MDL_MAG_BDU_MSBLSB;
 800176a:	2340      	movs	r3, #64	; 0x40
 800176c:	713b      	strb	r3, [r7, #4]
    /* Configure the MAGNETO magnetometer main parameters */
    MagnetoDrv->Init(LIS3MDL_InitStructureMag);
 800176e:	4b07      	ldr	r3, [pc, #28]	; (800178c <BSP_MAGNETO_Init+0x54>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	463a      	mov	r2, r7
 8001776:	e892 0003 	ldmia.w	r2, {r0, r1}
 800177a:	4798      	blx	r3
  } 

  return ret;  
 800177c:	79fb      	ldrb	r3, [r7, #7]
}
 800177e:	4618      	mov	r0, r3
 8001780:	3708      	adds	r7, #8
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	2000019c 	.word	0x2000019c
 800178c:	2000051c 	.word	0x2000051c

08001790 <BSP_MAGNETO_GetXYZ>:
  * @brief  Get XYZ magnetometer values.
  * @param  pDataXYZ Pointer on 3 magnetometer values table with
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis 
  */
void BSP_MAGNETO_GetXYZ(int16_t *pDataXYZ)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  if(MagnetoDrv != NULL)
 8001798:	4b08      	ldr	r3, [pc, #32]	; (80017bc <BSP_MAGNETO_GetXYZ+0x2c>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d009      	beq.n	80017b4 <BSP_MAGNETO_GetXYZ+0x24>
  {
    if(MagnetoDrv->GetXYZ != NULL)
 80017a0:	4b06      	ldr	r3, [pc, #24]	; (80017bc <BSP_MAGNETO_GetXYZ+0x2c>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d004      	beq.n	80017b4 <BSP_MAGNETO_GetXYZ+0x24>
    {   
      MagnetoDrv->GetXYZ(pDataXYZ);
 80017aa:	4b04      	ldr	r3, [pc, #16]	; (80017bc <BSP_MAGNETO_GetXYZ+0x2c>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b0:	6878      	ldr	r0, [r7, #4]
 80017b2:	4798      	blx	r3
    }
  }
}
 80017b4:	bf00      	nop
 80017b6:	3708      	adds	r7, #8
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	2000051c 	.word	0x2000051c

080017c0 <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
  uint8_t ret = TSENSOR_ERROR;
 80017c6:	2301      	movs	r3, #1
 80017c8:	71fb      	strb	r3, [r7, #7]

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 80017ca:	4b09      	ldr	r3, [pc, #36]	; (80017f0 <BSP_TSENSOR_Init+0x30>)
 80017cc:	4a09      	ldr	r2, [pc, #36]	; (80017f4 <BSP_TSENSOR_Init+0x34>)
 80017ce:	601a      	str	r2, [r3, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 80017d0:	f7ff ff52 	bl	8001678 <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 80017d4:	4b06      	ldr	r3, [pc, #24]	; (80017f0 <BSP_TSENSOR_Init+0x30>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	2100      	movs	r1, #0
 80017dc:	20be      	movs	r0, #190	; 0xbe
 80017de:	4798      	blx	r3

  ret = TSENSOR_OK;
 80017e0:	2300      	movs	r3, #0
 80017e2:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 80017e4:	79fb      	ldrb	r3, [r7, #7]
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	3708      	adds	r7, #8
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	20000520 	.word	0x20000520
 80017f4:	2000018c 	.word	0x2000018c

080017f8 <BSP_TSENSOR_ReadTemp>:
/**
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
float BSP_TSENSOR_ReadTemp(void)
{ 
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0
  return tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 80017fc:	4b04      	ldr	r3, [pc, #16]	; (8001810 <BSP_TSENSOR_ReadTemp+0x18>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	68db      	ldr	r3, [r3, #12]
 8001802:	20be      	movs	r0, #190	; 0xbe
 8001804:	4798      	blx	r3
 8001806:	eef0 7a40 	vmov.f32	s15, s0
}
 800180a:	eeb0 0a67 	vmov.f32	s0, s15
 800180e:	bd80      	pop	{r7, pc}
 8001810:	20000520 	.word	0x20000520

08001814 <VL53L0X_PROXIMITY_Init>:

/**
  * @brief  VL53L0X proximity sensor Initialization.
  */
void VL53L0X_PROXIMITY_Init(void)
{
 8001814:	b590      	push	{r4, r7, lr}
 8001816:	b0f9      	sub	sp, #484	; 0x1e4
 8001818:	af5e      	add	r7, sp, #376	; 0x178
  uint16_t vl53l0x_id = 0; 
 800181a:	2300      	movs	r3, #0
 800181c:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
  VL53L0X_DeviceInfo_t VL53L0X_DeviceInfo;
  
  /* Initialize IO interface */
  SENSOR_IO_Init();
 8001820:	f7ff ff2a 	bl	8001678 <SENSOR_IO_Init>
  VL53L0X_PROXIMITY_MspInit();
 8001824:	f000 f854 	bl	80018d0 <VL53L0X_PROXIMITY_MspInit>
  
  memset(&VL53L0X_DeviceInfo, 0, sizeof(VL53L0X_DeviceInfo_t));
 8001828:	463b      	mov	r3, r7
 800182a:	2263      	movs	r2, #99	; 0x63
 800182c:	2100      	movs	r1, #0
 800182e:	4618      	mov	r0, r3
 8001830:	f008 fed5 	bl	800a5de <memset>
  
  if (VL53L0X_ERROR_NONE == VL53L0X_GetDeviceInfo(&Dev, &VL53L0X_DeviceInfo))
 8001834:	463b      	mov	r3, r7
 8001836:	4619      	mov	r1, r3
 8001838:	481a      	ldr	r0, [pc, #104]	; (80018a4 <VL53L0X_PROXIMITY_Init+0x90>)
 800183a:	f000 faf5 	bl	8001e28 <VL53L0X_GetDeviceInfo>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d127      	bne.n	8001894 <VL53L0X_PROXIMITY_Init+0x80>
  {  
    if (VL53L0X_ERROR_NONE == VL53L0X_RdWord(&Dev, VL53L0X_REG_IDENTIFICATION_MODEL_ID, (uint16_t *) &vl53l0x_id))
 8001844:	f107 0366 	add.w	r3, r7, #102	; 0x66
 8001848:	461a      	mov	r2, r3
 800184a:	21c0      	movs	r1, #192	; 0xc0
 800184c:	4815      	ldr	r0, [pc, #84]	; (80018a4 <VL53L0X_PROXIMITY_Init+0x90>)
 800184e:	f005 fa3d 	bl	8006ccc <VL53L0X_RdWord>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d119      	bne.n	800188c <VL53L0X_PROXIMITY_Init+0x78>
    {
      if (vl53l0x_id == VL53L0X_ID)
 8001858:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800185c:	f64e 62aa 	movw	r2, #61098	; 0xeeaa
 8001860:	4293      	cmp	r3, r2
 8001862:	d11a      	bne.n	800189a <VL53L0X_PROXIMITY_Init+0x86>
      {
        if (VL53L0X_ERROR_NONE == VL53L0X_DataInit(&Dev))
 8001864:	480f      	ldr	r0, [pc, #60]	; (80018a4 <VL53L0X_PROXIMITY_Init+0x90>)
 8001866:	f000 fb05 	bl	8001e74 <VL53L0X_DataInit>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d114      	bne.n	800189a <VL53L0X_PROXIMITY_Init+0x86>
        {
          SetupSingleShot(Dev);
 8001870:	4c0c      	ldr	r4, [pc, #48]	; (80018a4 <VL53L0X_PROXIMITY_Init+0x90>)
 8001872:	4668      	mov	r0, sp
 8001874:	f104 0310 	add.w	r3, r4, #16
 8001878:	f44f 72bc 	mov.w	r2, #376	; 0x178
 800187c:	4619      	mov	r1, r3
 800187e:	f008 fea3 	bl	800a5c8 <memcpy>
 8001882:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001886:	f000 f843 	bl	8001910 <SetupSingleShot>
  }
  else
  {
    printf("VL53L0X Time of Flight Failed to get infos!\n");
  }  
}
 800188a:	e006      	b.n	800189a <VL53L0X_PROXIMITY_Init+0x86>
      printf("VL53L0X Time of Flight Failed to Initialize!\n");
 800188c:	4806      	ldr	r0, [pc, #24]	; (80018a8 <VL53L0X_PROXIMITY_Init+0x94>)
 800188e:	f008 ff0b 	bl	800a6a8 <puts>
}
 8001892:	e002      	b.n	800189a <VL53L0X_PROXIMITY_Init+0x86>
    printf("VL53L0X Time of Flight Failed to get infos!\n");
 8001894:	4805      	ldr	r0, [pc, #20]	; (80018ac <VL53L0X_PROXIMITY_Init+0x98>)
 8001896:	f008 ff07 	bl	800a6a8 <puts>
}
 800189a:	bf00      	nop
 800189c:	376c      	adds	r7, #108	; 0x6c
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd90      	pop	{r4, r7, pc}
 80018a2:	bf00      	nop
 80018a4:	20000004 	.word	0x20000004
 80018a8:	0800b63c 	.word	0x0800b63c
 80018ac:	0800b66c 	.word	0x0800b66c

080018b0 <VL53L0X_PROXIMITY_GetDistance>:
/**
  * @brief  Get distance from VL53L0X proximity sensor.
  * @retval Distance in mm
  */
uint16_t VL53L0X_PROXIMITY_GetDistance(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b088      	sub	sp, #32
 80018b4:	af00      	add	r7, sp, #0
  VL53L0X_RangingMeasurementData_t RangingMeasurementData;
  
  VL53L0X_PerformSingleRangingMeasurement(&Dev, &RangingMeasurementData);
 80018b6:	1d3b      	adds	r3, r7, #4
 80018b8:	4619      	mov	r1, r3
 80018ba:	4804      	ldr	r0, [pc, #16]	; (80018cc <VL53L0X_PROXIMITY_GetDistance+0x1c>)
 80018bc:	f001 fd40 	bl	8003340 <VL53L0X_PerformSingleRangingMeasurement>
  
  return RangingMeasurementData.RangeMilliMeter;  
 80018c0:	89bb      	ldrh	r3, [r7, #12]
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3720      	adds	r7, #32
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	20000004 	.word	0x20000004

080018d0 <VL53L0X_PROXIMITY_MspInit>:

/**
  * @brief  VL53L0X proximity sensor Msp Initialization.
  */
void VL53L0X_PROXIMITY_MspInit(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b086      	sub	sp, #24
 80018d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;
  
  /*Configure GPIO pin : VL53L0X_XSHUT_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin;
 80018d6:	2340      	movs	r3, #64	; 0x40
 80018d8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018da:	2301      	movs	r3, #1
 80018dc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018de:	2301      	movs	r3, #1
 80018e0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018e2:	2302      	movs	r3, #2
 80018e4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(VL53L0X_XSHUT_GPIO_Port, &GPIO_InitStruct);
 80018e6:	1d3b      	adds	r3, r7, #4
 80018e8:	4619      	mov	r1, r3
 80018ea:	4808      	ldr	r0, [pc, #32]	; (800190c <VL53L0X_PROXIMITY_MspInit+0x3c>)
 80018ec:	f005 fc9c 	bl	8007228 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(VL53L0X_XSHUT_GPIO_Port, VL53L0X_XSHUT_Pin, GPIO_PIN_SET);
 80018f0:	2201      	movs	r2, #1
 80018f2:	2140      	movs	r1, #64	; 0x40
 80018f4:	4805      	ldr	r0, [pc, #20]	; (800190c <VL53L0X_PROXIMITY_MspInit+0x3c>)
 80018f6:	f005 fe57 	bl	80075a8 <HAL_GPIO_WritePin>
  
  HAL_Delay(1000);  
 80018fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80018fe:	f005 fb5f 	bl	8006fc0 <HAL_Delay>
}
 8001902:	bf00      	nop
 8001904:	3718      	adds	r7, #24
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	48000800 	.word	0x48000800

08001910 <SetupSingleShot>:

/**
 *  Setup all detected sensors for single shot mode and setup ranging configuration
 */
void SetupSingleShot(VL53L0X_Dev_t Dev)
{
 8001910:	b084      	sub	sp, #16
 8001912:	b580      	push	{r7, lr}
 8001914:	b088      	sub	sp, #32
 8001916:	af00      	add	r7, sp, #0
 8001918:	f107 0c28 	add.w	ip, r7, #40	; 0x28
 800191c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
  int status;
  uint8_t VhvSettings;
  uint8_t PhaseCal;
  uint32_t refSpadCount;
	uint8_t isApertureSpads;
	FixPoint1616_t signalLimit = (FixPoint1616_t)(0.25*65536);
 8001920:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001924:	61fb      	str	r3, [r7, #28]
	FixPoint1616_t sigmaLimit = (FixPoint1616_t)(18*65536);
 8001926:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800192a:	61bb      	str	r3, [r7, #24]
	uint32_t timingBudget = 33000;
 800192c:	f248 03e8 	movw	r3, #33000	; 0x80e8
 8001930:	617b      	str	r3, [r7, #20]
	uint8_t preRangeVcselPeriod = 14;
 8001932:	230e      	movs	r3, #14
 8001934:	74fb      	strb	r3, [r7, #19]
	uint8_t finalRangeVcselPeriod = 10;
 8001936:	230a      	movs	r3, #10
 8001938:	74bb      	strb	r3, [r7, #18]

                          
  if( Dev.Present){
 800193a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800193e:	2b00      	cmp	r3, #0
 8001940:	f000 80ac 	beq.w	8001a9c <SetupSingleShot+0x18c>
    status=VL53L0X_StaticInit(&Dev);
 8001944:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8001948:	f000 fb9e 	bl	8002088 <VL53L0X_StaticInit>
 800194c:	4603      	mov	r3, r0
 800194e:	60fb      	str	r3, [r7, #12]
    if( status ){
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d002      	beq.n	800195c <SetupSingleShot+0x4c>
      printf("VL53L0X_StaticInit failed\n");
 8001956:	4855      	ldr	r0, [pc, #340]	; (8001aac <SetupSingleShot+0x19c>)
 8001958:	f008 fea6 	bl	800a6a8 <puts>
    }
    
    
    status = VL53L0X_PerformRefCalibration(&Dev, &VhvSettings, &PhaseCal);
 800195c:	f107 020a 	add.w	r2, r7, #10
 8001960:	f107 030b 	add.w	r3, r7, #11
 8001964:	4619      	mov	r1, r3
 8001966:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800196a:	f001 fa7d 	bl	8002e68 <VL53L0X_PerformRefCalibration>
 800196e:	4603      	mov	r3, r0
 8001970:	60fb      	str	r3, [r7, #12]
    if( status ){
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d002      	beq.n	800197e <SetupSingleShot+0x6e>
      printf("VL53L0X_PerformRefCalibration failed\n");
 8001978:	484d      	ldr	r0, [pc, #308]	; (8001ab0 <SetupSingleShot+0x1a0>)
 800197a:	f008 fe95 	bl	800a6a8 <puts>
    }
    
    status = VL53L0X_PerformRefSpadManagement(&Dev, &refSpadCount, &isApertureSpads);
 800197e:	1cfa      	adds	r2, r7, #3
 8001980:	1d3b      	adds	r3, r7, #4
 8001982:	4619      	mov	r1, r3
 8001984:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8001988:	f001 fec6 	bl	8003718 <VL53L0X_PerformRefSpadManagement>
 800198c:	4603      	mov	r3, r0
 800198e:	60fb      	str	r3, [r7, #12]
    if( status ){
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d002      	beq.n	800199c <SetupSingleShot+0x8c>
      printf("VL53L0X_PerformRefSpadManagement failed\n");
 8001996:	4847      	ldr	r0, [pc, #284]	; (8001ab4 <SetupSingleShot+0x1a4>)
 8001998:	f008 fe86 	bl	800a6a8 <puts>
    }
    
    status = VL53L0X_SetDeviceMode(&Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING); // Setup in single ranging mode
 800199c:	2100      	movs	r1, #0
 800199e:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80019a2:	f000 fd83 	bl	80024ac <VL53L0X_SetDeviceMode>
 80019a6:	4603      	mov	r3, r0
 80019a8:	60fb      	str	r3, [r7, #12]
    if( status ){
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d002      	beq.n	80019b6 <SetupSingleShot+0xa6>
      printf("VL53L0X_SetDeviceMode failed\n");
 80019b0:	4841      	ldr	r0, [pc, #260]	; (8001ab8 <SetupSingleShot+0x1a8>)
 80019b2:	f008 fe79 	bl	800a6a8 <puts>
    }
    
    status = VL53L0X_SetLimitCheckEnable(&Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, 1); // Enable Sigma limit
 80019b6:	2201      	movs	r2, #1
 80019b8:	2100      	movs	r1, #0
 80019ba:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80019be:	f001 f84d 	bl	8002a5c <VL53L0X_SetLimitCheckEnable>
 80019c2:	4603      	mov	r3, r0
 80019c4:	60fb      	str	r3, [r7, #12]
    if( status ){
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d002      	beq.n	80019d2 <SetupSingleShot+0xc2>
      printf("VL53L0X_SetLimitCheckEnable failed\n");
 80019cc:	483b      	ldr	r0, [pc, #236]	; (8001abc <SetupSingleShot+0x1ac>)
 80019ce:	f008 fe6b 	bl	800a6a8 <puts>
    }
    
    status = VL53L0X_SetLimitCheckEnable(&Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, 1); // Enable Signa limit
 80019d2:	2201      	movs	r2, #1
 80019d4:	2101      	movs	r1, #1
 80019d6:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80019da:	f001 f83f 	bl	8002a5c <VL53L0X_SetLimitCheckEnable>
 80019de:	4603      	mov	r3, r0
 80019e0:	60fb      	str	r3, [r7, #12]
    if( status ){
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d002      	beq.n	80019ee <SetupSingleShot+0xde>
      printf("VL53L0X_SetLimitCheckEnable failed\n");
 80019e8:	4834      	ldr	r0, [pc, #208]	; (8001abc <SetupSingleShot+0x1ac>)
 80019ea:	f008 fe5d 	bl	800a6a8 <puts>
    }
    
    /* Ranging configuration */
    signalLimit = (FixPoint1616_t)(0.1*65536);
 80019ee:	f641 1399 	movw	r3, #6553	; 0x1999
 80019f2:	61fb      	str	r3, [r7, #28]
    sigmaLimit = (FixPoint1616_t)(60*65536);
 80019f4:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 80019f8:	61bb      	str	r3, [r7, #24]
    timingBudget = 33000;
 80019fa:	f248 03e8 	movw	r3, #33000	; 0x80e8
 80019fe:	617b      	str	r3, [r7, #20]
    preRangeVcselPeriod = 18;
 8001a00:	2312      	movs	r3, #18
 8001a02:	74fb      	strb	r3, [r7, #19]
    finalRangeVcselPeriod = 14;
 8001a04:	230e      	movs	r3, #14
 8001a06:	74bb      	strb	r3, [r7, #18]
    
    status = VL53L0X_SetLimitCheckValue(&Dev,  VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, signalLimit);
 8001a08:	69fa      	ldr	r2, [r7, #28]
 8001a0a:	2101      	movs	r1, #1
 8001a0c:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8001a10:	f001 f8d4 	bl	8002bbc <VL53L0X_SetLimitCheckValue>
 8001a14:	4603      	mov	r3, r0
 8001a16:	60fb      	str	r3, [r7, #12]
    
    if( status ){
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d002      	beq.n	8001a24 <SetupSingleShot+0x114>
      printf("VL53L0X_SetLimitCheckValue failed\n");
 8001a1e:	4828      	ldr	r0, [pc, #160]	; (8001ac0 <SetupSingleShot+0x1b0>)
 8001a20:	f008 fe42 	bl	800a6a8 <puts>
    }
    
    status = VL53L0X_SetLimitCheckValue(&Dev,  VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, sigmaLimit);
 8001a24:	69ba      	ldr	r2, [r7, #24]
 8001a26:	2100      	movs	r1, #0
 8001a28:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8001a2c:	f001 f8c6 	bl	8002bbc <VL53L0X_SetLimitCheckValue>
 8001a30:	4603      	mov	r3, r0
 8001a32:	60fb      	str	r3, [r7, #12]
    if( status ){
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d002      	beq.n	8001a40 <SetupSingleShot+0x130>
      printf("VL53L0X_SetLimitCheckValue failed\n");
 8001a3a:	4821      	ldr	r0, [pc, #132]	; (8001ac0 <SetupSingleShot+0x1b0>)
 8001a3c:	f008 fe34 	bl	800a6a8 <puts>
    }
    
    status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(&Dev,  timingBudget);
 8001a40:	6979      	ldr	r1, [r7, #20]
 8001a42:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8001a46:	f000 fdab 	bl	80025a0 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	60fb      	str	r3, [r7, #12]
    if( status ){
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d002      	beq.n	8001a5a <SetupSingleShot+0x14a>
      printf("VL53L0X_SetMeasurementTimingBudgetMicroSeconds failed\n");
 8001a54:	481b      	ldr	r0, [pc, #108]	; (8001ac4 <SetupSingleShot+0x1b4>)
 8001a56:	f008 fe27 	bl	800a6a8 <puts>
    }
    
    status = VL53L0X_SetVcselPulsePeriod(&Dev,  VL53L0X_VCSEL_PERIOD_PRE_RANGE, preRangeVcselPeriod);
 8001a5a:	7cfb      	ldrb	r3, [r7, #19]
 8001a5c:	461a      	mov	r2, r3
 8001a5e:	2100      	movs	r1, #0
 8001a60:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8001a64:	f000 fdc2 	bl	80025ec <VL53L0X_SetVcselPulsePeriod>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	60fb      	str	r3, [r7, #12]
    if( status ){
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d002      	beq.n	8001a78 <SetupSingleShot+0x168>
      printf("VL53L0X_SetVcselPulsePeriod failed\n");
 8001a72:	4815      	ldr	r0, [pc, #84]	; (8001ac8 <SetupSingleShot+0x1b8>)
 8001a74:	f008 fe18 	bl	800a6a8 <puts>
    }
    
    status = VL53L0X_SetVcselPulsePeriod(&Dev,  VL53L0X_VCSEL_PERIOD_FINAL_RANGE, finalRangeVcselPeriod);
 8001a78:	7cbb      	ldrb	r3, [r7, #18]
 8001a7a:	461a      	mov	r2, r3
 8001a7c:	2101      	movs	r1, #1
 8001a7e:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8001a82:	f000 fdb3 	bl	80025ec <VL53L0X_SetVcselPulsePeriod>
 8001a86:	4603      	mov	r3, r0
 8001a88:	60fb      	str	r3, [r7, #12]
    if( status ){
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d002      	beq.n	8001a96 <SetupSingleShot+0x186>
      printf("VL53L0X_SetVcselPulsePeriod failed\n");
 8001a90:	480d      	ldr	r0, [pc, #52]	; (8001ac8 <SetupSingleShot+0x1b8>)
 8001a92:	f008 fe09 	bl	800a6a8 <puts>
    }
    
    Dev.LeakyFirst=1;
 8001a96:	2301      	movs	r3, #1
 8001a98:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
  }
}
 8001a9c:	bf00      	nop
 8001a9e:	3720      	adds	r7, #32
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001aa6:	b004      	add	sp, #16
 8001aa8:	4770      	bx	lr
 8001aaa:	bf00      	nop
 8001aac:	0800b698 	.word	0x0800b698
 8001ab0:	0800b6b4 	.word	0x0800b6b4
 8001ab4:	0800b6dc 	.word	0x0800b6dc
 8001ab8:	0800b704 	.word	0x0800b704
 8001abc:	0800b724 	.word	0x0800b724
 8001ac0:	0800b748 	.word	0x0800b748
 8001ac4:	0800b76c 	.word	0x0800b76c
 8001ac8:	0800b7a4 	.word	0x0800b7a4

08001acc <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b084      	sub	sp, #16
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	6039      	str	r1, [r7, #0]
 8001ad6:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8001ad8:	88fb      	ldrh	r3, [r7, #6]
 8001ada:	b2db      	uxtb	r3, r3
 8001adc:	2120      	movs	r1, #32
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f7ff fdee 	bl	80016c0 <SENSOR_IO_Read>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8001ae8:	7bfb      	ldrb	r3, [r7, #15]
 8001aea:	f023 0304 	bic.w	r3, r3, #4
 8001aee:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 8001af0:	7bfb      	ldrb	r3, [r7, #15]
 8001af2:	f043 0304 	orr.w	r3, r3, #4
 8001af6:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8001af8:	7bfb      	ldrb	r3, [r7, #15]
 8001afa:	f023 0303 	bic.w	r3, r3, #3
 8001afe:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8001b00:	7bfb      	ldrb	r3, [r7, #15]
 8001b02:	f043 0301 	orr.w	r3, r3, #1
 8001b06:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 8001b08:	7bfb      	ldrb	r3, [r7, #15]
 8001b0a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001b0e:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8001b10:	88fb      	ldrh	r3, [r7, #6]
 8001b12:	b2db      	uxtb	r3, r3
 8001b14:	7bfa      	ldrb	r2, [r7, #15]
 8001b16:	2120      	movs	r1, #32
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f7ff fdb7 	bl	800168c <SENSOR_IO_Write>
}
 8001b1e:	bf00      	nop
 8001b20:	3710      	adds	r7, #16
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}

08001b26 <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 8001b26:	b580      	push	{r7, lr}
 8001b28:	b088      	sub	sp, #32
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	80fb      	strh	r3, [r7, #6]
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 8001b30:	88fb      	ldrh	r3, [r7, #6]
 8001b32:	b2d8      	uxtb	r0, r3
 8001b34:	f107 0208 	add.w	r2, r7, #8
 8001b38:	2302      	movs	r3, #2
 8001b3a:	21b2      	movs	r1, #178	; 0xb2
 8001b3c:	f7ff fdde 	bl	80016fc <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 8001b40:	88fb      	ldrh	r3, [r7, #6]
 8001b42:	b2db      	uxtb	r3, r3
 8001b44:	2135      	movs	r1, #53	; 0x35
 8001b46:	4618      	mov	r0, r3
 8001b48:	f7ff fdba 	bl	80016c0 <SENSOR_IO_Read>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	77fb      	strb	r3, [r7, #31]

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 8001b50:	7ffb      	ldrb	r3, [r7, #31]
 8001b52:	021b      	lsls	r3, r3, #8
 8001b54:	b21b      	sxth	r3, r3
 8001b56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b5a:	b21a      	sxth	r2, r3
 8001b5c:	7a3b      	ldrb	r3, [r7, #8]
 8001b5e:	b21b      	sxth	r3, r3
 8001b60:	4313      	orrs	r3, r2
 8001b62:	83bb      	strh	r3, [r7, #28]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 8001b64:	7ffb      	ldrb	r3, [r7, #31]
 8001b66:	019b      	lsls	r3, r3, #6
 8001b68:	b21b      	sxth	r3, r3
 8001b6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b6e:	b21a      	sxth	r2, r3
 8001b70:	7a7b      	ldrb	r3, [r7, #9]
 8001b72:	b21b      	sxth	r3, r3
 8001b74:	4313      	orrs	r3, r2
 8001b76:	837b      	strh	r3, [r7, #26]
  T0_degC = T0_degC_x8_u16 >> 3;
 8001b78:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001b7c:	10db      	asrs	r3, r3, #3
 8001b7e:	833b      	strh	r3, [r7, #24]
  T1_degC = T1_degC_x8_u16 >> 3;
 8001b80:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001b84:	10db      	asrs	r3, r3, #3
 8001b86:	82fb      	strh	r3, [r7, #22]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 8001b88:	88fb      	ldrh	r3, [r7, #6]
 8001b8a:	b2d8      	uxtb	r0, r3
 8001b8c:	f107 0208 	add.w	r2, r7, #8
 8001b90:	2304      	movs	r3, #4
 8001b92:	21bc      	movs	r1, #188	; 0xbc
 8001b94:	f7ff fdb2 	bl	80016fc <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8001b98:	7a7b      	ldrb	r3, [r7, #9]
 8001b9a:	021b      	lsls	r3, r3, #8
 8001b9c:	b21a      	sxth	r2, r3
 8001b9e:	7a3b      	ldrb	r3, [r7, #8]
 8001ba0:	b21b      	sxth	r3, r3
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	82bb      	strh	r3, [r7, #20]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 8001ba6:	7afb      	ldrb	r3, [r7, #11]
 8001ba8:	021b      	lsls	r3, r3, #8
 8001baa:	b21a      	sxth	r2, r3
 8001bac:	7abb      	ldrb	r3, [r7, #10]
 8001bae:	b21b      	sxth	r3, r3
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	827b      	strh	r3, [r7, #18]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 8001bb4:	88fb      	ldrh	r3, [r7, #6]
 8001bb6:	b2d8      	uxtb	r0, r3
 8001bb8:	f107 0208 	add.w	r2, r7, #8
 8001bbc:	2302      	movs	r3, #2
 8001bbe:	21aa      	movs	r1, #170	; 0xaa
 8001bc0:	f7ff fd9c 	bl	80016fc <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8001bc4:	7a7b      	ldrb	r3, [r7, #9]
 8001bc6:	021b      	lsls	r3, r3, #8
 8001bc8:	b21a      	sxth	r2, r3
 8001bca:	7a3b      	ldrb	r3, [r7, #8]
 8001bcc:	b21b      	sxth	r3, r3
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	823b      	strh	r3, [r7, #16]

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 8001bd2:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001bd6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001bda:	1ad3      	subs	r3, r2, r3
 8001bdc:	ee07 3a90 	vmov	s15, r3
 8001be0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001be4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001be8:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	ee07 3a90 	vmov	s15, r3
 8001bf2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bf6:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001bfa:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001bfe:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001c02:	1ad3      	subs	r3, r2, r3
 8001c04:	ee07 3a90 	vmov	s15, r3
 8001c08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c0c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001c10:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001c14:	ee07 3a90 	vmov	s15, r3
 8001c18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c20:	edc7 7a03 	vstr	s15, [r7, #12]

  return tmp_f;
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	ee07 3a90 	vmov	s15, r3
}
 8001c2a:	eeb0 0a67 	vmov.f32	s0, s15
 8001c2e:	3720      	adds	r7, #32
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}

08001c34 <LIS3MDL_MagInit>:
  * @brief  Set LIS3MDL Magnetometer Initialization.
  * @param  LIS3MDL_InitStruct: pointer to a LIS3MDL_MagInitTypeDef structure 
  *         that contains the configuration setting for the LIS3MDL.
  */
void LIS3MDL_MagInit(MAGNETO_InitTypeDef LIS3MDL_InitStruct)
{  
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b082      	sub	sp, #8
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	463b      	mov	r3, r7
 8001c3c:	e883 0003 	stmia.w	r3, {r0, r1}
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG1, LIS3MDL_InitStruct.Register1);
 8001c40:	783b      	ldrb	r3, [r7, #0]
 8001c42:	461a      	mov	r2, r3
 8001c44:	2120      	movs	r1, #32
 8001c46:	203c      	movs	r0, #60	; 0x3c
 8001c48:	f7ff fd20 	bl	800168c <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2, LIS3MDL_InitStruct.Register2);
 8001c4c:	787b      	ldrb	r3, [r7, #1]
 8001c4e:	461a      	mov	r2, r3
 8001c50:	2121      	movs	r1, #33	; 0x21
 8001c52:	203c      	movs	r0, #60	; 0x3c
 8001c54:	f7ff fd1a 	bl	800168c <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, LIS3MDL_InitStruct.Register3);
 8001c58:	78bb      	ldrb	r3, [r7, #2]
 8001c5a:	461a      	mov	r2, r3
 8001c5c:	2122      	movs	r1, #34	; 0x22
 8001c5e:	203c      	movs	r0, #60	; 0x3c
 8001c60:	f7ff fd14 	bl	800168c <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG4, LIS3MDL_InitStruct.Register4);
 8001c64:	78fb      	ldrb	r3, [r7, #3]
 8001c66:	461a      	mov	r2, r3
 8001c68:	2123      	movs	r1, #35	; 0x23
 8001c6a:	203c      	movs	r0, #60	; 0x3c
 8001c6c:	f7ff fd0e 	bl	800168c <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG5, LIS3MDL_InitStruct.Register5);
 8001c70:	793b      	ldrb	r3, [r7, #4]
 8001c72:	461a      	mov	r2, r3
 8001c74:	2124      	movs	r1, #36	; 0x24
 8001c76:	203c      	movs	r0, #60	; 0x3c
 8001c78:	f7ff fd08 	bl	800168c <SENSOR_IO_Write>
}
 8001c7c:	bf00      	nop
 8001c7e:	3708      	adds	r7, #8
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}

08001c84 <LIS3MDL_MagDeInit>:

/**
  * @brief  LIS3MDL Magnetometer De-initialization.
  */
void LIS3MDL_MagDeInit(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 8001c8e:	2122      	movs	r1, #34	; 0x22
 8001c90:	203c      	movs	r0, #60	; 0x3c
 8001c92:	f7ff fd15 	bl	80016c0 <SENSOR_IO_Read>
 8001c96:	4603      	mov	r3, r0
 8001c98:	71fb      	strb	r3, [r7, #7]

  /* Clear Selection Mode bits */
  ctrl &= ~(LIS3MDL_MAG_SELECTION_MODE);
 8001c9a:	79fb      	ldrb	r3, [r7, #7]
 8001c9c:	f023 0303 	bic.w	r3, r3, #3
 8001ca0:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LIS3MDL_MAG_POWERDOWN2_MODE;
 8001ca2:	79fb      	ldrb	r3, [r7, #7]
 8001ca4:	f043 0303 	orr.w	r3, r3, #3
 8001ca8:	71fb      	strb	r3, [r7, #7]
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 8001caa:	79fb      	ldrb	r3, [r7, #7]
 8001cac:	461a      	mov	r2, r3
 8001cae:	2122      	movs	r1, #34	; 0x22
 8001cb0:	203c      	movs	r0, #60	; 0x3c
 8001cb2:	f7ff fceb 	bl	800168c <SENSOR_IO_Write>
}
 8001cb6:	bf00      	nop
 8001cb8:	3708      	adds	r7, #8
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}

08001cbe <LIS3MDL_MagReadID>:
/**
  * @brief  Read LIS3MDL ID.
  * @retval ID 
  */
uint8_t LIS3MDL_MagReadID(void)
{
 8001cbe:	b580      	push	{r7, lr}
 8001cc0:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();  
 8001cc2:	f7ff fcd9 	bl	8001678 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_WHO_AM_I_REG));
 8001cc6:	210f      	movs	r1, #15
 8001cc8:	203c      	movs	r0, #60	; 0x3c
 8001cca:	f7ff fcf9 	bl	80016c0 <SENSOR_IO_Read>
 8001cce:	4603      	mov	r3, r0
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	bd80      	pop	{r7, pc}

08001cd4 <LIS3MDL_MagLowPower>:
/**
  * @brief  Set/Unset Magnetometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LIS3MDL_MagLowPower(uint16_t status)
{  
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b084      	sub	sp, #16
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	4603      	mov	r3, r0
 8001cdc:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	73fb      	strb	r3, [r7, #15]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 8001ce2:	2122      	movs	r1, #34	; 0x22
 8001ce4:	203c      	movs	r0, #60	; 0x3c
 8001ce6:	f7ff fceb 	bl	80016c0 <SENSOR_IO_Read>
 8001cea:	4603      	mov	r3, r0
 8001cec:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x20);
 8001cee:	7bfb      	ldrb	r3, [r7, #15]
 8001cf0:	f023 0320 	bic.w	r3, r3, #32
 8001cf4:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8001cf6:	88fb      	ldrh	r3, [r7, #6]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d003      	beq.n	8001d04 <LIS3MDL_MagLowPower+0x30>
  {
    ctrl |= LIS3MDL_MAG_CONFIG_LOWPOWER_MODE;
 8001cfc:	7bfb      	ldrb	r3, [r7, #15]
 8001cfe:	f043 0320 	orr.w	r3, r3, #32
 8001d02:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LIS3MDL_MAG_CONFIG_NORMAL_MODE;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 8001d04:	7bfb      	ldrb	r3, [r7, #15]
 8001d06:	461a      	mov	r2, r3
 8001d08:	2122      	movs	r1, #34	; 0x22
 8001d0a:	203c      	movs	r0, #60	; 0x3c
 8001d0c:	f7ff fcbe 	bl	800168c <SENSOR_IO_Write>
}
 8001d10:	bf00      	nop
 8001d12:	3710      	adds	r7, #16
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}

08001d18 <LIS3MDL_MagReadXYZ>:
/**
  * @brief  Read X, Y & Z Magnetometer values 
  * @param  pData: Data out pointer
  */
void LIS3MDL_MagReadXYZ(int16_t* pData)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b088      	sub	sp, #32
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlm= 0;
 8001d20:	2300      	movs	r3, #0
 8001d22:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8001d24:	2300      	movs	r3, #0
 8001d26:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8001d28:	f04f 0300 	mov.w	r3, #0
 8001d2c:	61bb      	str	r3, [r7, #24]
  
  /* Read the magnetometer control register content */
  ctrlm = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2);
 8001d2e:	2121      	movs	r1, #33	; 0x21
 8001d30:	203c      	movs	r0, #60	; 0x3c
 8001d32:	f7ff fcc5 	bl	80016c0 <SENSOR_IO_Read>
 8001d36:	4603      	mov	r3, r0
 8001d38:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LIS3MDL_MAG_I2C_ADDRESS_HIGH, (LIS3MDL_MAG_OUTX_L | 0x80), buffer, 6);
 8001d3a:	f107 0208 	add.w	r2, r7, #8
 8001d3e:	2306      	movs	r3, #6
 8001d40:	21a8      	movs	r1, #168	; 0xa8
 8001d42:	203c      	movs	r0, #60	; 0x3c
 8001d44:	f7ff fcda 	bl	80016fc <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8001d48:	2300      	movs	r3, #0
 8001d4a:	77fb      	strb	r3, [r7, #31]
 8001d4c:	e01f      	b.n	8001d8e <LIS3MDL_MagReadXYZ+0x76>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8001d4e:	7ffb      	ldrb	r3, [r7, #31]
 8001d50:	005b      	lsls	r3, r3, #1
 8001d52:	3301      	adds	r3, #1
 8001d54:	f107 0220 	add.w	r2, r7, #32
 8001d58:	4413      	add	r3, r2
 8001d5a:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001d5e:	b29b      	uxth	r3, r3
 8001d60:	021b      	lsls	r3, r3, #8
 8001d62:	b29a      	uxth	r2, r3
 8001d64:	7ffb      	ldrb	r3, [r7, #31]
 8001d66:	005b      	lsls	r3, r3, #1
 8001d68:	f107 0120 	add.w	r1, r7, #32
 8001d6c:	440b      	add	r3, r1
 8001d6e:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001d72:	b29b      	uxth	r3, r3
 8001d74:	4413      	add	r3, r2
 8001d76:	b29a      	uxth	r2, r3
 8001d78:	7ffb      	ldrb	r3, [r7, #31]
 8001d7a:	b212      	sxth	r2, r2
 8001d7c:	005b      	lsls	r3, r3, #1
 8001d7e:	f107 0120 	add.w	r1, r7, #32
 8001d82:	440b      	add	r3, r1
 8001d84:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8001d88:	7ffb      	ldrb	r3, [r7, #31]
 8001d8a:	3301      	adds	r3, #1
 8001d8c:	77fb      	strb	r3, [r7, #31]
 8001d8e:	7ffb      	ldrb	r3, [r7, #31]
 8001d90:	2b02      	cmp	r3, #2
 8001d92:	d9dc      	bls.n	8001d4e <LIS3MDL_MagReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL_REG2 */
  switch(ctrlm & 0x60)
 8001d94:	7dfb      	ldrb	r3, [r7, #23]
 8001d96:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8001d9a:	2b20      	cmp	r3, #32
 8001d9c:	d00c      	beq.n	8001db8 <LIS3MDL_MagReadXYZ+0xa0>
 8001d9e:	2b20      	cmp	r3, #32
 8001da0:	dc02      	bgt.n	8001da8 <LIS3MDL_MagReadXYZ+0x90>
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d005      	beq.n	8001db2 <LIS3MDL_MagReadXYZ+0x9a>
 8001da6:	e010      	b.n	8001dca <LIS3MDL_MagReadXYZ+0xb2>
 8001da8:	2b40      	cmp	r3, #64	; 0x40
 8001daa:	d008      	beq.n	8001dbe <LIS3MDL_MagReadXYZ+0xa6>
 8001dac:	2b60      	cmp	r3, #96	; 0x60
 8001dae:	d009      	beq.n	8001dc4 <LIS3MDL_MagReadXYZ+0xac>
 8001db0:	e00b      	b.n	8001dca <LIS3MDL_MagReadXYZ+0xb2>
  {
  case LIS3MDL_MAG_FS_4_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_4GA;
 8001db2:	4b19      	ldr	r3, [pc, #100]	; (8001e18 <LIS3MDL_MagReadXYZ+0x100>)
 8001db4:	61bb      	str	r3, [r7, #24]
    break;
 8001db6:	e008      	b.n	8001dca <LIS3MDL_MagReadXYZ+0xb2>
  case LIS3MDL_MAG_FS_8_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_8GA;
 8001db8:	4b18      	ldr	r3, [pc, #96]	; (8001e1c <LIS3MDL_MagReadXYZ+0x104>)
 8001dba:	61bb      	str	r3, [r7, #24]
    break;
 8001dbc:	e005      	b.n	8001dca <LIS3MDL_MagReadXYZ+0xb2>
  case LIS3MDL_MAG_FS_12_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_12GA;
 8001dbe:	4b18      	ldr	r3, [pc, #96]	; (8001e20 <LIS3MDL_MagReadXYZ+0x108>)
 8001dc0:	61bb      	str	r3, [r7, #24]
    break;
 8001dc2:	e002      	b.n	8001dca <LIS3MDL_MagReadXYZ+0xb2>
  case LIS3MDL_MAG_FS_16_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_16GA;
 8001dc4:	4b17      	ldr	r3, [pc, #92]	; (8001e24 <LIS3MDL_MagReadXYZ+0x10c>)
 8001dc6:	61bb      	str	r3, [r7, #24]
    break;    
 8001dc8:	bf00      	nop
  }
  
  /* Obtain the mGauss value for the three axis */
  for(i=0; i<3; i++)
 8001dca:	2300      	movs	r3, #0
 8001dcc:	77fb      	strb	r3, [r7, #31]
 8001dce:	e01b      	b.n	8001e08 <LIS3MDL_MagReadXYZ+0xf0>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 8001dd0:	7ffb      	ldrb	r3, [r7, #31]
 8001dd2:	005b      	lsls	r3, r3, #1
 8001dd4:	f107 0220 	add.w	r2, r7, #32
 8001dd8:	4413      	add	r3, r2
 8001dda:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8001dde:	ee07 3a90 	vmov	s15, r3
 8001de2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001de6:	edd7 7a06 	vldr	s15, [r7, #24]
 8001dea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dee:	7ffb      	ldrb	r3, [r7, #31]
 8001df0:	005b      	lsls	r3, r3, #1
 8001df2:	687a      	ldr	r2, [r7, #4]
 8001df4:	4413      	add	r3, r2
 8001df6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001dfa:	ee17 2a90 	vmov	r2, s15
 8001dfe:	b212      	sxth	r2, r2
 8001e00:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8001e02:	7ffb      	ldrb	r3, [r7, #31]
 8001e04:	3301      	adds	r3, #1
 8001e06:	77fb      	strb	r3, [r7, #31]
 8001e08:	7ffb      	ldrb	r3, [r7, #31]
 8001e0a:	2b02      	cmp	r3, #2
 8001e0c:	d9e0      	bls.n	8001dd0 <LIS3MDL_MagReadXYZ+0xb8>
  }
}
 8001e0e:	bf00      	nop
 8001e10:	3720      	adds	r7, #32
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	3e0f5c29 	.word	0x3e0f5c29
 8001e1c:	3e947ae1 	.word	0x3e947ae1
 8001e20:	3edc28f6 	.word	0x3edc28f6
 8001e24:	3f147ae1 	.word	0x3f147ae1

08001e28 <VL53L0X_GetDeviceInfo>:

}

VL53L0X_Error VL53L0X_GetDeviceInfo(VL53L0X_DEV Dev,
	VL53L0X_DeviceInfo_t *pVL53L0X_DeviceInfo)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b084      	sub	sp, #16
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
 8001e30:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001e32:	2300      	movs	r3, #0
 8001e34:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_device_info(Dev, pVL53L0X_DeviceInfo);
 8001e36:	6839      	ldr	r1, [r7, #0]
 8001e38:	6878      	ldr	r0, [r7, #4]
 8001e3a:	f004 fdfb 	bl	8006a34 <VL53L0X_get_device_info>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8001e42:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	3710      	adds	r7, #16
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}

08001e4e <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 8001e4e:	b580      	push	{r7, lr}
 8001e50:	b084      	sub	sp, #16
 8001e52:	af00      	add	r7, sp, #0
 8001e54:	6078      	str	r0, [r7, #4]
 8001e56:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 8001e5c:	6839      	ldr	r1, [r7, #0]
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	f001 fc6f 	bl	8003742 <VL53L0X_get_offset_calibration_data_micro_meter>
 8001e64:	4603      	mov	r3, r0
 8001e66:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 8001e68:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	3710      	adds	r7, #16
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}

08001e74 <VL53L0X_DataInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 8001e74:	b5b0      	push	{r4, r5, r7, lr}
 8001e76:	b094      	sub	sp, #80	; 0x50
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 8001e82:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d107      	bne.n	8001e9a <VL53L0X_DataInit+0x26>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	2188      	movs	r1, #136	; 0x88
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f004 ff90 	bl	8006db4 <VL53L0X_WrByte>
 8001e94:	4603      	mov	r3, r0
 8001e96:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001ea8:	f8a3 214e 	strh.w	r2, [r3, #334]	; 0x14e

	/* Dmax default Parameter */
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001eb2:	f8a3 2150 	strh.w	r2, [r3, #336]	; 0x150
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	4a71      	ldr	r2, [pc, #452]	; (8002080 <VL53L0X_DataInit+0x20c>)
 8001eba:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
		(FixPoint1616_t)((0x00016B85))); /* 1.42 No Cover Glass*/

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	4a70      	ldr	r2, [pc, #448]	; (8002084 <VL53L0X_DataInit+0x210>)
 8001ec2:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	621a      	str	r2, [r3, #32]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8001ecc:	f107 0308 	add.w	r3, r7, #8
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	6878      	ldr	r0, [r7, #4]
 8001ed4:	f000 fa5a 	bl	800238c <VL53L0X_GetDeviceParameters>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	if (Status == VL53L0X_ERROR_NONE) {
 8001ede:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d112      	bne.n	8001f0c <VL53L0X_DataInit+0x98>
		/* initialize PAL values */
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	723b      	strb	r3, [r7, #8]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 8001eea:	2300      	movs	r3, #0
 8001eec:	727b      	strb	r3, [r7, #9]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	f103 0410 	add.w	r4, r3, #16
 8001ef4:	f107 0508 	add.w	r5, r7, #8
 8001ef8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001efa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001efc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001efe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f04:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001f08:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2264      	movs	r2, #100	; 0x64
 8001f10:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	f44f 7261 	mov.w	r2, #900	; 0x384
 8001f1a:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001f24:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8001f2e:	f8a3 213a 	strh.w	r2, [r3, #314]	; 0x13a

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2201      	movs	r2, #1
 8001f36:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	64bb      	str	r3, [r7, #72]	; 0x48
 8001f3e:	e014      	b.n	8001f6a <VL53L0X_DataInit+0xf6>
		if (Status == VL53L0X_ERROR_NONE)
 8001f40:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d114      	bne.n	8001f72 <VL53L0X_DataInit+0xfe>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 8001f48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f4a:	b29b      	uxth	r3, r3
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	4619      	mov	r1, r3
 8001f50:	6878      	ldr	r0, [r7, #4]
 8001f52:	f000 fd83 	bl	8002a5c <VL53L0X_SetLimitCheckEnable>
 8001f56:	4603      	mov	r3, r0
 8001f58:	461a      	mov	r2, r3
 8001f5a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8001f64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f66:	3301      	adds	r3, #1
 8001f68:	64bb      	str	r3, [r7, #72]	; 0x48
 8001f6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f6c:	2b05      	cmp	r3, #5
 8001f6e:	dde7      	ble.n	8001f40 <VL53L0X_DataInit+0xcc>
 8001f70:	e000      	b.n	8001f74 <VL53L0X_DataInit+0x100>
		else
			break;
 8001f72:	bf00      	nop

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 8001f74:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d107      	bne.n	8001f8c <VL53L0X_DataInit+0x118>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	2102      	movs	r1, #2
 8001f80:	6878      	ldr	r0, [r7, #4]
 8001f82:	f000 fd6b 	bl	8002a5c <VL53L0X_SetLimitCheckEnable>
 8001f86:	4603      	mov	r3, r0
 8001f88:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8001f8c:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d107      	bne.n	8001fa4 <VL53L0X_DataInit+0x130>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8001f94:	2200      	movs	r2, #0
 8001f96:	2103      	movs	r1, #3
 8001f98:	6878      	ldr	r0, [r7, #4]
 8001f9a:	f000 fd5f 	bl	8002a5c <VL53L0X_SetLimitCheckEnable>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8001fa4:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d107      	bne.n	8001fbc <VL53L0X_DataInit+0x148>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8001fac:	2200      	movs	r2, #0
 8001fae:	2104      	movs	r1, #4
 8001fb0:	6878      	ldr	r0, [r7, #4]
 8001fb2:	f000 fd53 	bl	8002a5c <VL53L0X_SetLimitCheckEnable>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8001fbc:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d107      	bne.n	8001fd4 <VL53L0X_DataInit+0x160>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	2105      	movs	r1, #5
 8001fc8:	6878      	ldr	r0, [r7, #4]
 8001fca:	f000 fd47 	bl	8002a5c <VL53L0X_SetLimitCheckEnable>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 8001fd4:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d108      	bne.n	8001fee <VL53L0X_DataInit+0x17a>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8001fdc:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 8001fe0:	2100      	movs	r1, #0
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f000 fdea 	bl	8002bbc <VL53L0X_SetLimitCheckValue>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8001fee:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d108      	bne.n	8002008 <VL53L0X_DataInit+0x194>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8001ff6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001ffa:	2101      	movs	r1, #1
 8001ffc:	6878      	ldr	r0, [r7, #4]
 8001ffe:	f000 fddd 	bl	8002bbc <VL53L0X_SetLimitCheckValue>
 8002002:	4603      	mov	r3, r0
 8002004:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8002008:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800200c:	2b00      	cmp	r3, #0
 800200e:	d108      	bne.n	8002022 <VL53L0X_DataInit+0x1ae>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8002010:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 8002014:	2102      	movs	r1, #2
 8002016:	6878      	ldr	r0, [r7, #4]
 8002018:	f000 fdd0 	bl	8002bbc <VL53L0X_SetLimitCheckValue>
 800201c:	4603      	mov	r3, r0
 800201e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8002022:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8002026:	2b00      	cmp	r3, #0
 8002028:	d107      	bne.n	800203a <VL53L0X_DataInit+0x1c6>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800202a:	2200      	movs	r2, #0
 800202c:	2103      	movs	r1, #3
 800202e:	6878      	ldr	r0, [r7, #4]
 8002030:	f000 fdc4 	bl	8002bbc <VL53L0X_SetLimitCheckValue>
 8002034:	4603      	mov	r3, r0
 8002036:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800203a:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800203e:	2b00      	cmp	r3, #0
 8002040:	d10f      	bne.n	8002062 <VL53L0X_DataInit+0x1ee>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	22ff      	movs	r2, #255	; 0xff
 8002046:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800204a:	22ff      	movs	r2, #255	; 0xff
 800204c:	2101      	movs	r1, #1
 800204e:	6878      	ldr	r0, [r7, #4]
 8002050:	f004 feb0 	bl	8006db4 <VL53L0X_WrByte>
 8002054:	4603      	mov	r3, r0
 8002056:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2201      	movs	r2, #1
 800205e:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
	}

	if (Status == VL53L0X_ERROR_NONE)
 8002062:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8002066:	2b00      	cmp	r3, #0
 8002068:	d103      	bne.n	8002072 <VL53L0X_DataInit+0x1fe>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2200      	movs	r2, #0
 800206e:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115


	LOG_FUNCTION_END(Status);
	return Status;
 8002072:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 8002076:	4618      	mov	r0, r3
 8002078:	3750      	adds	r7, #80	; 0x50
 800207a:	46bd      	mov	sp, r7
 800207c:	bdb0      	pop	{r4, r5, r7, pc}
 800207e:	bf00      	nop
 8002080:	00016b85 	.word	0x00016b85
 8002084:	000970a4 	.word	0x000970a4

08002088 <VL53L0X_StaticInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
 8002088:	b5b0      	push	{r4, r5, r7, lr}
 800208a:	b09e      	sub	sp, #120	; 0x78
 800208c:	af02      	add	r7, sp, #8
 800208e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002090:	2300      	movs	r3, #0
 8002092:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 8002096:	f107 031c 	add.w	r3, r7, #28
 800209a:	2240      	movs	r2, #64	; 0x40
 800209c:	2100      	movs	r1, #0
 800209e:	4618      	mov	r0, r3
 80020a0:	f008 fa9d 	bl	800a5de <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 80020a4:	2300      	movs	r3, #0
 80020a6:	837b      	strh	r3, [r7, #26]
	uint8_t tempbyte = 0;
 80020a8:	2300      	movs	r3, #0
 80020aa:	767b      	strb	r3, [r7, #25]
	uint8_t UseInternalTuningSettings = 0;
 80020ac:	2300      	movs	r3, #0
 80020ae:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint32_t count = 0;
 80020b2:	2300      	movs	r3, #0
 80020b4:	663b      	str	r3, [r7, #96]	; 0x60
	uint8_t isApertureSpads = 0;
 80020b6:	2300      	movs	r3, #0
 80020b8:	763b      	strb	r3, [r7, #24]
	uint32_t refSpadCount = 0;
 80020ba:	2300      	movs	r3, #0
 80020bc:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 80020be:	2300      	movs	r3, #0
 80020c0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t vcselPulsePeriodPCLK;
	FixPoint1616_t seqTimeoutMilliSecs;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 1);
 80020c4:	2101      	movs	r1, #1
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	f002 fa8e 	bl	80045e8 <VL53L0X_get_info_from_device>
 80020cc:	4603      	mov	r3, r0
 80020ce:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 80020d8:	663b      	str	r3, [r7, #96]	; 0x60
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 80020e0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
 80020e4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	d80d      	bhi.n	8002108 <VL53L0X_StaticInit+0x80>
 80020ec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80020f0:	2b01      	cmp	r3, #1
 80020f2:	d102      	bne.n	80020fa <VL53L0X_StaticInit+0x72>
		((ApertureSpads == 1) && (count > 32)) ||
 80020f4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80020f6:	2b20      	cmp	r3, #32
 80020f8:	d806      	bhi.n	8002108 <VL53L0X_StaticInit+0x80>
 80020fa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d10e      	bne.n	8002120 <VL53L0X_StaticInit+0x98>
		((ApertureSpads == 0) && (count > 12)))
 8002102:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002104:	2b0c      	cmp	r3, #12
 8002106:	d90b      	bls.n	8002120 <VL53L0X_StaticInit+0x98>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 8002108:	f107 0218 	add.w	r2, r7, #24
 800210c:	f107 0314 	add.w	r3, r7, #20
 8002110:	4619      	mov	r1, r3
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f001 fd10 	bl	8003b38 <VL53L0X_perform_ref_spad_management>
 8002118:	4603      	mov	r3, r0
 800211a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800211e:	e009      	b.n	8002134 <VL53L0X_StaticInit+0xac>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 8002120:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002124:	461a      	mov	r2, r3
 8002126:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8002128:	6878      	ldr	r0, [r7, #4]
 800212a:	f001 ff11 	bl	8003f50 <VL53L0X_set_reference_spads>
 800212e:	4603      	mov	r3, r0
 8002130:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 8002134:	4b94      	ldr	r3, [pc, #592]	; (8002388 <VL53L0X_StaticInit+0x300>)
 8002136:	66bb      	str	r3, [r7, #104]	; 0x68

	if (Status == VL53L0X_ERROR_NONE) {
 8002138:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800213c:	2b00      	cmp	r3, #0
 800213e:	d10f      	bne.n	8002160 <VL53L0X_StaticInit+0xd8>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
 8002146:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 800214a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800214e:	2b00      	cmp	r3, #0
 8002150:	d104      	bne.n	800215c <VL53L0X_StaticInit+0xd4>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8002158:	66bb      	str	r3, [r7, #104]	; 0x68
 800215a:	e001      	b.n	8002160 <VL53L0X_StaticInit+0xd8>
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 800215c:	4b8a      	ldr	r3, [pc, #552]	; (8002388 <VL53L0X_StaticInit+0x300>)
 800215e:	66bb      	str	r3, [r7, #104]	; 0x68

	}

	if (Status == VL53L0X_ERROR_NONE)
 8002160:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8002164:	2b00      	cmp	r3, #0
 8002166:	d106      	bne.n	8002176 <VL53L0X_StaticInit+0xee>
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 8002168:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800216a:	6878      	ldr	r0, [r7, #4]
 800216c:	f003 fde4 	bl	8005d38 <VL53L0X_load_tuning_settings>
 8002170:	4603      	mov	r3, r0
 8002172:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 8002176:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800217a:	2b00      	cmp	r3, #0
 800217c:	d10a      	bne.n	8002194 <VL53L0X_StaticInit+0x10c>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 800217e:	2300      	movs	r3, #0
 8002180:	9300      	str	r3, [sp, #0]
 8002182:	2304      	movs	r3, #4
 8002184:	2200      	movs	r2, #0
 8002186:	2100      	movs	r1, #0
 8002188:	6878      	ldr	r0, [r7, #4]
 800218a:	f001 f909 	bl	80033a0 <VL53L0X_SetGpioConfig>
 800218e:	4603      	mov	r3, r0
 8002190:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8002194:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8002198:	2b00      	cmp	r3, #0
 800219a:	d121      	bne.n	80021e0 <VL53L0X_StaticInit+0x158>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800219c:	2201      	movs	r2, #1
 800219e:	21ff      	movs	r1, #255	; 0xff
 80021a0:	6878      	ldr	r0, [r7, #4]
 80021a2:	f004 fe07 	bl	8006db4 <VL53L0X_WrByte>
 80021a6:	4603      	mov	r3, r0
 80021a8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 80021ac:	f107 031a 	add.w	r3, r7, #26
 80021b0:	461a      	mov	r2, r3
 80021b2:	2184      	movs	r1, #132	; 0x84
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	f004 fd89 	bl	8006ccc <VL53L0X_RdWord>
 80021ba:	4603      	mov	r3, r0
 80021bc:	461a      	mov	r2, r3
 80021be:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80021c2:	4313      	orrs	r3, r2
 80021c4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80021c8:	2200      	movs	r2, #0
 80021ca:	21ff      	movs	r1, #255	; 0xff
 80021cc:	6878      	ldr	r0, [r7, #4]
 80021ce:	f004 fdf1 	bl	8006db4 <VL53L0X_WrByte>
 80021d2:	4603      	mov	r3, r0
 80021d4:	461a      	mov	r2, r3
 80021d6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80021da:	4313      	orrs	r3, r2
 80021dc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80021e0:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d105      	bne.n	80021f4 <VL53L0X_StaticInit+0x16c>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 80021e8:	8b7b      	ldrh	r3, [r7, #26]
 80021ea:	011b      	lsls	r3, r3, #4
 80021ec:	461a      	mov	r2, r3
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
			VL53L0X_FIXPOINT412TOFIXPOINT1616(tempword));
	}

	/* After static init, some device parameters may be changed,
	 * so update them */
	if (Status == VL53L0X_ERROR_NONE)
 80021f4:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d108      	bne.n	800220e <VL53L0X_StaticInit+0x186>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 80021fc:	f107 031c 	add.w	r3, r7, #28
 8002200:	4619      	mov	r1, r3
 8002202:	6878      	ldr	r0, [r7, #4]
 8002204:	f000 f8c2 	bl	800238c <VL53L0X_GetDeviceParameters>
 8002208:	4603      	mov	r3, r0
 800220a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	if (Status == VL53L0X_ERROR_NONE) {
 800220e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8002212:	2b00      	cmp	r3, #0
 8002214:	d110      	bne.n	8002238 <VL53L0X_StaticInit+0x1b0>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 8002216:	f107 0319 	add.w	r3, r7, #25
 800221a:	4619      	mov	r1, r3
 800221c:	6878      	ldr	r0, [r7, #4]
 800221e:	f000 f9a0 	bl	8002562 <VL53L0X_GetFractionEnable>
 8002222:	4603      	mov	r3, r0
 8002224:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (Status == VL53L0X_ERROR_NONE)
 8002228:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800222c:	2b00      	cmp	r3, #0
 800222e:	d103      	bne.n	8002238 <VL53L0X_StaticInit+0x1b0>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 8002230:	7e7a      	ldrb	r2, [r7, #25]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

	}

	if (Status == VL53L0X_ERROR_NONE)
 8002238:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800223c:	2b00      	cmp	r3, #0
 800223e:	d10e      	bne.n	800225e <VL53L0X_StaticInit+0x1d6>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	f103 0410 	add.w	r4, r3, #16
 8002246:	f107 051c 	add.w	r5, r7, #28
 800224a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800224c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800224e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002250:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002252:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002254:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002256:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800225a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 800225e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8002262:	2b00      	cmp	r3, #0
 8002264:	d111      	bne.n	800228a <VL53L0X_StaticInit+0x202>
		Status = VL53L0X_RdByte(Dev,
 8002266:	f107 0319 	add.w	r3, r7, #25
 800226a:	461a      	mov	r2, r3
 800226c:	2101      	movs	r1, #1
 800226e:	6878      	ldr	r0, [r7, #4]
 8002270:	f004 fca5 	bl	8006bbe <VL53L0X_RdByte>
 8002274:	4603      	mov	r3, r0
 8002276:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 800227a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800227e:	2b00      	cmp	r3, #0
 8002280:	d103      	bne.n	800228a <VL53L0X_StaticInit+0x202>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 8002282:	7e7a      	ldrb	r2, [r7, #25]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 800228a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800228e:	2b00      	cmp	r3, #0
 8002290:	d107      	bne.n	80022a2 <VL53L0X_StaticInit+0x21a>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8002292:	2200      	movs	r2, #0
 8002294:	2100      	movs	r1, #0
 8002296:	6878      	ldr	r0, [r7, #4]
 8002298:	f000 f9d8 	bl	800264c <VL53L0X_SetSequenceStepEnable>
 800229c:	4603      	mov	r3, r0
 800229e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
 80022a2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d107      	bne.n	80022ba <VL53L0X_StaticInit+0x232>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 80022aa:	2200      	movs	r2, #0
 80022ac:	2102      	movs	r1, #2
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	f000 f9cc 	bl	800264c <VL53L0X_SetSequenceStepEnable>
 80022b4:	4603      	mov	r3, r0
 80022b6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 80022ba:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d103      	bne.n	80022ca <VL53L0X_StaticInit+0x242>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2203      	movs	r2, #3
 80022c6:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 80022ca:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d109      	bne.n	80022e6 <VL53L0X_StaticInit+0x25e>
		Status = VL53L0X_GetVcselPulsePeriod(
 80022d2:	f107 0313 	add.w	r3, r7, #19
 80022d6:	461a      	mov	r2, r3
 80022d8:	2100      	movs	r1, #0
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	f000 f99e 	bl	800261c <VL53L0X_GetVcselPulsePeriod>
 80022e0:	4603      	mov	r3, r0
 80022e2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_PRE_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80022e6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d103      	bne.n	80022f6 <VL53L0X_StaticInit+0x26e>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 80022ee:	7cfa      	ldrb	r2, [r7, #19]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				PreRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 80022f6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d109      	bne.n	8002312 <VL53L0X_StaticInit+0x28a>
		Status = VL53L0X_GetVcselPulsePeriod(
 80022fe:	f107 0313 	add.w	r3, r7, #19
 8002302:	461a      	mov	r2, r3
 8002304:	2101      	movs	r1, #1
 8002306:	6878      	ldr	r0, [r7, #4]
 8002308:	f000 f988 	bl	800261c <VL53L0X_GetVcselPulsePeriod>
 800230c:	4603      	mov	r3, r0
 800230e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8002312:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8002316:	2b00      	cmp	r3, #0
 8002318:	d103      	bne.n	8002322 <VL53L0X_StaticInit+0x29a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800231a:	7cfa      	ldrb	r2, [r7, #19]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				FinalRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 8002322:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8002326:	2b00      	cmp	r3, #0
 8002328:	d109      	bne.n	800233e <VL53L0X_StaticInit+0x2b6>
		Status = VL53L0X_GetSequenceStepTimeout(
 800232a:	f107 030c 	add.w	r3, r7, #12
 800232e:	461a      	mov	r2, r3
 8002330:	2103      	movs	r1, #3
 8002332:	6878      	ldr	r0, [r7, #4]
 8002334:	f000 fad6 	bl	80028e4 <VL53L0X_GetSequenceStepTimeout>
 8002338:	4603      	mov	r3, r0
 800233a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_PRE_RANGE,
			&seqTimeoutMilliSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800233e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8002342:	2b00      	cmp	r3, #0
 8002344:	d103      	bne.n	800234e <VL53L0X_StaticInit+0x2c6>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8002346:	68fa      	ldr	r2, [r7, #12]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
			PreRangeTimeoutMicroSecs,
			seqTimeoutMilliSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 800234e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8002352:	2b00      	cmp	r3, #0
 8002354:	d109      	bne.n	800236a <VL53L0X_StaticInit+0x2e2>
		Status = VL53L0X_GetSequenceStepTimeout(
 8002356:	f107 030c 	add.w	r3, r7, #12
 800235a:	461a      	mov	r2, r3
 800235c:	2104      	movs	r1, #4
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	f000 fac0 	bl	80028e4 <VL53L0X_GetSequenceStepTimeout>
 8002364:	4603      	mov	r3, r0
 8002366:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			&seqTimeoutMilliSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800236a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800236e:	2b00      	cmp	r3, #0
 8002370:	d103      	bne.n	800237a <VL53L0X_StaticInit+0x2f2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8002372:	68fa      	ldr	r2, [r7, #12]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
			FinalRangeTimeoutMicroSecs,
			seqTimeoutMilliSecs);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800237a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 800237e:	4618      	mov	r0, r3
 8002380:	3770      	adds	r7, #112	; 0x70
 8002382:	46bd      	mov	sp, r7
 8002384:	bdb0      	pop	{r4, r5, r7, pc}
 8002386:	bf00      	nop
 8002388:	200001d0 	.word	0x200001d0

0800238c <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b084      	sub	sp, #16
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
 8002394:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002396:	2300      	movs	r3, #0
 8002398:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	4619      	mov	r1, r3
 800239e:	6878      	ldr	r0, [r7, #4]
 80023a0:	f000 f8cc 	bl	800253c <VL53L0X_GetDeviceMode>
 80023a4:	4603      	mov	r3, r0
 80023a6:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80023a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d107      	bne.n	80023c0 <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	3308      	adds	r3, #8
 80023b4:	4619      	mov	r1, r3
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	f000 fad4 	bl	8002964 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 80023bc:	4603      	mov	r3, r0
 80023be:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 80023c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d102      	bne.n	80023ce <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	2200      	movs	r2, #0
 80023cc:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 80023ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d107      	bne.n	80023e6 <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	3310      	adds	r3, #16
 80023da:	4619      	mov	r1, r3
 80023dc:	6878      	ldr	r0, [r7, #4]
 80023de:	f000 fb0a 	bl	80029f6 <VL53L0X_GetXTalkCompensationRateMegaCps>
 80023e2:	4603      	mov	r3, r0
 80023e4:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 80023e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d107      	bne.n	80023fe <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	3314      	adds	r3, #20
 80023f2:	4619      	mov	r1, r3
 80023f4:	6878      	ldr	r0, [r7, #4]
 80023f6:	f7ff fd2a 	bl	8001e4e <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 80023fa:	4603      	mov	r3, r0
 80023fc:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 80023fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d134      	bne.n	8002470 <VL53L0X_GetDeviceParameters+0xe4>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8002406:	2300      	movs	r3, #0
 8002408:	60bb      	str	r3, [r7, #8]
 800240a:	e02a      	b.n	8002462 <VL53L0X_GetDeviceParameters+0xd6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 800240c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d12a      	bne.n	800246a <VL53L0X_GetDeviceParameters+0xde>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	b299      	uxth	r1, r3
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	3308      	adds	r3, #8
 800241c:	009b      	lsls	r3, r3, #2
 800241e:	683a      	ldr	r2, [r7, #0]
 8002420:	4413      	add	r3, r2
 8002422:	3304      	adds	r3, #4
 8002424:	461a      	mov	r2, r3
 8002426:	6878      	ldr	r0, [r7, #4]
 8002428:	f000 fc2a 	bl	8002c80 <VL53L0X_GetLimitCheckValue>
 800242c:	4603      	mov	r3, r0
 800242e:	461a      	mov	r2, r3
 8002430:	7bfb      	ldrb	r3, [r7, #15]
 8002432:	4313      	orrs	r3, r2
 8002434:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 8002436:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d117      	bne.n	800246e <VL53L0X_GetDeviceParameters+0xe2>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	b299      	uxth	r1, r3
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	3318      	adds	r3, #24
 8002446:	683a      	ldr	r2, [r7, #0]
 8002448:	4413      	add	r3, r2
 800244a:	461a      	mov	r2, r3
 800244c:	6878      	ldr	r0, [r7, #4]
 800244e:	f000 fb91 	bl	8002b74 <VL53L0X_GetLimitCheckEnable>
 8002452:	4603      	mov	r3, r0
 8002454:	461a      	mov	r2, r3
 8002456:	7bfb      	ldrb	r3, [r7, #15]
 8002458:	4313      	orrs	r3, r2
 800245a:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	3301      	adds	r3, #1
 8002460:	60bb      	str	r3, [r7, #8]
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	2b05      	cmp	r3, #5
 8002466:	ddd1      	ble.n	800240c <VL53L0X_GetDeviceParameters+0x80>
 8002468:	e002      	b.n	8002470 <VL53L0X_GetDeviceParameters+0xe4>
				break;
 800246a:	bf00      	nop
 800246c:	e000      	b.n	8002470 <VL53L0X_GetDeviceParameters+0xe4>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 800246e:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8002470:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d107      	bne.n	8002488 <VL53L0X_GetDeviceParameters+0xfc>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	333c      	adds	r3, #60	; 0x3c
 800247c:	4619      	mov	r1, r3
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	f000 fc8c 	bl	8002d9c <VL53L0X_GetWrapAroundCheckEnable>
 8002484:	4603      	mov	r3, r0
 8002486:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 8002488:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d107      	bne.n	80024a0 <VL53L0X_GetDeviceParameters+0x114>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	3304      	adds	r3, #4
 8002494:	4619      	mov	r1, r3
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	f000 f895 	bl	80025c6 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 800249c:	4603      	mov	r3, r0
 800249e:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80024a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	3710      	adds	r7, #16
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}

080024ac <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b085      	sub	sp, #20
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
 80024b4:	460b      	mov	r3, r1
 80024b6:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80024b8:	2300      	movs	r3, #0
 80024ba:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 80024bc:	78fb      	ldrb	r3, [r7, #3]
 80024be:	2b15      	cmp	r3, #21
 80024c0:	d832      	bhi.n	8002528 <VL53L0X_SetDeviceMode+0x7c>
 80024c2:	a201      	add	r2, pc, #4	; (adr r2, 80024c8 <VL53L0X_SetDeviceMode+0x1c>)
 80024c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024c8:	08002521 	.word	0x08002521
 80024cc:	08002521 	.word	0x08002521
 80024d0:	08002529 	.word	0x08002529
 80024d4:	08002521 	.word	0x08002521
 80024d8:	08002529 	.word	0x08002529
 80024dc:	08002529 	.word	0x08002529
 80024e0:	08002529 	.word	0x08002529
 80024e4:	08002529 	.word	0x08002529
 80024e8:	08002529 	.word	0x08002529
 80024ec:	08002529 	.word	0x08002529
 80024f0:	08002529 	.word	0x08002529
 80024f4:	08002529 	.word	0x08002529
 80024f8:	08002529 	.word	0x08002529
 80024fc:	08002529 	.word	0x08002529
 8002500:	08002529 	.word	0x08002529
 8002504:	08002529 	.word	0x08002529
 8002508:	08002529 	.word	0x08002529
 800250c:	08002529 	.word	0x08002529
 8002510:	08002529 	.word	0x08002529
 8002514:	08002529 	.word	0x08002529
 8002518:	08002521 	.word	0x08002521
 800251c:	08002521 	.word	0x08002521
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	78fa      	ldrb	r2, [r7, #3]
 8002524:	741a      	strb	r2, [r3, #16]
		break;
 8002526:	e001      	b.n	800252c <VL53L0X_SetDeviceMode+0x80>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8002528:	23f8      	movs	r3, #248	; 0xf8
 800252a:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800252c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002530:	4618      	mov	r0, r3
 8002532:	3714      	adds	r7, #20
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr

0800253c <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 800253c:	b480      	push	{r7}
 800253e:	b085      	sub	sp, #20
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
 8002544:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002546:	2300      	movs	r3, #0
 8002548:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	7c1a      	ldrb	r2, [r3, #16]
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8002552:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002556:	4618      	mov	r0, r3
 8002558:	3714      	adds	r7, #20
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr

08002562 <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 8002562:	b580      	push	{r7, lr}
 8002564:	b084      	sub	sp, #16
 8002566:	af00      	add	r7, sp, #0
 8002568:	6078      	str	r0, [r7, #4]
 800256a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800256c:	2300      	movs	r3, #0
 800256e:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 8002570:	683a      	ldr	r2, [r7, #0]
 8002572:	2109      	movs	r1, #9
 8002574:	6878      	ldr	r0, [r7, #4]
 8002576:	f004 fb22 	bl	8006bbe <VL53L0X_RdByte>
 800257a:	4603      	mov	r3, r0
 800257c:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800257e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d106      	bne.n	8002594 <VL53L0X_GetFractionEnable+0x32>
		*pEnabled = (*pEnabled & 1);
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	781b      	ldrb	r3, [r3, #0]
 800258a:	f003 0301 	and.w	r3, r3, #1
 800258e:	b2da      	uxtb	r2, r3
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8002594:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002598:	4618      	mov	r0, r3
 800259a:	3710      	adds	r7, #16
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}

080025a0 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b084      	sub	sp, #16
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
 80025a8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80025aa:	2300      	movs	r3, #0
 80025ac:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 80025ae:	6839      	ldr	r1, [r7, #0]
 80025b0:	6878      	ldr	r0, [r7, #4]
 80025b2:	f003 fa30 	bl	8005a16 <VL53L0X_set_measurement_timing_budget_micro_seconds>
 80025b6:	4603      	mov	r3, r0
 80025b8:	73fb      	strb	r3, [r7, #15]
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);

	return Status;
 80025ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3710      	adds	r7, #16
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}

080025c6 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 80025c6:	b580      	push	{r7, lr}
 80025c8:	b084      	sub	sp, #16
 80025ca:	af00      	add	r7, sp, #0
 80025cc:	6078      	str	r0, [r7, #4]
 80025ce:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80025d0:	2300      	movs	r3, #0
 80025d2:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 80025d4:	6839      	ldr	r1, [r7, #0]
 80025d6:	6878      	ldr	r0, [r7, #4]
 80025d8:	f003 fafd 	bl	8005bd6 <VL53L0X_get_measurement_timing_budget_micro_seconds>
 80025dc:	4603      	mov	r3, r0
 80025de:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 80025e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	3710      	adds	r7, #16
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}

080025ec <VL53L0X_SetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_SetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b084      	sub	sp, #16
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
 80025f4:	460b      	mov	r3, r1
 80025f6:	70fb      	strb	r3, [r7, #3]
 80025f8:	4613      	mov	r3, r2
 80025fa:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80025fc:	2300      	movs	r3, #0
 80025fe:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_vcsel_pulse_period(Dev, VcselPeriodType,
 8002600:	78ba      	ldrb	r2, [r7, #2]
 8002602:	78fb      	ldrb	r3, [r7, #3]
 8002604:	4619      	mov	r1, r3
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f002 ff45 	bl	8005496 <VL53L0X_set_vcsel_pulse_period>
 800260c:	4603      	mov	r3, r0
 800260e:	73fb      	strb	r3, [r7, #15]
		VCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 8002610:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002614:	4618      	mov	r0, r3
 8002616:	3710      	adds	r7, #16
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}

0800261c <VL53L0X_GetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b086      	sub	sp, #24
 8002620:	af00      	add	r7, sp, #0
 8002622:	60f8      	str	r0, [r7, #12]
 8002624:	460b      	mov	r3, r1
 8002626:	607a      	str	r2, [r7, #4]
 8002628:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800262a:	2300      	movs	r3, #0
 800262c:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 800262e:	7afb      	ldrb	r3, [r7, #11]
 8002630:	687a      	ldr	r2, [r7, #4]
 8002632:	4619      	mov	r1, r3
 8002634:	68f8      	ldr	r0, [r7, #12]
 8002636:	f003 f9b7 	bl	80059a8 <VL53L0X_get_vcsel_pulse_period>
 800263a:	4603      	mov	r3, r0
 800263c:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 800263e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002642:	4618      	mov	r0, r3
 8002644:	3718      	adds	r7, #24
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}
	...

0800264c <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b086      	sub	sp, #24
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
 8002654:	460b      	mov	r3, r1
 8002656:	70fb      	strb	r3, [r7, #3]
 8002658:	4613      	mov	r3, r2
 800265a:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800265c:	2300      	movs	r3, #0
 800265e:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8002660:	2300      	movs	r3, #0
 8002662:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfigNew = 0;
 8002664:	2300      	movs	r3, #0
 8002666:	75bb      	strb	r3, [r7, #22]
	uint32_t MeasurementTimingBudgetMicroSeconds;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8002668:	f107 030f 	add.w	r3, r7, #15
 800266c:	461a      	mov	r2, r3
 800266e:	2101      	movs	r1, #1
 8002670:	6878      	ldr	r0, [r7, #4]
 8002672:	f004 faa4 	bl	8006bbe <VL53L0X_RdByte>
 8002676:	4603      	mov	r3, r0
 8002678:	75fb      	strb	r3, [r7, #23]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 800267a:	7bfb      	ldrb	r3, [r7, #15]
 800267c:	75bb      	strb	r3, [r7, #22]

	if (Status == VL53L0X_ERROR_NONE) {
 800267e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d15a      	bne.n	800273c <VL53L0X_SetSequenceStepEnable+0xf0>
		if (SequenceStepEnabled == 1) {
 8002686:	78bb      	ldrb	r3, [r7, #2]
 8002688:	2b01      	cmp	r3, #1
 800268a:	d12b      	bne.n	80026e4 <VL53L0X_SetSequenceStepEnable+0x98>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 800268c:	78fb      	ldrb	r3, [r7, #3]
 800268e:	2b04      	cmp	r3, #4
 8002690:	d825      	bhi.n	80026de <VL53L0X_SetSequenceStepEnable+0x92>
 8002692:	a201      	add	r2, pc, #4	; (adr r2, 8002698 <VL53L0X_SetSequenceStepEnable+0x4c>)
 8002694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002698:	080026ad 	.word	0x080026ad
 800269c:	080026b7 	.word	0x080026b7
 80026a0:	080026c1 	.word	0x080026c1
 80026a4:	080026cb 	.word	0x080026cb
 80026a8:	080026d5 	.word	0x080026d5
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 80026ac:	7dbb      	ldrb	r3, [r7, #22]
 80026ae:	f043 0310 	orr.w	r3, r3, #16
 80026b2:	75bb      	strb	r3, [r7, #22]
				break;
 80026b4:	e043      	b.n	800273e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 80026b6:	7dbb      	ldrb	r3, [r7, #22]
 80026b8:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 80026bc:	75bb      	strb	r3, [r7, #22]
				break;
 80026be:	e03e      	b.n	800273e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 80026c0:	7dbb      	ldrb	r3, [r7, #22]
 80026c2:	f043 0304 	orr.w	r3, r3, #4
 80026c6:	75bb      	strb	r3, [r7, #22]
				break;
 80026c8:	e039      	b.n	800273e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 80026ca:	7dbb      	ldrb	r3, [r7, #22]
 80026cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80026d0:	75bb      	strb	r3, [r7, #22]
				break;
 80026d2:	e034      	b.n	800273e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 80026d4:	7dbb      	ldrb	r3, [r7, #22]
 80026d6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80026da:	75bb      	strb	r3, [r7, #22]
				break;
 80026dc:	e02f      	b.n	800273e <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 80026de:	23fc      	movs	r3, #252	; 0xfc
 80026e0:	75fb      	strb	r3, [r7, #23]
 80026e2:	e02c      	b.n	800273e <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 80026e4:	78fb      	ldrb	r3, [r7, #3]
 80026e6:	2b04      	cmp	r3, #4
 80026e8:	d825      	bhi.n	8002736 <VL53L0X_SetSequenceStepEnable+0xea>
 80026ea:	a201      	add	r2, pc, #4	; (adr r2, 80026f0 <VL53L0X_SetSequenceStepEnable+0xa4>)
 80026ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026f0:	08002705 	.word	0x08002705
 80026f4:	0800270f 	.word	0x0800270f
 80026f8:	08002719 	.word	0x08002719
 80026fc:	08002723 	.word	0x08002723
 8002700:	0800272d 	.word	0x0800272d
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 8002704:	7dbb      	ldrb	r3, [r7, #22]
 8002706:	f023 0310 	bic.w	r3, r3, #16
 800270a:	75bb      	strb	r3, [r7, #22]
				break;
 800270c:	e017      	b.n	800273e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 800270e:	7dbb      	ldrb	r3, [r7, #22]
 8002710:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8002714:	75bb      	strb	r3, [r7, #22]
				break;
 8002716:	e012      	b.n	800273e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 8002718:	7dbb      	ldrb	r3, [r7, #22]
 800271a:	f023 0304 	bic.w	r3, r3, #4
 800271e:	75bb      	strb	r3, [r7, #22]
				break;
 8002720:	e00d      	b.n	800273e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 8002722:	7dbb      	ldrb	r3, [r7, #22]
 8002724:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002728:	75bb      	strb	r3, [r7, #22]
				break;
 800272a:	e008      	b.n	800273e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 800272c:	7dbb      	ldrb	r3, [r7, #22]
 800272e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002732:	75bb      	strb	r3, [r7, #22]
				break;
 8002734:	e003      	b.n	800273e <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8002736:	23fc      	movs	r3, #252	; 0xfc
 8002738:	75fb      	strb	r3, [r7, #23]
 800273a:	e000      	b.n	800273e <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		}
 800273c:	bf00      	nop
	}

	if (SequenceConfigNew != SequenceConfig) {
 800273e:	7bfb      	ldrb	r3, [r7, #15]
 8002740:	7dba      	ldrb	r2, [r7, #22]
 8002742:	429a      	cmp	r2, r3
 8002744:	d01e      	beq.n	8002784 <VL53L0X_SetSequenceStepEnable+0x138>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 8002746:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d107      	bne.n	800275e <VL53L0X_SetSequenceStepEnable+0x112>
			Status = VL53L0X_WrByte(Dev,
 800274e:	7dbb      	ldrb	r3, [r7, #22]
 8002750:	461a      	mov	r2, r3
 8002752:	2101      	movs	r1, #1
 8002754:	6878      	ldr	r0, [r7, #4]
 8002756:	f004 fb2d 	bl	8006db4 <VL53L0X_WrByte>
 800275a:	4603      	mov	r3, r0
 800275c:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 800275e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d103      	bne.n	800276e <VL53L0X_SetSequenceStepEnable+0x122>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	7dba      	ldrb	r2, [r7, #22]
 800276a:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 800276e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d106      	bne.n	8002784 <VL53L0X_SetSequenceStepEnable+0x138>
			VL53L0X_GETPARAMETERFIELD(Dev,
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	695b      	ldr	r3, [r3, #20]
 800277a:	613b      	str	r3, [r7, #16]
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 800277c:	6939      	ldr	r1, [r7, #16]
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	f7ff ff0e 	bl	80025a0 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		}
	}

	LOG_FUNCTION_END(Status);

	return Status;
 8002784:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002788:	4618      	mov	r0, r3
 800278a:	3718      	adds	r7, #24
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}

08002790 <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 8002790:	b480      	push	{r7}
 8002792:	b087      	sub	sp, #28
 8002794:	af00      	add	r7, sp, #0
 8002796:	60f8      	str	r0, [r7, #12]
 8002798:	607b      	str	r3, [r7, #4]
 800279a:	460b      	mov	r3, r1
 800279c:	72fb      	strb	r3, [r7, #11]
 800279e:	4613      	mov	r3, r2
 80027a0:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80027a2:	2300      	movs	r3, #0
 80027a4:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2200      	movs	r2, #0
 80027aa:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 80027ac:	7afb      	ldrb	r3, [r7, #11]
 80027ae:	2b04      	cmp	r3, #4
 80027b0:	d836      	bhi.n	8002820 <sequence_step_enabled+0x90>
 80027b2:	a201      	add	r2, pc, #4	; (adr r2, 80027b8 <sequence_step_enabled+0x28>)
 80027b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027b8:	080027cd 	.word	0x080027cd
 80027bc:	080027df 	.word	0x080027df
 80027c0:	080027f1 	.word	0x080027f1
 80027c4:	08002803 	.word	0x08002803
 80027c8:	08002815 	.word	0x08002815
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 80027cc:	7abb      	ldrb	r3, [r7, #10]
 80027ce:	111b      	asrs	r3, r3, #4
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	f003 0301 	and.w	r3, r3, #1
 80027d6:	b2da      	uxtb	r2, r3
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	701a      	strb	r2, [r3, #0]
		break;
 80027dc:	e022      	b.n	8002824 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 80027de:	7abb      	ldrb	r3, [r7, #10]
 80027e0:	10db      	asrs	r3, r3, #3
 80027e2:	b2db      	uxtb	r3, r3
 80027e4:	f003 0301 	and.w	r3, r3, #1
 80027e8:	b2da      	uxtb	r2, r3
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	701a      	strb	r2, [r3, #0]
		break;
 80027ee:	e019      	b.n	8002824 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 80027f0:	7abb      	ldrb	r3, [r7, #10]
 80027f2:	109b      	asrs	r3, r3, #2
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	f003 0301 	and.w	r3, r3, #1
 80027fa:	b2da      	uxtb	r2, r3
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	701a      	strb	r2, [r3, #0]
		break;
 8002800:	e010      	b.n	8002824 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 8002802:	7abb      	ldrb	r3, [r7, #10]
 8002804:	119b      	asrs	r3, r3, #6
 8002806:	b2db      	uxtb	r3, r3
 8002808:	f003 0301 	and.w	r3, r3, #1
 800280c:	b2da      	uxtb	r2, r3
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	701a      	strb	r2, [r3, #0]
		break;
 8002812:	e007      	b.n	8002824 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 8002814:	7abb      	ldrb	r3, [r7, #10]
 8002816:	09db      	lsrs	r3, r3, #7
 8002818:	b2da      	uxtb	r2, r3
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	701a      	strb	r2, [r3, #0]
		break;
 800281e:	e001      	b.n	8002824 <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8002820:	23fc      	movs	r3, #252	; 0xfc
 8002822:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8002824:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002828:	4618      	mov	r0, r3
 800282a:	371c      	adds	r7, #28
 800282c:	46bd      	mov	sp, r7
 800282e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002832:	4770      	bx	lr

08002834 <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b084      	sub	sp, #16
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
 800283c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800283e:	2300      	movs	r3, #0
 8002840:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 8002842:	2300      	movs	r3, #0
 8002844:	73bb      	strb	r3, [r7, #14]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8002846:	f107 030e 	add.w	r3, r7, #14
 800284a:	461a      	mov	r2, r3
 800284c:	2101      	movs	r1, #1
 800284e:	6878      	ldr	r0, [r7, #4]
 8002850:	f004 f9b5 	bl	8006bbe <VL53L0X_RdByte>
 8002854:	4603      	mov	r3, r0
 8002856:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 8002858:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d107      	bne.n	8002870 <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev,
 8002860:	7bba      	ldrb	r2, [r7, #14]
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	2100      	movs	r1, #0
 8002866:	6878      	ldr	r0, [r7, #4]
 8002868:	f7ff ff92 	bl	8002790 <sequence_step_enabled>
 800286c:	4603      	mov	r3, r0
 800286e:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8002870:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d108      	bne.n	800288a <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev,
 8002878:	7bba      	ldrb	r2, [r7, #14]
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	3302      	adds	r3, #2
 800287e:	2101      	movs	r1, #1
 8002880:	6878      	ldr	r0, [r7, #4]
 8002882:	f7ff ff85 	bl	8002790 <sequence_step_enabled>
 8002886:	4603      	mov	r3, r0
 8002888:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800288a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d108      	bne.n	80028a4 <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev,
 8002892:	7bba      	ldrb	r2, [r7, #14]
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	3301      	adds	r3, #1
 8002898:	2102      	movs	r1, #2
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	f7ff ff78 	bl	8002790 <sequence_step_enabled>
 80028a0:	4603      	mov	r3, r0
 80028a2:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80028a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d108      	bne.n	80028be <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev,
 80028ac:	7bba      	ldrb	r2, [r7, #14]
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	3303      	adds	r3, #3
 80028b2:	2103      	movs	r1, #3
 80028b4:	6878      	ldr	r0, [r7, #4]
 80028b6:	f7ff ff6b 	bl	8002790 <sequence_step_enabled>
 80028ba:	4603      	mov	r3, r0
 80028bc:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80028be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d108      	bne.n	80028d8 <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev,
 80028c6:	7bba      	ldrb	r2, [r7, #14]
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	3304      	adds	r3, #4
 80028cc:	2104      	movs	r1, #4
 80028ce:	6878      	ldr	r0, [r7, #4]
 80028d0:	f7ff ff5e 	bl	8002790 <sequence_step_enabled>
 80028d4:	4603      	mov	r3, r0
 80028d6:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80028d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80028dc:	4618      	mov	r0, r3
 80028de:	3710      	adds	r7, #16
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}

080028e4 <VL53L0X_GetSequenceStepTimeout>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepTimeout(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, FixPoint1616_t *pTimeOutMilliSecs)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b088      	sub	sp, #32
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	60f8      	str	r0, [r7, #12]
 80028ec:	460b      	mov	r3, r1
 80028ee:	607a      	str	r2, [r7, #4]
 80028f0:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80028f2:	2300      	movs	r3, #0
 80028f4:	77fb      	strb	r3, [r7, #31]
	uint32_t TimeoutMicroSeconds;
	uint32_t WholeNumber_ms = 0;
 80028f6:	2300      	movs	r3, #0
 80028f8:	61bb      	str	r3, [r7, #24]
	uint32_t Fraction_ms = 0;
 80028fa:	2300      	movs	r3, #0
 80028fc:	617b      	str	r3, [r7, #20]
	LOG_FUNCTION_START("");

	Status = get_sequence_step_timeout(Dev, SequenceStepId,
 80028fe:	f107 0210 	add.w	r2, r7, #16
 8002902:	7afb      	ldrb	r3, [r7, #11]
 8002904:	4619      	mov	r1, r3
 8002906:	68f8      	ldr	r0, [r7, #12]
 8002908:	f002 fbf0 	bl	80050ec <get_sequence_step_timeout>
 800290c:	4603      	mov	r3, r0
 800290e:	77fb      	strb	r3, [r7, #31]
		&TimeoutMicroSeconds);
	if (Status == VL53L0X_ERROR_NONE) {
 8002910:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d11c      	bne.n	8002952 <VL53L0X_GetSequenceStepTimeout+0x6e>
		WholeNumber_ms = TimeoutMicroSeconds / 1000;
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	4a11      	ldr	r2, [pc, #68]	; (8002960 <VL53L0X_GetSequenceStepTimeout+0x7c>)
 800291c:	fba2 2303 	umull	r2, r3, r2, r3
 8002920:	099b      	lsrs	r3, r3, #6
 8002922:	61bb      	str	r3, [r7, #24]
		Fraction_ms = TimeoutMicroSeconds - (WholeNumber_ms * 1000);
 8002924:	693a      	ldr	r2, [r7, #16]
 8002926:	69bb      	ldr	r3, [r7, #24]
 8002928:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800292c:	fb01 f303 	mul.w	r3, r1, r3
 8002930:	1ad3      	subs	r3, r2, r3
 8002932:	617b      	str	r3, [r7, #20]
		*pTimeOutMilliSecs = (WholeNumber_ms << 16)
 8002934:	69bb      	ldr	r3, [r7, #24]
 8002936:	0419      	lsls	r1, r3, #16
			+ (((Fraction_ms * 0xffff) + 500) / 1000);
 8002938:	697a      	ldr	r2, [r7, #20]
 800293a:	4613      	mov	r3, r2
 800293c:	041b      	lsls	r3, r3, #16
 800293e:	1a9b      	subs	r3, r3, r2
 8002940:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8002944:	4a06      	ldr	r2, [pc, #24]	; (8002960 <VL53L0X_GetSequenceStepTimeout+0x7c>)
 8002946:	fba2 2303 	umull	r2, r3, r2, r3
 800294a:	099b      	lsrs	r3, r3, #6
 800294c:	18ca      	adds	r2, r1, r3
		*pTimeOutMilliSecs = (WholeNumber_ms << 16)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	601a      	str	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8002952:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8002956:	4618      	mov	r0, r3
 8002958:	3720      	adds	r7, #32
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	10624dd3 	.word	0x10624dd3

08002964 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b084      	sub	sp, #16
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
 800296c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800296e:	2300      	movs	r3, #0
 8002970:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 8002972:	f107 030c 	add.w	r3, r7, #12
 8002976:	461a      	mov	r2, r3
 8002978:	21f8      	movs	r1, #248	; 0xf8
 800297a:	6878      	ldr	r0, [r7, #4]
 800297c:	f004 f9a6 	bl	8006ccc <VL53L0X_RdWord>
 8002980:	4603      	mov	r3, r0
 8002982:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 8002984:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d108      	bne.n	800299e <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 800298c:	f107 0308 	add.w	r3, r7, #8
 8002990:	461a      	mov	r2, r3
 8002992:	2104      	movs	r1, #4
 8002994:	6878      	ldr	r0, [r7, #4]
 8002996:	f004 f9d1 	bl	8006d3c <VL53L0X_RdDWord>
 800299a:	4603      	mov	r3, r0
 800299c:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800299e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d10c      	bne.n	80029c0 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 80029a6:	89bb      	ldrh	r3, [r7, #12]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d005      	beq.n	80029b8 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	89ba      	ldrh	r2, [r7, #12]
 80029b0:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80029c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	3710      	adds	r7, #16
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}

080029cc <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b085      	sub	sp, #20
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
 80029d4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80029d6:	2300      	movs	r3, #0
 80029d8:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	7f1b      	ldrb	r3, [r3, #28]
 80029de:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	7bba      	ldrb	r2, [r7, #14]
 80029e4:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 80029e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	3714      	adds	r7, #20
 80029ee:	46bd      	mov	sp, r7
 80029f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f4:	4770      	bx	lr

080029f6 <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 80029f6:	b580      	push	{r7, lr}
 80029f8:	b086      	sub	sp, #24
 80029fa:	af00      	add	r7, sp, #0
 80029fc:	6078      	str	r0, [r7, #4]
 80029fe:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002a00:	2300      	movs	r3, #0
 8002a02:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 8002a04:	f107 030e 	add.w	r3, r7, #14
 8002a08:	461a      	mov	r2, r3
 8002a0a:	2120      	movs	r1, #32
 8002a0c:	6878      	ldr	r0, [r7, #4]
 8002a0e:	f004 f95d 	bl	8006ccc <VL53L0X_RdWord>
 8002a12:	4603      	mov	r3, r0
 8002a14:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 8002a16:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d118      	bne.n	8002a50 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 8002a1e:	89fb      	ldrh	r3, [r7, #14]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d109      	bne.n	8002a38 <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6a1b      	ldr	r3, [r3, #32]
 8002a28:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	693a      	ldr	r2, [r7, #16]
 8002a2e:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2200      	movs	r2, #0
 8002a34:	771a      	strb	r2, [r3, #28]
 8002a36:	e00b      	b.n	8002a50 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 8002a38:	89fb      	ldrh	r3, [r7, #14]
 8002a3a:	00db      	lsls	r3, r3, #3
 8002a3c:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	693a      	ldr	r2, [r7, #16]
 8002a42:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	693a      	ldr	r2, [r7, #16]
 8002a48:	621a      	str	r2, [r3, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	771a      	strb	r2, [r3, #28]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8002a50:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	3718      	adds	r7, #24
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}

08002a5c <VL53L0X_SetLimitCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b086      	sub	sp, #24
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
 8002a64:	460b      	mov	r3, r1
 8002a66:	807b      	strh	r3, [r7, #2]
 8002a68:	4613      	mov	r3, r2
 8002a6a:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 8002a70:	2300      	movs	r3, #0
 8002a72:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 8002a74:	2300      	movs	r3, #0
 8002a76:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8002a7c:	887b      	ldrh	r3, [r7, #2]
 8002a7e:	2b05      	cmp	r3, #5
 8002a80:	d902      	bls.n	8002a88 <VL53L0X_SetLimitCheckEnable+0x2c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8002a82:	23fc      	movs	r3, #252	; 0xfc
 8002a84:	75fb      	strb	r3, [r7, #23]
 8002a86:	e05b      	b.n	8002b40 <VL53L0X_SetLimitCheckEnable+0xe4>
	} else {
		if (LimitCheckEnable == 0) {
 8002a88:	787b      	ldrb	r3, [r7, #1]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d106      	bne.n	8002a9c <VL53L0X_SetLimitCheckEnable+0x40>
			TempFix1616 = 0;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 8002a92:	2300      	movs	r3, #0
 8002a94:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 8002a96:	2301      	movs	r3, #1
 8002a98:	73bb      	strb	r3, [r7, #14]
 8002a9a:	e00a      	b.n	8002ab2 <VL53L0X_SetLimitCheckEnable+0x56>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8002a9c:	887b      	ldrh	r3, [r7, #2]
 8002a9e:	687a      	ldr	r2, [r7, #4]
 8002aa0:	330c      	adds	r3, #12
 8002aa2:	009b      	lsls	r3, r3, #2
 8002aa4:	4413      	add	r3, r2
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 8002ab2:	887b      	ldrh	r3, [r7, #2]
 8002ab4:	2b05      	cmp	r3, #5
 8002ab6:	d841      	bhi.n	8002b3c <VL53L0X_SetLimitCheckEnable+0xe0>
 8002ab8:	a201      	add	r2, pc, #4	; (adr r2, 8002ac0 <VL53L0X_SetLimitCheckEnable+0x64>)
 8002aba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002abe:	bf00      	nop
 8002ac0:	08002ad9 	.word	0x08002ad9
 8002ac4:	08002ae3 	.word	0x08002ae3
 8002ac8:	08002af9 	.word	0x08002af9
 8002acc:	08002b03 	.word	0x08002b03
 8002ad0:	08002b0d 	.word	0x08002b0d
 8002ad4:	08002b25 	.word	0x08002b25

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	7bfa      	ldrb	r2, [r7, #15]
 8002adc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 8002ae0:	e02e      	b.n	8002b40 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8002ae6:	b29b      	uxth	r3, r3
 8002ae8:	461a      	mov	r2, r3
 8002aea:	2144      	movs	r1, #68	; 0x44
 8002aec:	6878      	ldr	r0, [r7, #4]
 8002aee:	f004 f985 	bl	8006dfc <VL53L0X_WrWord>
 8002af2:	4603      	mov	r3, r0
 8002af4:	75fb      	strb	r3, [r7, #23]

			break;
 8002af6:	e023      	b.n	8002b40 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	7bfa      	ldrb	r2, [r7, #15]
 8002afc:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 8002b00:	e01e      	b.n	8002b40 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	7bfa      	ldrb	r2, [r7, #15]
 8002b06:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 8002b0a:	e019      	b.n	8002b40 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 8002b0c:	7bbb      	ldrb	r3, [r7, #14]
 8002b0e:	005b      	lsls	r3, r3, #1
 8002b10:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8002b12:	7b7b      	ldrb	r3, [r7, #13]
 8002b14:	22fe      	movs	r2, #254	; 0xfe
 8002b16:	2160      	movs	r1, #96	; 0x60
 8002b18:	6878      	ldr	r0, [r7, #4]
 8002b1a:	f004 f999 	bl	8006e50 <VL53L0X_UpdateByte>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 8002b22:	e00d      	b.n	8002b40 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 8002b24:	7bbb      	ldrb	r3, [r7, #14]
 8002b26:	011b      	lsls	r3, r3, #4
 8002b28:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8002b2a:	7b7b      	ldrb	r3, [r7, #13]
 8002b2c:	22ef      	movs	r2, #239	; 0xef
 8002b2e:	2160      	movs	r1, #96	; 0x60
 8002b30:	6878      	ldr	r0, [r7, #4]
 8002b32:	f004 f98d 	bl	8006e50 <VL53L0X_UpdateByte>
 8002b36:	4603      	mov	r3, r0
 8002b38:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 8002b3a:	e001      	b.n	8002b40 <VL53L0X_SetLimitCheckEnable+0xe4>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8002b3c:	23fc      	movs	r3, #252	; 0xfc
 8002b3e:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8002b40:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d10f      	bne.n	8002b68 <VL53L0X_SetLimitCheckEnable+0x10c>
		if (LimitCheckEnable == 0) {
 8002b48:	787b      	ldrb	r3, [r7, #1]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d106      	bne.n	8002b5c <VL53L0X_SetLimitCheckEnable+0x100>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8002b4e:	887b      	ldrh	r3, [r7, #2]
 8002b50:	687a      	ldr	r2, [r7, #4]
 8002b52:	4413      	add	r3, r2
 8002b54:	2200      	movs	r2, #0
 8002b56:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8002b5a:	e005      	b.n	8002b68 <VL53L0X_SetLimitCheckEnable+0x10c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8002b5c:	887b      	ldrh	r3, [r7, #2]
 8002b5e:	687a      	ldr	r2, [r7, #4]
 8002b60:	4413      	add	r3, r2
 8002b62:	2201      	movs	r2, #1
 8002b64:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8002b68:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	3718      	adds	r7, #24
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}

08002b74 <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b087      	sub	sp, #28
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	60f8      	str	r0, [r7, #12]
 8002b7c:	460b      	mov	r3, r1
 8002b7e:	607a      	str	r2, [r7, #4]
 8002b80:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002b82:	2300      	movs	r3, #0
 8002b84:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8002b86:	897b      	ldrh	r3, [r7, #10]
 8002b88:	2b05      	cmp	r3, #5
 8002b8a:	d905      	bls.n	8002b98 <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8002b8c:	23fc      	movs	r3, #252	; 0xfc
 8002b8e:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2200      	movs	r2, #0
 8002b94:	701a      	strb	r2, [r3, #0]
 8002b96:	e008      	b.n	8002baa <VL53L0X_GetLimitCheckEnable+0x36>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8002b98:	897b      	ldrh	r3, [r7, #10]
 8002b9a:	68fa      	ldr	r2, [r7, #12]
 8002b9c:	4413      	add	r3, r2
 8002b9e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002ba2:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	7dba      	ldrb	r2, [r7, #22]
 8002ba8:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8002baa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	371c      	adds	r7, #28
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb8:	4770      	bx	lr
	...

08002bbc <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b086      	sub	sp, #24
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	60f8      	str	r0, [r7, #12]
 8002bc4:	460b      	mov	r3, r1
 8002bc6:	607a      	str	r2, [r7, #4]
 8002bc8:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 8002bce:	897b      	ldrh	r3, [r7, #10]
 8002bd0:	68fa      	ldr	r2, [r7, #12]
 8002bd2:	4413      	add	r3, r2
 8002bd4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002bd8:	75bb      	strb	r3, [r7, #22]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 8002bda:	7dbb      	ldrb	r3, [r7, #22]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d107      	bne.n	8002bf0 <VL53L0X_SetLimitCheckValue+0x34>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8002be0:	897b      	ldrh	r3, [r7, #10]
 8002be2:	68fa      	ldr	r2, [r7, #12]
 8002be4:	330c      	adds	r3, #12
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	4413      	add	r3, r2
 8002bea:	687a      	ldr	r2, [r7, #4]
 8002bec:	605a      	str	r2, [r3, #4]
 8002bee:	e040      	b.n	8002c72 <VL53L0X_SetLimitCheckValue+0xb6>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 8002bf0:	897b      	ldrh	r3, [r7, #10]
 8002bf2:	2b05      	cmp	r3, #5
 8002bf4:	d830      	bhi.n	8002c58 <VL53L0X_SetLimitCheckValue+0x9c>
 8002bf6:	a201      	add	r2, pc, #4	; (adr r2, 8002bfc <VL53L0X_SetLimitCheckValue+0x40>)
 8002bf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bfc:	08002c15 	.word	0x08002c15
 8002c00:	08002c1d 	.word	0x08002c1d
 8002c04:	08002c33 	.word	0x08002c33
 8002c08:	08002c3b 	.word	0x08002c3b
 8002c0c:	08002c43 	.word	0x08002c43
 8002c10:	08002c43 	.word	0x08002c43

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	687a      	ldr	r2, [r7, #4]
 8002c18:	635a      	str	r2, [r3, #52]	; 0x34
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 8002c1a:	e01f      	b.n	8002c5c <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8002c20:	b29b      	uxth	r3, r3
 8002c22:	461a      	mov	r2, r3
 8002c24:	2144      	movs	r1, #68	; 0x44
 8002c26:	68f8      	ldr	r0, [r7, #12]
 8002c28:	f004 f8e8 	bl	8006dfc <VL53L0X_WrWord>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8002c30:	e014      	b.n	8002c5c <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	687a      	ldr	r2, [r7, #4]
 8002c36:	63da      	str	r2, [r3, #60]	; 0x3c
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 8002c38:	e010      	b.n	8002c5c <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	687a      	ldr	r2, [r7, #4]
 8002c3e:	641a      	str	r2, [r3, #64]	; 0x40
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 8002c40:	e00c      	b.n	8002c5c <VL53L0X_SetLimitCheckValue+0xa0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8002c46:	b29b      	uxth	r3, r3
 8002c48:	461a      	mov	r2, r3
 8002c4a:	2164      	movs	r1, #100	; 0x64
 8002c4c:	68f8      	ldr	r0, [r7, #12]
 8002c4e:	f004 f8d5 	bl	8006dfc <VL53L0X_WrWord>
 8002c52:	4603      	mov	r3, r0
 8002c54:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8002c56:	e001      	b.n	8002c5c <VL53L0X_SetLimitCheckValue+0xa0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8002c58:	23fc      	movs	r3, #252	; 0xfc
 8002c5a:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 8002c5c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d106      	bne.n	8002c72 <VL53L0X_SetLimitCheckValue+0xb6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8002c64:	897b      	ldrh	r3, [r7, #10]
 8002c66:	68fa      	ldr	r2, [r7, #12]
 8002c68:	330c      	adds	r3, #12
 8002c6a:	009b      	lsls	r3, r3, #2
 8002c6c:	4413      	add	r3, r2
 8002c6e:	687a      	ldr	r2, [r7, #4]
 8002c70:	605a      	str	r2, [r3, #4]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8002c72:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	3718      	adds	r7, #24
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}
 8002c7e:	bf00      	nop

08002c80 <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b088      	sub	sp, #32
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	60f8      	str	r0, [r7, #12]
 8002c88:	460b      	mov	r3, r1
 8002c8a:	607a      	str	r2, [r7, #4]
 8002c8c:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 8002c92:	2300      	movs	r3, #0
 8002c94:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 8002c96:	897b      	ldrh	r3, [r7, #10]
 8002c98:	2b05      	cmp	r3, #5
 8002c9a:	d847      	bhi.n	8002d2c <VL53L0X_GetLimitCheckValue+0xac>
 8002c9c:	a201      	add	r2, pc, #4	; (adr r2, 8002ca4 <VL53L0X_GetLimitCheckValue+0x24>)
 8002c9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ca2:	bf00      	nop
 8002ca4:	08002cbd 	.word	0x08002cbd
 8002ca8:	08002cc9 	.word	0x08002cc9
 8002cac:	08002cef 	.word	0x08002cef
 8002cb0:	08002cfb 	.word	0x08002cfb
 8002cb4:	08002d07 	.word	0x08002d07
 8002cb8:	08002d07 	.word	0x08002d07

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cc0:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	77bb      	strb	r3, [r7, #30]
		break;
 8002cc6:	e033      	b.n	8002d30 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8002cc8:	f107 0316 	add.w	r3, r7, #22
 8002ccc:	461a      	mov	r2, r3
 8002cce:	2144      	movs	r1, #68	; 0x44
 8002cd0:	68f8      	ldr	r0, [r7, #12]
 8002cd2:	f003 fffb 	bl	8006ccc <VL53L0X_RdWord>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8002cda:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d102      	bne.n	8002ce8 <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8002ce2:	8afb      	ldrh	r3, [r7, #22]
 8002ce4:	025b      	lsls	r3, r3, #9
 8002ce6:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	77bb      	strb	r3, [r7, #30]
		break;
 8002cec:	e020      	b.n	8002d30 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cf2:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	77bb      	strb	r3, [r7, #30]
		break;
 8002cf8:	e01a      	b.n	8002d30 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cfe:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, TempFix1616);
		EnableZeroValue = 0;
 8002d00:	2300      	movs	r3, #0
 8002d02:	77bb      	strb	r3, [r7, #30]
		break;
 8002d04:	e014      	b.n	8002d30 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8002d06:	f107 0316 	add.w	r3, r7, #22
 8002d0a:	461a      	mov	r2, r3
 8002d0c:	2164      	movs	r1, #100	; 0x64
 8002d0e:	68f8      	ldr	r0, [r7, #12]
 8002d10:	f003 ffdc 	bl	8006ccc <VL53L0X_RdWord>
 8002d14:	4603      	mov	r3, r0
 8002d16:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8002d18:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d102      	bne.n	8002d26 <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8002d20:	8afb      	ldrh	r3, [r7, #22]
 8002d22:	025b      	lsls	r3, r3, #9
 8002d24:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 8002d26:	2300      	movs	r3, #0
 8002d28:	77bb      	strb	r3, [r7, #30]
		break;
 8002d2a:	e001      	b.n	8002d30 <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8002d2c:	23fc      	movs	r3, #252	; 0xfc
 8002d2e:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8002d30:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d12a      	bne.n	8002d8e <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 8002d38:	7fbb      	ldrb	r3, [r7, #30]
 8002d3a:	2b01      	cmp	r3, #1
 8002d3c:	d124      	bne.n	8002d88 <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 8002d3e:	69bb      	ldr	r3, [r7, #24]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d110      	bne.n	8002d66 <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 8002d44:	897b      	ldrh	r3, [r7, #10]
 8002d46:	68fa      	ldr	r2, [r7, #12]
 8002d48:	330c      	adds	r3, #12
 8002d4a:	009b      	lsls	r3, r3, #2
 8002d4c:	4413      	add	r3, r2
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	69ba      	ldr	r2, [r7, #24]
 8002d56:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8002d58:	897b      	ldrh	r3, [r7, #10]
 8002d5a:	68fa      	ldr	r2, [r7, #12]
 8002d5c:	4413      	add	r3, r2
 8002d5e:	2200      	movs	r2, #0
 8002d60:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8002d64:	e013      	b.n	8002d8e <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	69ba      	ldr	r2, [r7, #24]
 8002d6a:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8002d6c:	897b      	ldrh	r3, [r7, #10]
 8002d6e:	68fa      	ldr	r2, [r7, #12]
 8002d70:	330c      	adds	r3, #12
 8002d72:	009b      	lsls	r3, r3, #2
 8002d74:	4413      	add	r3, r2
 8002d76:	69ba      	ldr	r2, [r7, #24]
 8002d78:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8002d7a:	897b      	ldrh	r3, [r7, #10]
 8002d7c:	68fa      	ldr	r2, [r7, #12]
 8002d7e:	4413      	add	r3, r2
 8002d80:	2201      	movs	r2, #1
 8002d82:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8002d86:	e002      	b.n	8002d8e <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	69ba      	ldr	r2, [r7, #24]
 8002d8c:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8002d8e:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 8002d92:	4618      	mov	r0, r3
 8002d94:	3720      	adds	r7, #32
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}
 8002d9a:	bf00      	nop

08002d9c <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b084      	sub	sp, #16
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
 8002da4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002da6:	2300      	movs	r3, #0
 8002da8:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 8002daa:	f107 030e 	add.w	r3, r7, #14
 8002dae:	461a      	mov	r2, r3
 8002db0:	2101      	movs	r1, #1
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	f003 ff03 	bl	8006bbe <VL53L0X_RdByte>
 8002db8:	4603      	mov	r3, r0
 8002dba:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 8002dbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d10e      	bne.n	8002de2 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 8002dc4:	7bba      	ldrb	r2, [r7, #14]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		if (data & (0x01 << 7))
 8002dcc:	7bbb      	ldrb	r3, [r7, #14]
 8002dce:	b25b      	sxtb	r3, r3
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	da03      	bge.n	8002ddc <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	701a      	strb	r2, [r3, #0]
 8002dda:	e002      	b.n	8002de2 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	2200      	movs	r2, #0
 8002de0:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8002de2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d104      	bne.n	8002df4 <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	781a      	ldrb	r2, [r3, #0]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8002df4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	3710      	adds	r7, #16
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}

08002e00 <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b084      	sub	sp, #16
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8002e0c:	f107 030e 	add.w	r3, r7, #14
 8002e10:	4619      	mov	r1, r3
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	f7ff fb92 	bl	800253c <VL53L0X_GetDeviceMode>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8002e1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d107      	bne.n	8002e34 <VL53L0X_PerformSingleMeasurement+0x34>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8002e24:	7bbb      	ldrb	r3, [r7, #14]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d104      	bne.n	8002e34 <VL53L0X_PerformSingleMeasurement+0x34>
		Status = VL53L0X_StartMeasurement(Dev);
 8002e2a:	6878      	ldr	r0, [r7, #4]
 8002e2c:	f000 f898 	bl	8002f60 <VL53L0X_StartMeasurement>
 8002e30:	4603      	mov	r3, r0
 8002e32:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8002e34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d104      	bne.n	8002e46 <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8002e3c:	6878      	ldr	r0, [r7, #4]
 8002e3e:	f001 fb09 	bl	8004454 <VL53L0X_measurement_poll_for_completion>
 8002e42:	4603      	mov	r3, r0
 8002e44:	73fb      	strb	r3, [r7, #15]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8002e46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d106      	bne.n	8002e5c <VL53L0X_PerformSingleMeasurement+0x5c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8002e4e:	7bbb      	ldrb	r3, [r7, #14]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d103      	bne.n	8002e5c <VL53L0X_PerformSingleMeasurement+0x5c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2203      	movs	r2, #3
 8002e58:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132


	LOG_FUNCTION_END(Status);
	return Status;
 8002e5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	3710      	adds	r7, #16
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}

08002e68 <VL53L0X_PerformRefCalibration>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev, uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b086      	sub	sp, #24
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	60f8      	str	r0, [r7, #12]
 8002e70:	60b9      	str	r1, [r7, #8]
 8002e72:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002e74:	2300      	movs	r3, #0
 8002e76:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 8002e78:	2301      	movs	r3, #1
 8002e7a:	687a      	ldr	r2, [r7, #4]
 8002e7c:	68b9      	ldr	r1, [r7, #8]
 8002e7e:	68f8      	ldr	r0, [r7, #12]
 8002e80:	f001 faab 	bl	80043da <VL53L0X_perform_ref_calibration>
 8002e84:	4603      	mov	r3, r0
 8002e86:	75fb      	strb	r3, [r7, #23]
		pPhaseCal, 1);

	LOG_FUNCTION_END(Status);
	return Status;
 8002e88:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	3718      	adds	r7, #24
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}

08002e94 <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b086      	sub	sp, #24
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
 8002e9c:	460b      	mov	r3, r1
 8002e9e:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	75fb      	strb	r3, [r7, #23]

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 8002eaa:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	if ((InterruptConfig ==
 8002eac:	7dbb      	ldrb	r3, [r7, #22]
 8002eae:	2b01      	cmp	r3, #1
 8002eb0:	d005      	beq.n	8002ebe <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW) ||
 8002eb2:	7dbb      	ldrb	r3, [r7, #22]
 8002eb4:	2b02      	cmp	r3, #2
 8002eb6:	d002      	beq.n	8002ebe <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 8002eb8:	7dbb      	ldrb	r3, [r7, #22]
 8002eba:	2b03      	cmp	r3, #3
 8002ebc:	d147      	bne.n	8002f4e <VL53L0X_CheckAndLoadInterruptSettings+0xba>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT)) {

		Status = VL53L0X_GetInterruptThresholds(Dev,
 8002ebe:	f107 030c 	add.w	r3, r7, #12
 8002ec2:	f107 0210 	add.w	r2, r7, #16
 8002ec6:	2101      	movs	r1, #1
 8002ec8:	6878      	ldr	r0, [r7, #4]
 8002eca:	f000 fb8d 	bl	80035e8 <VL53L0X_GetInterruptThresholds>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	75fb      	strb	r3, [r7, #23]
			VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
			&ThresholdLow, &ThresholdHigh);

		if (((ThresholdLow > 255*65536) ||
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8002ed8:	d803      	bhi.n	8002ee2 <VL53L0X_CheckAndLoadInterruptSettings+0x4e>
			(ThresholdHigh > 255*65536)) &&
 8002eda:	68fb      	ldr	r3, [r7, #12]
		if (((ThresholdLow > 255*65536) ||
 8002edc:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8002ee0:	d935      	bls.n	8002f4e <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(ThresholdHigh > 255*65536)) &&
 8002ee2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d131      	bne.n	8002f4e <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 8002eea:	78fb      	ldrb	r3, [r7, #3]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d006      	beq.n	8002efe <VL53L0X_CheckAndLoadInterruptSettings+0x6a>
				Status = VL53L0X_load_tuning_settings(Dev,
 8002ef0:	491a      	ldr	r1, [pc, #104]	; (8002f5c <VL53L0X_CheckAndLoadInterruptSettings+0xc8>)
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f002 ff20 	bl	8005d38 <VL53L0X_load_tuning_settings>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	75fb      	strb	r3, [r7, #23]
 8002efc:	e027      	b.n	8002f4e <VL53L0X_CheckAndLoadInterruptSettings+0xba>
					InterruptThresholdSettings);
			} else {
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 8002efe:	2204      	movs	r2, #4
 8002f00:	21ff      	movs	r1, #255	; 0xff
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	f003 ff56 	bl	8006db4 <VL53L0X_WrByte>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	461a      	mov	r2, r3
 8002f0c:	7dfb      	ldrb	r3, [r7, #23]
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 8002f12:	2200      	movs	r2, #0
 8002f14:	2170      	movs	r1, #112	; 0x70
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	f003 ff4c 	bl	8006db4 <VL53L0X_WrByte>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	461a      	mov	r2, r3
 8002f20:	7dfb      	ldrb	r3, [r7, #23]
 8002f22:	4313      	orrs	r3, r2
 8002f24:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8002f26:	2200      	movs	r2, #0
 8002f28:	21ff      	movs	r1, #255	; 0xff
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	f003 ff42 	bl	8006db4 <VL53L0X_WrByte>
 8002f30:	4603      	mov	r3, r0
 8002f32:	461a      	mov	r2, r3
 8002f34:	7dfb      	ldrb	r3, [r7, #23]
 8002f36:	4313      	orrs	r3, r2
 8002f38:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	2180      	movs	r1, #128	; 0x80
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f003 ff38 	bl	8006db4 <VL53L0X_WrByte>
 8002f44:	4603      	mov	r3, r0
 8002f46:	461a      	mov	r2, r3
 8002f48:	7dfb      	ldrb	r3, [r7, #23]
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	75fb      	strb	r3, [r7, #23]
		}


	}

	return Status;
 8002f4e:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8002f52:	4618      	mov	r0, r3
 8002f54:	3718      	adds	r7, #24
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}
 8002f5a:	bf00      	nop
 8002f5c:	200002c4 	.word	0x200002c4

08002f60 <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b086      	sub	sp, #24
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8002f70:	f107 030e 	add.w	r3, r7, #14
 8002f74:	4619      	mov	r1, r3
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	f7ff fae0 	bl	800253c <VL53L0X_GetDeviceMode>

	switch (DeviceMode) {
 8002f7c:	7bbb      	ldrb	r3, [r7, #14]
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d035      	beq.n	8002fee <VL53L0X_StartMeasurement+0x8e>
 8002f82:	2b03      	cmp	r3, #3
 8002f84:	d04d      	beq.n	8003022 <VL53L0X_StartMeasurement+0xc2>
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d165      	bne.n	8003056 <VL53L0X_StartMeasurement+0xf6>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	2100      	movs	r1, #0
 8002f8e:	6878      	ldr	r0, [r7, #4]
 8002f90:	f003 ff10 	bl	8006db4 <VL53L0X_WrByte>
 8002f94:	4603      	mov	r3, r0
 8002f96:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 8002f98:	7bfb      	ldrb	r3, [r7, #15]
 8002f9a:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 8002f9c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d15b      	bne.n	800305c <VL53L0X_StartMeasurement+0xfc>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d008      	beq.n	8002fc0 <VL53L0X_StartMeasurement+0x60>
					Status = VL53L0X_RdByte(Dev,
 8002fae:	f107 030d 	add.w	r3, r7, #13
 8002fb2:	461a      	mov	r2, r3
 8002fb4:	2100      	movs	r1, #0
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	f003 fe01 	bl	8006bbe <VL53L0X_RdByte>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	3301      	adds	r3, #1
 8002fc4:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 8002fc6:	7b7a      	ldrb	r2, [r7, #13]
 8002fc8:	7bfb      	ldrb	r3, [r7, #15]
 8002fca:	4013      	ands	r3, r2
 8002fcc:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8002fce:	7bfa      	ldrb	r2, [r7, #15]
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	d106      	bne.n	8002fe2 <VL53L0X_StartMeasurement+0x82>
				&& (Status == VL53L0X_ERROR_NONE)
 8002fd4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d102      	bne.n	8002fe2 <VL53L0X_StartMeasurement+0x82>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	2bc7      	cmp	r3, #199	; 0xc7
 8002fe0:	d9e2      	bls.n	8002fa8 <VL53L0X_StartMeasurement+0x48>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	2bc7      	cmp	r3, #199	; 0xc7
 8002fe6:	d939      	bls.n	800305c <VL53L0X_StartMeasurement+0xfc>
				Status = VL53L0X_ERROR_TIME_OUT;
 8002fe8:	23f9      	movs	r3, #249	; 0xf9
 8002fea:	75fb      	strb	r3, [r7, #23]

		}

		break;
 8002fec:	e036      	b.n	800305c <VL53L0X_StartMeasurement+0xfc>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8002fee:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d105      	bne.n	8003002 <VL53L0X_StartMeasurement+0xa2>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8002ff6:	2101      	movs	r1, #1
 8002ff8:	6878      	ldr	r0, [r7, #4]
 8002ffa:	f7ff ff4b 	bl	8002e94 <VL53L0X_CheckAndLoadInterruptSettings>
 8002ffe:	4603      	mov	r3, r0
 8003000:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8003002:	2202      	movs	r2, #2
 8003004:	2100      	movs	r1, #0
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f003 fed4 	bl	8006db4 <VL53L0X_WrByte>
 800300c:	4603      	mov	r3, r0
 800300e:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 8003010:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d123      	bne.n	8003060 <VL53L0X_StartMeasurement+0x100>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2204      	movs	r2, #4
 800301c:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 8003020:	e01e      	b.n	8003060 <VL53L0X_StartMeasurement+0x100>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8003022:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d105      	bne.n	8003036 <VL53L0X_StartMeasurement+0xd6>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 800302a:	2101      	movs	r1, #1
 800302c:	6878      	ldr	r0, [r7, #4]
 800302e:	f7ff ff31 	bl	8002e94 <VL53L0X_CheckAndLoadInterruptSettings>
 8003032:	4603      	mov	r3, r0
 8003034:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8003036:	2204      	movs	r2, #4
 8003038:	2100      	movs	r1, #0
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	f003 feba 	bl	8006db4 <VL53L0X_WrByte>
 8003040:	4603      	mov	r3, r0
 8003042:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 8003044:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d10b      	bne.n	8003064 <VL53L0X_StartMeasurement+0x104>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2204      	movs	r2, #4
 8003050:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 8003054:	e006      	b.n	8003064 <VL53L0X_StartMeasurement+0x104>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8003056:	23f8      	movs	r3, #248	; 0xf8
 8003058:	75fb      	strb	r3, [r7, #23]
 800305a:	e004      	b.n	8003066 <VL53L0X_StartMeasurement+0x106>
		break;
 800305c:	bf00      	nop
 800305e:	e002      	b.n	8003066 <VL53L0X_StartMeasurement+0x106>
		break;
 8003060:	bf00      	nop
 8003062:	e000      	b.n	8003066 <VL53L0X_StartMeasurement+0x106>
		break;
 8003064:	bf00      	nop
	}


	LOG_FUNCTION_END(Status);
	return Status;
 8003066:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800306a:	4618      	mov	r0, r3
 800306c:	3718      	adds	r7, #24
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}

08003072 <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 8003072:	b580      	push	{r7, lr}
 8003074:	b084      	sub	sp, #16
 8003076:	af00      	add	r7, sp, #0
 8003078:	6078      	str	r0, [r7, #4]
 800307a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800307c:	2300      	movs	r3, #0
 800307e:	73fb      	strb	r3, [r7, #15]
	uint8_t SysRangeStatusRegister;
	uint8_t InterruptConfig;
	uint32_t InterruptMask;
	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 8003086:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 8003088:	7bbb      	ldrb	r3, [r7, #14]
 800308a:	2b04      	cmp	r3, #4
 800308c:	d112      	bne.n	80030b4 <VL53L0X_GetMeasurementDataReady+0x42>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 800308e:	f107 0308 	add.w	r3, r7, #8
 8003092:	4619      	mov	r1, r3
 8003094:	6878      	ldr	r0, [r7, #4]
 8003096:	f000 fb1d 	bl	80036d4 <VL53L0X_GetInterruptMaskStatus>
 800309a:	4603      	mov	r3, r0
 800309c:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	2b04      	cmp	r3, #4
 80030a2:	d103      	bne.n	80030ac <VL53L0X_GetMeasurementDataReady+0x3a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	2201      	movs	r2, #1
 80030a8:	701a      	strb	r2, [r3, #0]
 80030aa:	e01c      	b.n	80030e6 <VL53L0X_GetMeasurementDataReady+0x74>
		else
			*pMeasurementDataReady = 0;
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	2200      	movs	r2, #0
 80030b0:	701a      	strb	r2, [r3, #0]
 80030b2:	e018      	b.n	80030e6 <VL53L0X_GetMeasurementDataReady+0x74>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 80030b4:	f107 030d 	add.w	r3, r7, #13
 80030b8:	461a      	mov	r2, r3
 80030ba:	2114      	movs	r1, #20
 80030bc:	6878      	ldr	r0, [r7, #4]
 80030be:	f003 fd7e 	bl	8006bbe <VL53L0X_RdByte>
 80030c2:	4603      	mov	r3, r0
 80030c4:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 80030c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d10b      	bne.n	80030e6 <VL53L0X_GetMeasurementDataReady+0x74>
			if (SysRangeStatusRegister & 0x01)
 80030ce:	7b7b      	ldrb	r3, [r7, #13]
 80030d0:	f003 0301 	and.w	r3, r3, #1
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d003      	beq.n	80030e0 <VL53L0X_GetMeasurementDataReady+0x6e>
				*pMeasurementDataReady = 1;
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	2201      	movs	r2, #1
 80030dc:	701a      	strb	r2, [r3, #0]
 80030de:	e002      	b.n	80030e6 <VL53L0X_GetMeasurementDataReady+0x74>
			else
				*pMeasurementDataReady = 0;
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	2200      	movs	r2, #0
 80030e4:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80030e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3710      	adds	r7, #16
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}
	...

080030f4 <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 80030f4:	b5b0      	push	{r4, r5, r7, lr}
 80030f6:	b096      	sub	sp, #88	; 0x58
 80030f8:	af02      	add	r7, sp, #8
 80030fa:	6078      	str	r0, [r7, #4]
 80030fc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80030fe:	2300      	movs	r3, #0
 8003100:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 8003104:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003108:	230c      	movs	r3, #12
 800310a:	2114      	movs	r1, #20
 800310c:	6878      	ldr	r0, [r7, #4]
 800310e:	f003 fdb1 	bl	8006c74 <VL53L0X_ReadMulti>
 8003112:	4603      	mov	r3, r0
 8003114:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 8003118:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800311c:	2b00      	cmp	r3, #0
 800311e:	f040 80d2 	bne.w	80032c6 <VL53L0X_GetRangingMeasurementData+0x1d2>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	2200      	movs	r2, #0
 8003126:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	2200      	movs	r2, #0
 800312c:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 800312e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8003132:	b29b      	uxth	r3, r3
 8003134:	021b      	lsls	r3, r3, #8
 8003136:	b29a      	uxth	r2, r3
 8003138:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800313c:	b29b      	uxth	r3, r3
 800313e:	4413      	add	r3, r2
 8003140:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	2200      	movs	r2, #0
 8003148:	605a      	str	r2, [r3, #4]

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 800314a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800314e:	b29b      	uxth	r3, r3
 8003150:	021b      	lsls	r3, r3, #8
 8003152:	b29a      	uxth	r2, r3
 8003154:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003158:	b29b      	uxth	r3, r3
 800315a:	4413      	add	r3, r2
 800315c:	b29b      	uxth	r3, r3
 800315e:	025b      	lsls	r3, r3, #9
 8003160:	647b      	str	r3, [r7, #68]	; 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003166:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 8003168:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800316c:	b29b      	uxth	r3, r3
 800316e:	021b      	lsls	r3, r3, #8
 8003170:	b29a      	uxth	r2, r3
 8003172:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8003176:	b29b      	uxth	r3, r3
 8003178:	4413      	add	r3, r2
 800317a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 800317e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003182:	025b      	lsls	r3, r3, #9
 8003184:	461a      	mov	r2, r3
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 800318a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800318e:	b29b      	uxth	r3, r3
 8003190:	021b      	lsls	r3, r3, #8
 8003192:	b29a      	uxth	r2, r3
 8003194:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003198:	b29b      	uxth	r3, r3
 800319a:	4413      	add	r3, r2
 800319c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80031a6:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 80031a8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80031ac:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	f8b3 314e 	ldrh.w	r3, [r3, #334]	; 0x14e
 80031b6:	87bb      	strh	r3, [r7, #60]	; 0x3c
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 80031be:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 80031c2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80031c4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80031c8:	d047      	beq.n	800325a <VL53L0X_GetRangingMeasurementData+0x166>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 80031ca:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80031cc:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 80031d0:	fb02 f303 	mul.w	r3, r2, r3
 80031d4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80031d8:	4a58      	ldr	r2, [pc, #352]	; (800333c <VL53L0X_GetRangingMeasurementData+0x248>)
 80031da:	fb82 1203 	smull	r1, r2, r2, r3
 80031de:	1192      	asrs	r2, r2, #6
 80031e0:	17db      	asrs	r3, r3, #31
 80031e2:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 80031e4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6a1b      	ldr	r3, [r3, #32]
 80031ec:	873b      	strh	r3, [r7, #56]	; 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	7f1b      	ldrb	r3, [r3, #28]
 80031f2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 80031f6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d02d      	beq.n	800325a <VL53L0X_GetRangingMeasurementData+0x166>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 80031fe:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003200:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8003204:	fb02 f303 	mul.w	r3, r2, r3
 8003208:	121b      	asrs	r3, r3, #8
 800320a:	461a      	mov	r2, r3
				if ((SignalRate
 800320c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800320e:	4293      	cmp	r3, r2
 8003210:	d10d      	bne.n	800322e <VL53L0X_GetRangingMeasurementData+0x13a>
					<= 0) {
					if (RangeFractionalEnable)
 8003212:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8003216:	2b00      	cmp	r3, #0
 8003218:	d004      	beq.n	8003224 <VL53L0X_GetRangingMeasurementData+0x130>
						XtalkRangeMilliMeter = 8888;
 800321a:	f242 23b8 	movw	r3, #8888	; 0x22b8
 800321e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8003222:	e016      	b.n	8003252 <VL53L0X_GetRangingMeasurementData+0x15e>
					else
						XtalkRangeMilliMeter = 8888
 8003224:	f648 23e0 	movw	r3, #35552	; 0x8ae0
 8003228:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800322c:	e011      	b.n	8003252 <VL53L0X_GetRangingMeasurementData+0x15e>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 800322e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8003232:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003234:	fb02 f203 	mul.w	r2, r2, r3
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 8003238:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800323a:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 800323e:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 8003242:	121b      	asrs	r3, r3, #8
 8003244:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 8003246:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003248:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 800324a:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 800324e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 8003252:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003256:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			}

		}

		if (RangeFractionalEnable) {
 800325a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800325e:	2b00      	cmp	r3, #0
 8003260:	d00d      	beq.n	800327e <VL53L0X_GetRangingMeasurementData+0x18a>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 8003262:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8003266:	089b      	lsrs	r3, r3, #2
 8003268:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 800326e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8003272:	b2db      	uxtb	r3, r3
 8003274:	019b      	lsls	r3, r3, #6
 8003276:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	75da      	strb	r2, [r3, #23]
 800327c:	e006      	b.n	800328c <VL53L0X_GetRangingMeasurementData+0x198>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8003284:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	2200      	movs	r2, #0
 800328a:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 800328c:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8003290:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 8003294:	f107 0336 	add.w	r3, r7, #54	; 0x36
 8003298:	9301      	str	r3, [sp, #4]
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	9300      	str	r3, [sp, #0]
 800329e:	4613      	mov	r3, r2
 80032a0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80032a2:	6878      	ldr	r0, [r7, #4]
 80032a4:	f003 f9b6 	bl	8006614 <VL53L0X_get_pal_range_status>
 80032a8:	4603      	mov	r3, r0
 80032aa:	461a      	mov	r2, r3
 80032ac:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80032b0:	4313      	orrs	r3, r2
 80032b2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 80032b6:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d103      	bne.n	80032c6 <VL53L0X_GetRangingMeasurementData+0x1d2>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 80032be:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 80032c6:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d12f      	bne.n	800332e <VL53L0X_GetRangingMeasurementData+0x23a>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	f107 040c 	add.w	r4, r7, #12
 80032d4:	f103 0550 	add.w	r5, r3, #80	; 0x50
 80032d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80032da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80032dc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80032e0:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 80032e8:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 80032ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 80032f6:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 80032fc:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 8003302:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 8003308:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 800330e:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 8003314:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	f103 0450 	add.w	r4, r3, #80	; 0x50
 800331e:	f107 050c 	add.w	r5, r7, #12
 8003322:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003324:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003326:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800332a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800332e:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 8003332:	4618      	mov	r0, r3
 8003334:	3750      	adds	r7, #80	; 0x50
 8003336:	46bd      	mov	sp, r7
 8003338:	bdb0      	pop	{r4, r5, r7, pc}
 800333a:	bf00      	nop
 800333c:	10624dd3 	.word	0x10624dd3

08003340 <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b084      	sub	sp, #16
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
 8003348:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800334a:	2300      	movs	r3, #0
 800334c:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode! */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 800334e:	2100      	movs	r1, #0
 8003350:	6878      	ldr	r0, [r7, #4]
 8003352:	f7ff f8ab 	bl	80024ac <VL53L0X_SetDeviceMode>
 8003356:	4603      	mov	r3, r0
 8003358:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800335a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d104      	bne.n	800336c <VL53L0X_PerformSingleRangingMeasurement+0x2c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f7ff fd4c 	bl	8002e00 <VL53L0X_PerformSingleMeasurement>
 8003368:	4603      	mov	r3, r0
 800336a:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 800336c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d105      	bne.n	8003380 <VL53L0X_PerformSingleRangingMeasurement+0x40>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 8003374:	6839      	ldr	r1, [r7, #0]
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f7ff febc 	bl	80030f4 <VL53L0X_GetRangingMeasurementData>
 800337c:	4603      	mov	r3, r0
 800337e:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 8003380:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d105      	bne.n	8003394 <VL53L0X_PerformSingleRangingMeasurement+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8003388:	2100      	movs	r1, #0
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f000 f962 	bl	8003654 <VL53L0X_ClearInterruptMask>
 8003390:	4603      	mov	r3, r0
 8003392:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(Status);
	return Status;
 8003394:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003398:	4618      	mov	r0, r3
 800339a:	3710      	adds	r7, #16
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}

080033a0 <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
	VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
	VL53L0X_InterruptPolarity Polarity)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b084      	sub	sp, #16
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
 80033a8:	4608      	mov	r0, r1
 80033aa:	4611      	mov	r1, r2
 80033ac:	461a      	mov	r2, r3
 80033ae:	4603      	mov	r3, r0
 80033b0:	70fb      	strb	r3, [r7, #3]
 80033b2:	460b      	mov	r3, r1
 80033b4:	70bb      	strb	r3, [r7, #2]
 80033b6:	4613      	mov	r3, r2
 80033b8:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80033ba:	2300      	movs	r3, #0
 80033bc:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	if (Pin != 0) {
 80033be:	78fb      	ldrb	r3, [r7, #3]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d002      	beq.n	80033ca <VL53L0X_SetGpioConfig+0x2a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 80033c4:	23f6      	movs	r3, #246	; 0xf6
 80033c6:	73fb      	strb	r3, [r7, #15]
 80033c8:	e107      	b.n	80035da <VL53L0X_SetGpioConfig+0x23a>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 80033ca:	78bb      	ldrb	r3, [r7, #2]
 80033cc:	2b14      	cmp	r3, #20
 80033ce:	d110      	bne.n	80033f2 <VL53L0X_SetGpioConfig+0x52>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 80033d0:	7e3b      	ldrb	r3, [r7, #24]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d102      	bne.n	80033dc <VL53L0X_SetGpioConfig+0x3c>
			data = 0x10;
 80033d6:	2310      	movs	r3, #16
 80033d8:	73bb      	strb	r3, [r7, #14]
 80033da:	e001      	b.n	80033e0 <VL53L0X_SetGpioConfig+0x40>
		else
			data = 1;
 80033dc:	2301      	movs	r3, #1
 80033de:	73bb      	strb	r3, [r7, #14]

		Status = VL53L0X_WrByte(Dev,
 80033e0:	7bbb      	ldrb	r3, [r7, #14]
 80033e2:	461a      	mov	r2, r3
 80033e4:	2184      	movs	r1, #132	; 0x84
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f003 fce4 	bl	8006db4 <VL53L0X_WrByte>
 80033ec:	4603      	mov	r3, r0
 80033ee:	73fb      	strb	r3, [r7, #15]
 80033f0:	e0f3      	b.n	80035da <VL53L0X_SetGpioConfig+0x23a>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 80033f2:	78bb      	ldrb	r3, [r7, #2]
 80033f4:	2b15      	cmp	r3, #21
 80033f6:	f040 8097 	bne.w	8003528 <VL53L0X_SetGpioConfig+0x188>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 80033fa:	2201      	movs	r2, #1
 80033fc:	21ff      	movs	r1, #255	; 0xff
 80033fe:	6878      	ldr	r0, [r7, #4]
 8003400:	f003 fcd8 	bl	8006db4 <VL53L0X_WrByte>
 8003404:	4603      	mov	r3, r0
 8003406:	461a      	mov	r2, r3
 8003408:	7bfb      	ldrb	r3, [r7, #15]
 800340a:	4313      	orrs	r3, r2
 800340c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800340e:	2200      	movs	r2, #0
 8003410:	2100      	movs	r1, #0
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f003 fcce 	bl	8006db4 <VL53L0X_WrByte>
 8003418:	4603      	mov	r3, r0
 800341a:	461a      	mov	r2, r3
 800341c:	7bfb      	ldrb	r3, [r7, #15]
 800341e:	4313      	orrs	r3, r2
 8003420:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8003422:	2200      	movs	r2, #0
 8003424:	21ff      	movs	r1, #255	; 0xff
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	f003 fcc4 	bl	8006db4 <VL53L0X_WrByte>
 800342c:	4603      	mov	r3, r0
 800342e:	461a      	mov	r2, r3
 8003430:	7bfb      	ldrb	r3, [r7, #15]
 8003432:	4313      	orrs	r3, r2
 8003434:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8003436:	2201      	movs	r2, #1
 8003438:	2180      	movs	r1, #128	; 0x80
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f003 fcba 	bl	8006db4 <VL53L0X_WrByte>
 8003440:	4603      	mov	r3, r0
 8003442:	461a      	mov	r2, r3
 8003444:	7bfb      	ldrb	r3, [r7, #15]
 8003446:	4313      	orrs	r3, r2
 8003448:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 800344a:	2202      	movs	r2, #2
 800344c:	2185      	movs	r1, #133	; 0x85
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f003 fcb0 	bl	8006db4 <VL53L0X_WrByte>
 8003454:	4603      	mov	r3, r0
 8003456:	461a      	mov	r2, r3
 8003458:	7bfb      	ldrb	r3, [r7, #15]
 800345a:	4313      	orrs	r3, r2
 800345c:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 800345e:	2204      	movs	r2, #4
 8003460:	21ff      	movs	r1, #255	; 0xff
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	f003 fca6 	bl	8006db4 <VL53L0X_WrByte>
 8003468:	4603      	mov	r3, r0
 800346a:	461a      	mov	r2, r3
 800346c:	7bfb      	ldrb	r3, [r7, #15]
 800346e:	4313      	orrs	r3, r2
 8003470:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 8003472:	2200      	movs	r2, #0
 8003474:	21cd      	movs	r1, #205	; 0xcd
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f003 fc9c 	bl	8006db4 <VL53L0X_WrByte>
 800347c:	4603      	mov	r3, r0
 800347e:	461a      	mov	r2, r3
 8003480:	7bfb      	ldrb	r3, [r7, #15]
 8003482:	4313      	orrs	r3, r2
 8003484:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 8003486:	2211      	movs	r2, #17
 8003488:	21cc      	movs	r1, #204	; 0xcc
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	f003 fc92 	bl	8006db4 <VL53L0X_WrByte>
 8003490:	4603      	mov	r3, r0
 8003492:	461a      	mov	r2, r3
 8003494:	7bfb      	ldrb	r3, [r7, #15]
 8003496:	4313      	orrs	r3, r2
 8003498:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 800349a:	2207      	movs	r2, #7
 800349c:	21ff      	movs	r1, #255	; 0xff
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f003 fc88 	bl	8006db4 <VL53L0X_WrByte>
 80034a4:	4603      	mov	r3, r0
 80034a6:	461a      	mov	r2, r3
 80034a8:	7bfb      	ldrb	r3, [r7, #15]
 80034aa:	4313      	orrs	r3, r2
 80034ac:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 80034ae:	2200      	movs	r2, #0
 80034b0:	21be      	movs	r1, #190	; 0xbe
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f003 fc7e 	bl	8006db4 <VL53L0X_WrByte>
 80034b8:	4603      	mov	r3, r0
 80034ba:	461a      	mov	r2, r3
 80034bc:	7bfb      	ldrb	r3, [r7, #15]
 80034be:	4313      	orrs	r3, r2
 80034c0:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 80034c2:	2206      	movs	r2, #6
 80034c4:	21ff      	movs	r1, #255	; 0xff
 80034c6:	6878      	ldr	r0, [r7, #4]
 80034c8:	f003 fc74 	bl	8006db4 <VL53L0X_WrByte>
 80034cc:	4603      	mov	r3, r0
 80034ce:	461a      	mov	r2, r3
 80034d0:	7bfb      	ldrb	r3, [r7, #15]
 80034d2:	4313      	orrs	r3, r2
 80034d4:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 80034d6:	2209      	movs	r2, #9
 80034d8:	21cc      	movs	r1, #204	; 0xcc
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	f003 fc6a 	bl	8006db4 <VL53L0X_WrByte>
 80034e0:	4603      	mov	r3, r0
 80034e2:	461a      	mov	r2, r3
 80034e4:	7bfb      	ldrb	r3, [r7, #15]
 80034e6:	4313      	orrs	r3, r2
 80034e8:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80034ea:	2200      	movs	r2, #0
 80034ec:	21ff      	movs	r1, #255	; 0xff
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f003 fc60 	bl	8006db4 <VL53L0X_WrByte>
 80034f4:	4603      	mov	r3, r0
 80034f6:	461a      	mov	r2, r3
 80034f8:	7bfb      	ldrb	r3, [r7, #15]
 80034fa:	4313      	orrs	r3, r2
 80034fc:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 80034fe:	2201      	movs	r2, #1
 8003500:	21ff      	movs	r1, #255	; 0xff
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	f003 fc56 	bl	8006db4 <VL53L0X_WrByte>
 8003508:	4603      	mov	r3, r0
 800350a:	461a      	mov	r2, r3
 800350c:	7bfb      	ldrb	r3, [r7, #15]
 800350e:	4313      	orrs	r3, r2
 8003510:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8003512:	2200      	movs	r2, #0
 8003514:	2100      	movs	r1, #0
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	f003 fc4c 	bl	8006db4 <VL53L0X_WrByte>
 800351c:	4603      	mov	r3, r0
 800351e:	461a      	mov	r2, r3
 8003520:	7bfb      	ldrb	r3, [r7, #15]
 8003522:	4313      	orrs	r3, r2
 8003524:	73fb      	strb	r3, [r7, #15]
 8003526:	e058      	b.n	80035da <VL53L0X_SetGpioConfig+0x23a>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 8003528:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d121      	bne.n	8003574 <VL53L0X_SetGpioConfig+0x1d4>
			switch (Functionality) {
 8003530:	787b      	ldrb	r3, [r7, #1]
 8003532:	2b04      	cmp	r3, #4
 8003534:	d81b      	bhi.n	800356e <VL53L0X_SetGpioConfig+0x1ce>
 8003536:	a201      	add	r2, pc, #4	; (adr r2, 800353c <VL53L0X_SetGpioConfig+0x19c>)
 8003538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800353c:	08003551 	.word	0x08003551
 8003540:	08003557 	.word	0x08003557
 8003544:	0800355d 	.word	0x0800355d
 8003548:	08003563 	.word	0x08003563
 800354c:	08003569 	.word	0x08003569
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 8003550:	2300      	movs	r3, #0
 8003552:	73bb      	strb	r3, [r7, #14]
				break;
 8003554:	e00f      	b.n	8003576 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 8003556:	2301      	movs	r3, #1
 8003558:	73bb      	strb	r3, [r7, #14]
				break;
 800355a:	e00c      	b.n	8003576 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 800355c:	2302      	movs	r3, #2
 800355e:	73bb      	strb	r3, [r7, #14]
				break;
 8003560:	e009      	b.n	8003576 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 8003562:	2303      	movs	r3, #3
 8003564:	73bb      	strb	r3, [r7, #14]
				break;
 8003566:	e006      	b.n	8003576 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 8003568:	2304      	movs	r3, #4
 800356a:	73bb      	strb	r3, [r7, #14]
				break;
 800356c:	e003      	b.n	8003576 <VL53L0X_SetGpioConfig+0x1d6>
			default:
				Status =
 800356e:	23f5      	movs	r3, #245	; 0xf5
 8003570:	73fb      	strb	r3, [r7, #15]
 8003572:	e000      	b.n	8003576 <VL53L0X_SetGpioConfig+0x1d6>
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}
 8003574:	bf00      	nop

		if (Status == VL53L0X_ERROR_NONE)
 8003576:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d107      	bne.n	800358e <VL53L0X_SetGpioConfig+0x1ee>
			Status = VL53L0X_WrByte(Dev,
 800357e:	7bbb      	ldrb	r3, [r7, #14]
 8003580:	461a      	mov	r2, r3
 8003582:	210a      	movs	r1, #10
 8003584:	6878      	ldr	r0, [r7, #4]
 8003586:	f003 fc15 	bl	8006db4 <VL53L0X_WrByte>
 800358a:	4603      	mov	r3, r0
 800358c:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 800358e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d10f      	bne.n	80035b6 <VL53L0X_SetGpioConfig+0x216>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 8003596:	7e3b      	ldrb	r3, [r7, #24]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d102      	bne.n	80035a2 <VL53L0X_SetGpioConfig+0x202>
				data = 0;
 800359c:	2300      	movs	r3, #0
 800359e:	73bb      	strb	r3, [r7, #14]
 80035a0:	e001      	b.n	80035a6 <VL53L0X_SetGpioConfig+0x206>
			else
				data = (uint8_t)(1 << 4);
 80035a2:	2310      	movs	r3, #16
 80035a4:	73bb      	strb	r3, [r7, #14]

			Status = VL53L0X_UpdateByte(Dev,
 80035a6:	7bbb      	ldrb	r3, [r7, #14]
 80035a8:	22ef      	movs	r2, #239	; 0xef
 80035aa:	2184      	movs	r1, #132	; 0x84
 80035ac:	6878      	ldr	r0, [r7, #4]
 80035ae:	f003 fc4f 	bl	8006e50 <VL53L0X_UpdateByte>
 80035b2:	4603      	mov	r3, r0
 80035b4:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 80035b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d103      	bne.n	80035c6 <VL53L0X_SetGpioConfig+0x226>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	787a      	ldrb	r2, [r7, #1]
 80035c2:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 80035c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d105      	bne.n	80035da <VL53L0X_SetGpioConfig+0x23a>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 80035ce:	2100      	movs	r1, #0
 80035d0:	6878      	ldr	r0, [r7, #4]
 80035d2:	f000 f83f 	bl	8003654 <VL53L0X_ClearInterruptMask>
 80035d6:	4603      	mov	r3, r0
 80035d8:	73fb      	strb	r3, [r7, #15]

	}

	LOG_FUNCTION_END(Status);
	return Status;
 80035da:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80035de:	4618      	mov	r0, r3
 80035e0:	3710      	adds	r7, #16
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}
 80035e6:	bf00      	nop

080035e8 <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b086      	sub	sp, #24
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	60f8      	str	r0, [r7, #12]
 80035f0:	607a      	str	r2, [r7, #4]
 80035f2:	603b      	str	r3, [r7, #0]
 80035f4:	460b      	mov	r3, r1
 80035f6:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80035f8:	2300      	movs	r3, #0
 80035fa:	75fb      	strb	r3, [r7, #23]
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 80035fc:	f107 0314 	add.w	r3, r7, #20
 8003600:	461a      	mov	r2, r3
 8003602:	210e      	movs	r1, #14
 8003604:	68f8      	ldr	r0, [r7, #12]
 8003606:	f003 fb61 	bl	8006ccc <VL53L0X_RdWord>
 800360a:	4603      	mov	r3, r0
 800360c:	75fb      	strb	r3, [r7, #23]
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 800360e:	8abb      	ldrh	r3, [r7, #20]
 8003610:	045b      	lsls	r3, r3, #17
 8003612:	461a      	mov	r2, r3
 8003614:	4b0e      	ldr	r3, [pc, #56]	; (8003650 <VL53L0X_GetInterruptThresholds+0x68>)
 8003616:	4013      	ands	r3, r2
 8003618:	687a      	ldr	r2, [r7, #4]
 800361a:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 800361c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d10f      	bne.n	8003644 <VL53L0X_GetInterruptThresholds+0x5c>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 8003624:	f107 0314 	add.w	r3, r7, #20
 8003628:	461a      	mov	r2, r3
 800362a:	210c      	movs	r1, #12
 800362c:	68f8      	ldr	r0, [r7, #12]
 800362e:	f003 fb4d 	bl	8006ccc <VL53L0X_RdWord>
 8003632:	4603      	mov	r3, r0
 8003634:	75fb      	strb	r3, [r7, #23]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8003636:	8abb      	ldrh	r3, [r7, #20]
 8003638:	045b      	lsls	r3, r3, #17
 800363a:	461a      	mov	r2, r3
 800363c:	4b04      	ldr	r3, [pc, #16]	; (8003650 <VL53L0X_GetInterruptThresholds+0x68>)
 800363e:	4013      	ands	r3, r2
		*pThresholdHigh =
 8003640:	683a      	ldr	r2, [r7, #0]
 8003642:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003644:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003648:	4618      	mov	r0, r3
 800364a:	3718      	adds	r7, #24
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}
 8003650:	1ffe0000 	.word	0x1ffe0000

08003654 <VL53L0X_ClearInterruptMask>:
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b084      	sub	sp, #16
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
 800365c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800365e:	2300      	movs	r3, #0
 8003660:	73fb      	strb	r3, [r7, #15]
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 8003662:	2300      	movs	r3, #0
 8003664:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 8003666:	2201      	movs	r2, #1
 8003668:	210b      	movs	r1, #11
 800366a:	6878      	ldr	r0, [r7, #4]
 800366c:	f003 fba2 	bl	8006db4 <VL53L0X_WrByte>
 8003670:	4603      	mov	r3, r0
 8003672:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 8003674:	2200      	movs	r2, #0
 8003676:	210b      	movs	r1, #11
 8003678:	6878      	ldr	r0, [r7, #4]
 800367a:	f003 fb9b 	bl	8006db4 <VL53L0X_WrByte>
 800367e:	4603      	mov	r3, r0
 8003680:	461a      	mov	r2, r3
 8003682:	7bfb      	ldrb	r3, [r7, #15]
 8003684:	4313      	orrs	r3, r2
 8003686:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 8003688:	f107 030d 	add.w	r3, r7, #13
 800368c:	461a      	mov	r2, r3
 800368e:	2113      	movs	r1, #19
 8003690:	6878      	ldr	r0, [r7, #4]
 8003692:	f003 fa94 	bl	8006bbe <VL53L0X_RdByte>
 8003696:	4603      	mov	r3, r0
 8003698:	461a      	mov	r2, r3
 800369a:	7bfb      	ldrb	r3, [r7, #15]
 800369c:	4313      	orrs	r3, r2
 800369e:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 80036a0:	7bbb      	ldrb	r3, [r7, #14]
 80036a2:	3301      	adds	r3, #1
 80036a4:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 80036a6:	7b7b      	ldrb	r3, [r7, #13]
 80036a8:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d006      	beq.n	80036be <VL53L0X_ClearInterruptMask+0x6a>
			&& (LoopCount < 3)
 80036b0:	7bbb      	ldrb	r3, [r7, #14]
 80036b2:	2b02      	cmp	r3, #2
 80036b4:	d803      	bhi.n	80036be <VL53L0X_ClearInterruptMask+0x6a>
			&& (Status == VL53L0X_ERROR_NONE));
 80036b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d0d3      	beq.n	8003666 <VL53L0X_ClearInterruptMask+0x12>


	if (LoopCount >= 3)
 80036be:	7bbb      	ldrb	r3, [r7, #14]
 80036c0:	2b02      	cmp	r3, #2
 80036c2:	d901      	bls.n	80036c8 <VL53L0X_ClearInterruptMask+0x74>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 80036c4:	23f4      	movs	r3, #244	; 0xf4
 80036c6:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 80036c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	3710      	adds	r7, #16
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd80      	pop	{r7, pc}

080036d4 <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b084      	sub	sp, #16
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
 80036dc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80036de:	2300      	movs	r3, #0
 80036e0:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 80036e2:	f107 030e 	add.w	r3, r7, #14
 80036e6:	461a      	mov	r2, r3
 80036e8:	2113      	movs	r1, #19
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	f003 fa67 	bl	8006bbe <VL53L0X_RdByte>
 80036f0:	4603      	mov	r3, r0
 80036f2:	73fb      	strb	r3, [r7, #15]
	*pInterruptMaskStatus = Byte & 0x07;
 80036f4:	7bbb      	ldrb	r3, [r7, #14]
 80036f6:	f003 0207 	and.w	r2, r3, #7
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 80036fe:	7bbb      	ldrb	r3, [r7, #14]
 8003700:	f003 0318 	and.w	r3, r3, #24
 8003704:	2b00      	cmp	r3, #0
 8003706:	d001      	beq.n	800370c <VL53L0X_GetInterruptMaskStatus+0x38>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 8003708:	23fa      	movs	r3, #250	; 0xfa
 800370a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 800370c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003710:	4618      	mov	r0, r3
 8003712:	3710      	adds	r7, #16
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}

08003718 <VL53L0X_PerformRefSpadManagement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b086      	sub	sp, #24
 800371c:	af00      	add	r7, sp, #0
 800371e:	60f8      	str	r0, [r7, #12]
 8003720:	60b9      	str	r1, [r7, #8]
 8003722:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003724:	2300      	movs	r3, #0
 8003726:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 8003728:	687a      	ldr	r2, [r7, #4]
 800372a:	68b9      	ldr	r1, [r7, #8]
 800372c:	68f8      	ldr	r0, [r7, #12]
 800372e:	f000 fa03 	bl	8003b38 <VL53L0X_perform_ref_spad_management>
 8003732:	4603      	mov	r3, r0
 8003734:	75fb      	strb	r3, [r7, #23]
		isApertureSpads);

	LOG_FUNCTION_END(Status);

	return Status;
 8003736:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800373a:	4618      	mov	r0, r3
 800373c:	3718      	adds	r7, #24
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}

08003742 <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 8003742:	b580      	push	{r7, lr}
 8003744:	b084      	sub	sp, #16
 8003746:	af00      	add	r7, sp, #0
 8003748:	6078      	str	r0, [r7, #4]
 800374a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800374c:	2300      	movs	r3, #0
 800374e:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 8003750:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8003754:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 8003756:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800375a:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 800375c:	f107 0308 	add.w	r3, r7, #8
 8003760:	461a      	mov	r2, r3
 8003762:	2128      	movs	r1, #40	; 0x28
 8003764:	6878      	ldr	r0, [r7, #4]
 8003766:	f003 fab1 	bl	8006ccc <VL53L0X_RdWord>
 800376a:	4603      	mov	r3, r0
 800376c:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 800376e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d11e      	bne.n	80037b4 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 8003776:	893b      	ldrh	r3, [r7, #8]
 8003778:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800377c:	b29b      	uxth	r3, r3
 800377e:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 8003780:	893b      	ldrh	r3, [r7, #8]
 8003782:	461a      	mov	r2, r3
 8003784:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003788:	429a      	cmp	r2, r3
 800378a:	dd0b      	ble.n	80037a4 <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 800378c:	893a      	ldrh	r2, [r7, #8]
 800378e:	897b      	ldrh	r3, [r7, #10]
 8003790:	1ad3      	subs	r3, r2, r3
 8003792:	b29b      	uxth	r3, r3
 8003794:	b21b      	sxth	r3, r3
 8003796:	461a      	mov	r2, r3
					* 250;
 8003798:	23fa      	movs	r3, #250	; 0xfa
 800379a:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	601a      	str	r2, [r3, #0]
 80037a2:	e007      	b.n	80037b4 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 80037a4:	893b      	ldrh	r3, [r7, #8]
 80037a6:	b21b      	sxth	r3, r3
 80037a8:	461a      	mov	r2, r3
 80037aa:	23fa      	movs	r3, #250	; 0xfa
 80037ac:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	601a      	str	r2, [r3, #0]

	}

	return Status;
 80037b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	3710      	adds	r7, #16
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}

080037c0 <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b08b      	sub	sp, #44	; 0x2c
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	60f8      	str	r0, [r7, #12]
 80037c8:	60b9      	str	r1, [r7, #8]
 80037ca:	607a      	str	r2, [r7, #4]
 80037cc:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 80037ce:	2308      	movs	r3, #8
 80037d0:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 80037d2:	2300      	movs	r3, #0
 80037d4:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	f04f 32ff 	mov.w	r2, #4294967295
 80037dc:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 80037de:	687a      	ldr	r2, [r7, #4]
 80037e0:	69bb      	ldr	r3, [r7, #24]
 80037e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80037e6:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	69ba      	ldr	r2, [r7, #24]
 80037ec:	fbb3 f2f2 	udiv	r2, r3, r2
 80037f0:	69b9      	ldr	r1, [r7, #24]
 80037f2:	fb01 f202 	mul.w	r2, r1, r2
 80037f6:	1a9b      	subs	r3, r3, r2
 80037f8:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	627b      	str	r3, [r7, #36]	; 0x24
 80037fe:	e030      	b.n	8003862 <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 8003800:	2300      	movs	r3, #0
 8003802:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 8003804:	68fa      	ldr	r2, [r7, #12]
 8003806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003808:	4413      	add	r3, r2
 800380a:	781b      	ldrb	r3, [r3, #0]
 800380c:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 800380e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	429a      	cmp	r2, r3
 8003814:	d11e      	bne.n	8003854 <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating */
			dataByte >>= fineOffset;
 8003816:	7ffa      	ldrb	r2, [r7, #31]
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	fa42 f303 	asr.w	r3, r2, r3
 800381e:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 8003824:	e016      	b.n	8003854 <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 8003826:	7ffb      	ldrb	r3, [r7, #31]
 8003828:	f003 0301 	and.w	r3, r3, #1
 800382c:	2b00      	cmp	r3, #0
 800382e:	d00b      	beq.n	8003848 <get_next_good_spad+0x88>
				success = 1;
 8003830:	2301      	movs	r3, #1
 8003832:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 8003834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003836:	69ba      	ldr	r2, [r7, #24]
 8003838:	fb02 f203 	mul.w	r2, r2, r3
 800383c:	6a3b      	ldr	r3, [r7, #32]
 800383e:	4413      	add	r3, r2
 8003840:	461a      	mov	r2, r3
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	601a      	str	r2, [r3, #0]
				break;
 8003846:	e009      	b.n	800385c <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 8003848:	7ffb      	ldrb	r3, [r7, #31]
 800384a:	085b      	lsrs	r3, r3, #1
 800384c:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 800384e:	6a3b      	ldr	r3, [r7, #32]
 8003850:	3301      	adds	r3, #1
 8003852:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 8003854:	6a3a      	ldr	r2, [r7, #32]
 8003856:	69bb      	ldr	r3, [r7, #24]
 8003858:	429a      	cmp	r2, r3
 800385a:	d3e4      	bcc.n	8003826 <get_next_good_spad+0x66>
				coarseIndex++) {
 800385c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800385e:	3301      	adds	r3, #1
 8003860:	627b      	str	r3, [r7, #36]	; 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8003862:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	429a      	cmp	r2, r3
 8003868:	d202      	bcs.n	8003870 <get_next_good_spad+0xb0>
 800386a:	7fbb      	ldrb	r3, [r7, #30]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d0c7      	beq.n	8003800 <get_next_good_spad+0x40>
		}
	}
}
 8003870:	bf00      	nop
 8003872:	372c      	adds	r7, #44	; 0x2c
 8003874:	46bd      	mov	sp, r7
 8003876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387a:	4770      	bx	lr

0800387c <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 800387c:	b480      	push	{r7}
 800387e:	b085      	sub	sp, #20
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 8003884:	2301      	movs	r3, #1
 8003886:	73fb      	strb	r3, [r7, #15]
	quadrant = spadIndex >> 6;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	099b      	lsrs	r3, r3, #6
 800388c:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 800388e:	4a07      	ldr	r2, [pc, #28]	; (80038ac <is_aperture+0x30>)
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d101      	bne.n	800389e <is_aperture+0x22>
		isAperture = 0;
 800389a:	2300      	movs	r3, #0
 800389c:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 800389e:	7bfb      	ldrb	r3, [r7, #15]
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	3714      	adds	r7, #20
 80038a4:	46bd      	mov	sp, r7
 80038a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038aa:	4770      	bx	lr
 80038ac:	2000047c 	.word	0x2000047c

080038b0 <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b089      	sub	sp, #36	; 0x24
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	60f8      	str	r0, [r7, #12]
 80038b8:	60b9      	str	r1, [r7, #8]
 80038ba:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 80038bc:	2300      	movs	r3, #0
 80038be:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 80038c0:	2308      	movs	r3, #8
 80038c2:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 80038c4:	687a      	ldr	r2, [r7, #4]
 80038c6:	69bb      	ldr	r3, [r7, #24]
 80038c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80038cc:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	69ba      	ldr	r2, [r7, #24]
 80038d2:	fbb3 f2f2 	udiv	r2, r3, r2
 80038d6:	69b9      	ldr	r1, [r7, #24]
 80038d8:	fb01 f202 	mul.w	r2, r1, r2
 80038dc:	1a9b      	subs	r3, r3, r2
 80038de:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 80038e0:	697a      	ldr	r2, [r7, #20]
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	429a      	cmp	r2, r3
 80038e6:	d302      	bcc.n	80038ee <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 80038e8:	23ce      	movs	r3, #206	; 0xce
 80038ea:	77fb      	strb	r3, [r7, #31]
 80038ec:	e010      	b.n	8003910 <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 80038ee:	68fa      	ldr	r2, [r7, #12]
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	4413      	add	r3, r2
 80038f4:	781b      	ldrb	r3, [r3, #0]
 80038f6:	b25a      	sxtb	r2, r3
 80038f8:	2101      	movs	r1, #1
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	fa01 f303 	lsl.w	r3, r1, r3
 8003900:	b25b      	sxtb	r3, r3
 8003902:	4313      	orrs	r3, r2
 8003904:	b259      	sxtb	r1, r3
 8003906:	68fa      	ldr	r2, [r7, #12]
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	4413      	add	r3, r2
 800390c:	b2ca      	uxtb	r2, r1
 800390e:	701a      	strb	r2, [r3, #0]

	return status;
 8003910:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8003914:	4618      	mov	r0, r3
 8003916:	3724      	adds	r7, #36	; 0x24
 8003918:	46bd      	mov	sp, r7
 800391a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391e:	4770      	bx	lr

08003920 <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b084      	sub	sp, #16
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
 8003928:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 800392a:	2306      	movs	r3, #6
 800392c:	683a      	ldr	r2, [r7, #0]
 800392e:	21b0      	movs	r1, #176	; 0xb0
 8003930:	6878      	ldr	r0, [r7, #4]
 8003932:	f003 f96f 	bl	8006c14 <VL53L0X_WriteMulti>
 8003936:	4603      	mov	r3, r0
 8003938:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 800393a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800393e:	4618      	mov	r0, r3
 8003940:	3710      	adds	r7, #16
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}

08003946 <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 8003946:	b580      	push	{r7, lr}
 8003948:	b084      	sub	sp, #16
 800394a:	af00      	add	r7, sp, #0
 800394c:	6078      	str	r0, [r7, #4]
 800394e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 8003950:	2306      	movs	r3, #6
 8003952:	683a      	ldr	r2, [r7, #0]
 8003954:	21b0      	movs	r1, #176	; 0xb0
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	f003 f98c 	bl	8006c74 <VL53L0X_ReadMulti>
 800395c:	4603      	mov	r3, r0
 800395e:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 8003960:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003964:	4618      	mov	r0, r3
 8003966:	3710      	adds	r7, #16
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}

0800396c <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b08c      	sub	sp, #48	; 0x30
 8003970:	af00      	add	r7, sp, #0
 8003972:	60f8      	str	r0, [r7, #12]
 8003974:	607a      	str	r2, [r7, #4]
 8003976:	603b      	str	r3, [r7, #0]
 8003978:	460b      	mov	r3, r1
 800397a:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800397c:	2300      	movs	r3, #0
 800397e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 8003982:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003984:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 8003986:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003988:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 800398a:	2300      	movs	r3, #0
 800398c:	62bb      	str	r3, [r7, #40]	; 0x28
 800398e:	e02b      	b.n	80039e8 <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 8003990:	f107 031c 	add.w	r3, r7, #28
 8003994:	6a3a      	ldr	r2, [r7, #32]
 8003996:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003998:	6878      	ldr	r0, [r7, #4]
 800399a:	f7ff ff11 	bl	80037c0 <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 800399e:	69fb      	ldr	r3, [r7, #28]
 80039a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039a4:	d103      	bne.n	80039ae <enable_ref_spads+0x42>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 80039a6:	23ce      	movs	r3, #206	; 0xce
 80039a8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 80039ac:	e020      	b.n	80039f0 <enable_ref_spads+0x84>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 80039ae:	69fb      	ldr	r3, [r7, #28]
 80039b0:	461a      	mov	r2, r3
 80039b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039b4:	4413      	add	r3, r2
 80039b6:	4618      	mov	r0, r3
 80039b8:	f7ff ff60 	bl	800387c <is_aperture>
 80039bc:	4603      	mov	r3, r0
 80039be:	461a      	mov	r2, r3
 80039c0:	7afb      	ldrb	r3, [r7, #11]
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d003      	beq.n	80039ce <enable_ref_spads+0x62>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 80039c6:	23ce      	movs	r3, #206	; 0xce
 80039c8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 80039cc:	e010      	b.n	80039f0 <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 80039ce:	69fb      	ldr	r3, [r7, #28]
 80039d0:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 80039d2:	6a3a      	ldr	r2, [r7, #32]
 80039d4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80039d6:	6838      	ldr	r0, [r7, #0]
 80039d8:	f7ff ff6a 	bl	80038b0 <enable_spad_bit>
		currentSpad++;
 80039dc:	6a3b      	ldr	r3, [r7, #32]
 80039de:	3301      	adds	r3, #1
 80039e0:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 80039e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039e4:	3301      	adds	r3, #1
 80039e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80039e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80039ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039ec:	429a      	cmp	r2, r3
 80039ee:	d3cf      	bcc.n	8003990 <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 80039f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039f2:	6a3a      	ldr	r2, [r7, #32]
 80039f4:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 80039f6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d106      	bne.n	8003a0c <enable_ref_spads+0xa0>
		status = set_ref_spad_map(Dev, spadArray);
 80039fe:	6839      	ldr	r1, [r7, #0]
 8003a00:	68f8      	ldr	r0, [r7, #12]
 8003a02:	f7ff ff8d 	bl	8003920 <set_ref_spad_map>
 8003a06:	4603      	mov	r3, r0
 8003a08:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 8003a0c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d121      	bne.n	8003a58 <enable_ref_spads+0xec>
		status = get_ref_spad_map(Dev, checkSpadArray);
 8003a14:	f107 0314 	add.w	r3, r7, #20
 8003a18:	4619      	mov	r1, r3
 8003a1a:	68f8      	ldr	r0, [r7, #12]
 8003a1c:	f7ff ff93 	bl	8003946 <get_ref_spad_map>
 8003a20:	4603      	mov	r3, r0
 8003a22:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		i = 0;
 8003a26:	2300      	movs	r3, #0
 8003a28:	627b      	str	r3, [r7, #36]	; 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 8003a2a:	e011      	b.n	8003a50 <enable_ref_spads+0xe4>
			if (spadArray[i] != checkSpadArray[i]) {
 8003a2c:	683a      	ldr	r2, [r7, #0]
 8003a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a30:	4413      	add	r3, r2
 8003a32:	781a      	ldrb	r2, [r3, #0]
 8003a34:	f107 0114 	add.w	r1, r7, #20
 8003a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a3a:	440b      	add	r3, r1
 8003a3c:	781b      	ldrb	r3, [r3, #0]
 8003a3e:	429a      	cmp	r2, r3
 8003a40:	d003      	beq.n	8003a4a <enable_ref_spads+0xde>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 8003a42:	23ce      	movs	r3, #206	; 0xce
 8003a44:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 8003a48:	e006      	b.n	8003a58 <enable_ref_spads+0xec>
			}
			i++;
 8003a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a4c:	3301      	adds	r3, #1
 8003a4e:	627b      	str	r3, [r7, #36]	; 0x24
		while (i < size) {
 8003a50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a54:	429a      	cmp	r2, r3
 8003a56:	d3e9      	bcc.n	8003a2c <enable_ref_spads+0xc0>
		}
	}
	return status;
 8003a58:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	3730      	adds	r7, #48	; 0x30
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}

08003a64 <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b08a      	sub	sp, #40	; 0x28
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
 8003a6c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 8003a74:	2300      	movs	r3, #0
 8003a76:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8003a80:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 8003a84:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d107      	bne.n	8003a9c <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 8003a8c:	22c0      	movs	r2, #192	; 0xc0
 8003a8e:	2101      	movs	r1, #1
 8003a90:	6878      	ldr	r0, [r7, #4]
 8003a92:	f003 f98f 	bl	8006db4 <VL53L0X_WrByte>
 8003a96:	4603      	mov	r3, r0
 8003a98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 8003a9c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d108      	bne.n	8003ab6 <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 8003aa4:	f107 0308 	add.w	r3, r7, #8
 8003aa8:	4619      	mov	r1, r3
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	f7ff fc48 	bl	8003340 <VL53L0X_PerformSingleRangingMeasurement>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 8003ab6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d107      	bne.n	8003ace <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8003abe:	2201      	movs	r2, #1
 8003ac0:	21ff      	movs	r1, #255	; 0xff
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	f003 f976 	bl	8006db4 <VL53L0X_WrByte>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE)
 8003ace:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d107      	bne.n	8003ae6 <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 8003ad6:	683a      	ldr	r2, [r7, #0]
 8003ad8:	21b6      	movs	r1, #182	; 0xb6
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	f003 f8f6 	bl	8006ccc <VL53L0X_RdWord>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 8003ae6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d107      	bne.n	8003afe <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8003aee:	2200      	movs	r2, #0
 8003af0:	21ff      	movs	r1, #255	; 0xff
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	f003 f95e 	bl	8006db4 <VL53L0X_WrByte>
 8003af8:	4603      	mov	r3, r0
 8003afa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE) {
 8003afe:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d112      	bne.n	8003b2c <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8003b06:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003b0a:	461a      	mov	r2, r3
 8003b0c:	2101      	movs	r1, #1
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	f003 f950 	bl	8006db4 <VL53L0X_WrByte>
 8003b14:	4603      	mov	r3, r0
 8003b16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 8003b1a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d104      	bne.n	8003b2c <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8003b28:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
	}

	return status;
 8003b2c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	3728      	adds	r7, #40	; 0x28
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}

08003b38 <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 8003b38:	b590      	push	{r4, r7, lr}
 8003b3a:	b09d      	sub	sp, #116	; 0x74
 8003b3c:	af06      	add	r7, sp, #24
 8003b3e:	60f8      	str	r0, [r7, #12]
 8003b40:	60b9      	str	r1, [r7, #8]
 8003b42:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003b44:	2300      	movs	r3, #0
 8003b46:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 8003b4a:	23b4      	movs	r3, #180	; 0xb4
 8003b4c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	uint32_t minimumSpadCount = 3;
 8003b50:	2303      	movs	r3, #3
 8003b52:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t maxSpadCount = 44;
 8003b54:	232c      	movs	r3, #44	; 0x2c
 8003b56:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t currentSpadIndex = 0;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t lastSpadIndex = 0;
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 8003b60:	2300      	movs	r3, #0
 8003b62:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 8003b64:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8003b68:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t index = 0;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t spadArraySize = 6;
 8003b72:	2306      	movs	r3, #6
 8003b74:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t signalRateDiff = 0;
 8003b76:	2300      	movs	r3, #0
 8003b78:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t lastSignalRateDiff = 0;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t complete = 0;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t VhvSettings = 0;
 8003b84:	2300      	movs	r3, #0
 8003b86:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t	 isApertureSpads_int = 0;
 8003b90:	2300      	movs	r3, #0
 8003b92:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	f8b3 313a 	ldrh.w	r3, [r3, #314]	; 0x13a
 8003b9c:	85fb      	strh	r3, [r7, #46]	; 0x2e
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	64bb      	str	r3, [r7, #72]	; 0x48
 8003ba2:	e009      	b.n	8003bb8 <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8003ba4:	68fa      	ldr	r2, [r7, #12]
 8003ba6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ba8:	4413      	add	r3, r2
 8003baa:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8003bae:	2200      	movs	r2, #0
 8003bb0:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 8003bb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003bb4:	3301      	adds	r3, #1
 8003bb6:	64bb      	str	r3, [r7, #72]	; 0x48
 8003bb8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	d3f1      	bcc.n	8003ba4 <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8003bc0:	2201      	movs	r2, #1
 8003bc2:	21ff      	movs	r1, #255	; 0xff
 8003bc4:	68f8      	ldr	r0, [r7, #12]
 8003bc6:	f003 f8f5 	bl	8006db4 <VL53L0X_WrByte>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8003bd0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d107      	bne.n	8003be8 <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 8003bd8:	2200      	movs	r2, #0
 8003bda:	214f      	movs	r1, #79	; 0x4f
 8003bdc:	68f8      	ldr	r0, [r7, #12]
 8003bde:	f003 f8e9 	bl	8006db4 <VL53L0X_WrByte>
 8003be2:	4603      	mov	r3, r0
 8003be4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8003be8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d107      	bne.n	8003c00 <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 8003bf0:	222c      	movs	r2, #44	; 0x2c
 8003bf2:	214e      	movs	r1, #78	; 0x4e
 8003bf4:	68f8      	ldr	r0, [r7, #12]
 8003bf6:	f003 f8dd 	bl	8006db4 <VL53L0X_WrByte>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8003c00:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d107      	bne.n	8003c18 <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8003c08:	2200      	movs	r2, #0
 8003c0a:	21ff      	movs	r1, #255	; 0xff
 8003c0c:	68f8      	ldr	r0, [r7, #12]
 8003c0e:	f003 f8d1 	bl	8006db4 <VL53L0X_WrByte>
 8003c12:	4603      	mov	r3, r0
 8003c14:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8003c18:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d109      	bne.n	8003c34 <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 8003c20:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8003c24:	461a      	mov	r2, r3
 8003c26:	21b6      	movs	r1, #182	; 0xb6
 8003c28:	68f8      	ldr	r0, [r7, #12]
 8003c2a:	f003 f8c3 	bl	8006db4 <VL53L0X_WrByte>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 8003c34:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d107      	bne.n	8003c4c <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	2180      	movs	r1, #128	; 0x80
 8003c40:	68f8      	ldr	r0, [r7, #12]
 8003c42:	f003 f8b7 	bl	8006db4 <VL53L0X_WrByte>
 8003c46:	4603      	mov	r3, r0
 8003c48:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 8003c4c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d10a      	bne.n	8003c6a <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 8003c54:	f107 0210 	add.w	r2, r7, #16
 8003c58:	f107 0111 	add.w	r1, r7, #17
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	68f8      	ldr	r0, [r7, #12]
 8003c60:	f000 fbbb 	bl	80043da <VL53L0X_perform_ref_calibration>
 8003c64:	4603      	mov	r3, r0
 8003c66:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 8003c6a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d121      	bne.n	8003cb6 <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 8003c72:	2300      	movs	r3, #0
 8003c74:	653b      	str	r3, [r7, #80]	; 0x50
		lastSpadIndex = currentSpadIndex;
 8003c76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c78:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	64fb      	str	r3, [r7, #76]	; 0x4c
		Status = enable_ref_spads(Dev,
 8003c7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c80:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	f503 7492 	add.w	r4, r3, #292	; 0x124
		Status = enable_ref_spads(Dev,
 8003c8e:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8003c92:	f107 0218 	add.w	r2, r7, #24
 8003c96:	9204      	str	r2, [sp, #16]
 8003c98:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003c9a:	9203      	str	r2, [sp, #12]
 8003c9c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003c9e:	9202      	str	r2, [sp, #8]
 8003ca0:	9301      	str	r3, [sp, #4]
 8003ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ca4:	9300      	str	r3, [sp, #0]
 8003ca6:	4623      	mov	r3, r4
 8003ca8:	4602      	mov	r2, r0
 8003caa:	68f8      	ldr	r0, [r7, #12]
 8003cac:	f7ff fe5e 	bl	800396c <enable_ref_spads>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003cb6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d174      	bne.n	8003da8 <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 8003cbe:	69bb      	ldr	r3, [r7, #24]
 8003cc0:	653b      	str	r3, [r7, #80]	; 0x50

		Status = perform_ref_signal_measurement(Dev,
 8003cc2:	f107 0312 	add.w	r3, r7, #18
 8003cc6:	4619      	mov	r1, r3
 8003cc8:	68f8      	ldr	r0, [r7, #12]
 8003cca:	f7ff fecb 	bl	8003a64 <perform_ref_signal_measurement>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 8003cd4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d161      	bne.n	8003da0 <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 8003cdc:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 8003cde:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	d25d      	bcs.n	8003da0 <VL53L0X_perform_ref_spad_management+0x268>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs */

			for (index = 0; index < spadArraySize; index++)
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	64bb      	str	r3, [r7, #72]	; 0x48
 8003ce8:	e009      	b.n	8003cfe <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8003cea:	68fa      	ldr	r2, [r7, #12]
 8003cec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003cee:	4413      	add	r3, r2
 8003cf0:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 8003cf8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003cfa:	3301      	adds	r3, #1
 8003cfc:	64bb      	str	r3, [r7, #72]	; 0x48
 8003cfe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d02:	429a      	cmp	r2, r3
 8003d04:	d3f1      	bcc.n	8003cea <VL53L0X_perform_ref_spad_management+0x1b2>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 8003d06:	e002      	b.n	8003d0e <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 8003d08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d0a:	3301      	adds	r3, #1
 8003d0c:	653b      	str	r3, [r7, #80]	; 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 8003d0e:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 8003d12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d14:	4413      	add	r3, r2
 8003d16:	4618      	mov	r0, r3
 8003d18:	f7ff fdb0 	bl	800387c <is_aperture>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d103      	bne.n	8003d2a <VL53L0X_perform_ref_spad_management+0x1f2>
				== 0) && (currentSpadIndex < maxSpadCount)) {
 8003d22:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003d24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d26:	429a      	cmp	r2, r3
 8003d28:	d3ee      	bcc.n	8003d08 <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	64fb      	str	r3, [r7, #76]	; 0x4c

			Status = enable_ref_spads(Dev,
 8003d2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d30:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	f503 7492 	add.w	r4, r3, #292	; 0x124
			Status = enable_ref_spads(Dev,
 8003d3e:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8003d42:	f107 0218 	add.w	r2, r7, #24
 8003d46:	9204      	str	r2, [sp, #16]
 8003d48:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003d4a:	9203      	str	r2, [sp, #12]
 8003d4c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003d4e:	9202      	str	r2, [sp, #8]
 8003d50:	9301      	str	r3, [sp, #4]
 8003d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d54:	9300      	str	r3, [sp, #0]
 8003d56:	4623      	mov	r3, r4
 8003d58:	4602      	mov	r2, r0
 8003d5a:	68f8      	ldr	r0, [r7, #12]
 8003d5c:	f7ff fe06 	bl	800396c <enable_ref_spads>
 8003d60:	4603      	mov	r3, r0
 8003d62:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 8003d66:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d11b      	bne.n	8003da6 <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 8003d6e:	69bb      	ldr	r3, [r7, #24]
 8003d70:	653b      	str	r3, [r7, #80]	; 0x50
				Status = perform_ref_signal_measurement(Dev,
 8003d72:	f107 0312 	add.w	r3, r7, #18
 8003d76:	4619      	mov	r1, r3
 8003d78:	68f8      	ldr	r0, [r7, #12]
 8003d7a:	f7ff fe73 	bl	8003a64 <perform_ref_signal_measurement>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 8003d84:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d10c      	bne.n	8003da6 <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 8003d8c:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 8003d8e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8003d90:	429a      	cmp	r2, r3
 8003d92:	d208      	bcs.n	8003da6 <VL53L0X_perform_ref_spad_management+0x26e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 8003d94:	2301      	movs	r3, #1
 8003d96:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					refSpadCount_int = minimumSpadCount;
 8003d9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d9c:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 8003d9e:	e002      	b.n	8003da6 <VL53L0X_perform_ref_spad_management+0x26e>
				}
			}
		} else {
			needAptSpads = 0;
 8003da0:	2300      	movs	r3, #0
 8003da2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003da4:	e000      	b.n	8003da8 <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 8003da6:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8003da8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	f040 80af 	bne.w	8003f10 <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 8003db2:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 8003db4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8003db6:	429a      	cmp	r2, r3
 8003db8:	f240 80aa 	bls.w	8003f10 <VL53L0X_perform_ref_spad_management+0x3d8>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 8003dbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003dbe:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		refSpadCount_int	= minimumSpadCount;
 8003dc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dc4:	63fb      	str	r3, [r7, #60]	; 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	f503 7192 	add.w	r1, r3, #292	; 0x124
 8003dcc:	f107 031c 	add.w	r3, r7, #28
 8003dd0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f006 fbf8 	bl	800a5c8 <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 8003dd8:	8a7b      	ldrh	r3, [r7, #18]
 8003dda:	461a      	mov	r2, r3
 8003ddc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003dde:	1ad3      	subs	r3, r2, r3
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	bfb8      	it	lt
 8003de4:	425b      	neglt	r3, r3
 8003de6:	647b      	str	r3, [r7, #68]	; 0x44
			targetRefRate);
		complete = 0;
 8003de8:	2300      	movs	r3, #0
 8003dea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

		while (!complete) {
 8003dee:	e086      	b.n	8003efe <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	f503 7095 	add.w	r0, r3, #298	; 0x12a
			get_next_good_spad(
 8003df6:	f107 0314 	add.w	r3, r7, #20
 8003dfa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003dfc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003dfe:	f7ff fcdf 	bl	80037c0 <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e08:	d103      	bne.n	8003e12 <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 8003e0a:	23ce      	movs	r3, #206	; 0xce
 8003e0c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 8003e10:	e07e      	b.n	8003f10 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 8003e12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e14:	3301      	adds	r3, #1
 8003e16:	63fb      	str	r3, [r7, #60]	; 0x3c

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 8003e18:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8003e1c:	697a      	ldr	r2, [r7, #20]
 8003e1e:	4413      	add	r3, r2
 8003e20:	4618      	mov	r0, r3
 8003e22:	f7ff fd2b 	bl	800387c <is_aperture>
 8003e26:	4603      	mov	r3, r0
 8003e28:	461a      	mov	r2, r3
 8003e2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d003      	beq.n	8003e38 <VL53L0X_perform_ref_spad_management+0x300>
					needAptSpads) {
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 8003e30:	23ce      	movs	r3, #206	; 0xce
 8003e32:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 8003e36:	e06b      	b.n	8003f10 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			currentSpadIndex = nextGoodSpad;
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	653b      	str	r3, [r7, #80]	; 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	f503 7392 	add.w	r3, r3, #292	; 0x124
			Status = enable_spad_bit(
 8003e42:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003e44:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e46:	4618      	mov	r0, r3
 8003e48:	f7ff fd32 	bl	80038b0 <enable_spad_bit>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 8003e52:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d10c      	bne.n	8003e74 <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 8003e5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e5c:	3301      	adds	r3, #1
 8003e5e:	653b      	str	r3, [r7, #80]	; 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement. */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	f503 7392 	add.w	r3, r3, #292	; 0x124
				Status = set_ref_spad_map(Dev,
 8003e66:	4619      	mov	r1, r3
 8003e68:	68f8      	ldr	r0, [r7, #12]
 8003e6a:	f7ff fd59 	bl	8003920 <set_ref_spad_map>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 8003e74:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d146      	bne.n	8003f0a <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 8003e7c:	f107 0312 	add.w	r3, r7, #18
 8003e80:	4619      	mov	r1, r3
 8003e82:	68f8      	ldr	r0, [r7, #12]
 8003e84:	f7ff fdee 	bl	8003a64 <perform_ref_signal_measurement>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 8003e8e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d13b      	bne.n	8003f0e <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 8003e96:	8a7b      	ldrh	r3, [r7, #18]
 8003e98:	461a      	mov	r2, r3
 8003e9a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003e9c:	1ad3      	subs	r3, r2, r3
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	bfb8      	it	lt
 8003ea2:	425b      	neglt	r3, r3
 8003ea4:	627b      	str	r3, [r7, #36]	; 0x24

			if (peakSignalRateRef > targetRefRate) {
 8003ea6:	8a7b      	ldrh	r3, [r7, #18]
 8003ea8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8003eaa:	429a      	cmp	r2, r3
 8003eac:	d21c      	bcs.n	8003ee8 <VL53L0X_perform_ref_spad_management+0x3b0>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 8003eae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003eb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003eb2:	429a      	cmp	r2, r3
 8003eb4:	d914      	bls.n	8003ee0 <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this. */
					Status = set_ref_spad_map(Dev,
 8003eb6:	f107 031c 	add.w	r3, r7, #28
 8003eba:	4619      	mov	r1, r3
 8003ebc:	68f8      	ldr	r0, [r7, #12]
 8003ebe:	f7ff fd2f 	bl	8003920 <set_ref_spad_map>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	f503 7392 	add.w	r3, r3, #292	; 0x124
					memcpy(
 8003ece:	f107 011c 	add.w	r1, r7, #28
 8003ed2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f006 fb77 	bl	800a5c8 <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 8003eda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003edc:	3b01      	subs	r3, #1
 8003ede:	63fb      	str	r3, [r7, #60]	; 0x3c
				}
				complete = 1;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003ee6:	e00a      	b.n	8003efe <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 8003ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eea:	647b      	str	r3, [r7, #68]	; 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	f503 7192 	add.w	r1, r3, #292	; 0x124
				memcpy(lastSpadArray,
 8003ef2:	f107 031c 	add.w	r3, r7, #28
 8003ef6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f006 fb65 	bl	800a5c8 <memcpy>
		while (!complete) {
 8003efe:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	f43f af74 	beq.w	8003df0 <VL53L0X_perform_ref_spad_management+0x2b8>
 8003f08:	e002      	b.n	8003f10 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8003f0a:	bf00      	nop
 8003f0c:	e000      	b.n	8003f10 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8003f0e:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003f10:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d115      	bne.n	8003f44 <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003f1c:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8003f24:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	2201      	movs	r2, #1
 8003f2a:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	b2da      	uxtb	r2, r3
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	781a      	ldrb	r2, [r3, #0]
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 8003f44:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	375c      	adds	r7, #92	; 0x5c
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd90      	pop	{r4, r7, pc}

08003f50 <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 8003f50:	b590      	push	{r4, r7, lr}
 8003f52:	b093      	sub	sp, #76	; 0x4c
 8003f54:	af06      	add	r7, sp, #24
 8003f56:	60f8      	str	r0, [r7, #12]
 8003f58:	60b9      	str	r1, [r7, #8]
 8003f5a:	4613      	mov	r3, r2
 8003f5c:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t currentSpadIndex = 0;
 8003f64:	2300      	movs	r3, #0
 8003f66:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t startSelect = 0xB4;
 8003f68:	23b4      	movs	r3, #180	; 0xb4
 8003f6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t spadArraySize = 6;
 8003f6e:	2306      	movs	r3, #6
 8003f70:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 8003f72:	232c      	movs	r3, #44	; 0x2c
 8003f74:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8003f76:	2201      	movs	r2, #1
 8003f78:	21ff      	movs	r1, #255	; 0xff
 8003f7a:	68f8      	ldr	r0, [r7, #12]
 8003f7c:	f002 ff1a 	bl	8006db4 <VL53L0X_WrByte>
 8003f80:	4603      	mov	r3, r0
 8003f82:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 8003f86:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d107      	bne.n	8003f9e <VL53L0X_set_reference_spads+0x4e>
		Status = VL53L0X_WrByte(Dev,
 8003f8e:	2200      	movs	r2, #0
 8003f90:	214f      	movs	r1, #79	; 0x4f
 8003f92:	68f8      	ldr	r0, [r7, #12]
 8003f94:	f002 ff0e 	bl	8006db4 <VL53L0X_WrByte>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8003f9e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d107      	bne.n	8003fb6 <VL53L0X_set_reference_spads+0x66>
		Status = VL53L0X_WrByte(Dev,
 8003fa6:	222c      	movs	r2, #44	; 0x2c
 8003fa8:	214e      	movs	r1, #78	; 0x4e
 8003faa:	68f8      	ldr	r0, [r7, #12]
 8003fac:	f002 ff02 	bl	8006db4 <VL53L0X_WrByte>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8003fb6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d107      	bne.n	8003fce <VL53L0X_set_reference_spads+0x7e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	21ff      	movs	r1, #255	; 0xff
 8003fc2:	68f8      	ldr	r0, [r7, #12]
 8003fc4:	f002 fef6 	bl	8006db4 <VL53L0X_WrByte>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 8003fce:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d109      	bne.n	8003fea <VL53L0X_set_reference_spads+0x9a>
		Status = VL53L0X_WrByte(Dev,
 8003fd6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003fda:	461a      	mov	r2, r3
 8003fdc:	21b6      	movs	r1, #182	; 0xb6
 8003fde:	68f8      	ldr	r0, [r7, #12]
 8003fe0:	f002 fee8 	bl	8006db4 <VL53L0X_WrByte>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 8003fea:	2300      	movs	r3, #0
 8003fec:	627b      	str	r3, [r7, #36]	; 0x24
 8003fee:	e009      	b.n	8004004 <VL53L0X_set_reference_spads+0xb4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8003ff0:	68fa      	ldr	r2, [r7, #12]
 8003ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff4:	4413      	add	r3, r2
 8003ff6:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 8003ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004000:	3301      	adds	r3, #1
 8004002:	627b      	str	r3, [r7, #36]	; 0x24
 8004004:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004006:	69fb      	ldr	r3, [r7, #28]
 8004008:	429a      	cmp	r2, r3
 800400a:	d3f1      	bcc.n	8003ff0 <VL53L0X_set_reference_spads+0xa0>

	if (isApertureSpads) {
 800400c:	79fb      	ldrb	r3, [r7, #7]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d011      	beq.n	8004036 <VL53L0X_set_reference_spads+0xe6>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8004012:	e002      	b.n	800401a <VL53L0X_set_reference_spads+0xca>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 8004014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004016:	3301      	adds	r3, #1
 8004018:	62bb      	str	r3, [r7, #40]	; 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 800401a:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800401e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004020:	4413      	add	r3, r2
 8004022:	4618      	mov	r0, r3
 8004024:	f7ff fc2a 	bl	800387c <is_aperture>
 8004028:	4603      	mov	r3, r0
 800402a:	2b00      	cmp	r3, #0
 800402c:	d103      	bne.n	8004036 <VL53L0X_set_reference_spads+0xe6>
 800402e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004030:	69bb      	ldr	r3, [r7, #24]
 8004032:	429a      	cmp	r2, r3
 8004034:	d3ee      	bcc.n	8004014 <VL53L0X_set_reference_spads+0xc4>
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	f503 7095 	add.w	r0, r3, #298	; 0x12a
				Dev->Data.SpadData.RefSpadEnables,
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	f503 7492 	add.w	r4, r3, #292	; 0x124
	Status = enable_ref_spads(Dev,
 8004042:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004046:	79f9      	ldrb	r1, [r7, #7]
 8004048:	f107 0214 	add.w	r2, r7, #20
 800404c:	9204      	str	r2, [sp, #16]
 800404e:	68ba      	ldr	r2, [r7, #8]
 8004050:	9203      	str	r2, [sp, #12]
 8004052:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004054:	9202      	str	r2, [sp, #8]
 8004056:	9301      	str	r3, [sp, #4]
 8004058:	69fb      	ldr	r3, [r7, #28]
 800405a:	9300      	str	r3, [sp, #0]
 800405c:	4623      	mov	r3, r4
 800405e:	4602      	mov	r2, r0
 8004060:	68f8      	ldr	r0, [r7, #12]
 8004062:	f7ff fc83 	bl	800396c <enable_ref_spads>
 8004066:	4603      	mov	r3, r0
 8004068:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 800406c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004070:	2b00      	cmp	r3, #0
 8004072:	d10c      	bne.n	800408e <VL53L0X_set_reference_spads+0x13e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	2201      	movs	r2, #1
 8004078:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	b2da      	uxtb	r2, r3
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	79fa      	ldrb	r2, [r7, #7]
 800408a:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 800408e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8004092:	4618      	mov	r0, r3
 8004094:	3734      	adds	r7, #52	; 0x34
 8004096:	46bd      	mov	sp, r7
 8004098:	bd90      	pop	{r4, r7, pc}

0800409a <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 800409a:	b580      	push	{r7, lr}
 800409c:	b084      	sub	sp, #16
 800409e:	af00      	add	r7, sp, #0
 80040a0:	6078      	str	r0, [r7, #4]
 80040a2:	460b      	mov	r3, r1
 80040a4:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80040a6:	2300      	movs	r3, #0
 80040a8:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80040aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d10a      	bne.n	80040c8 <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 80040b2:	78fb      	ldrb	r3, [r7, #3]
 80040b4:	f043 0301 	orr.w	r3, r3, #1
 80040b8:	b2db      	uxtb	r3, r3
 80040ba:	461a      	mov	r2, r3
 80040bc:	2100      	movs	r1, #0
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f002 fe78 	bl	8006db4 <VL53L0X_WrByte>
 80040c4:	4603      	mov	r3, r0
 80040c6:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 80040c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d104      	bne.n	80040da <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 80040d0:	6878      	ldr	r0, [r7, #4]
 80040d2:	f000 f9bf 	bl	8004454 <VL53L0X_measurement_poll_for_completion>
 80040d6:	4603      	mov	r3, r0
 80040d8:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80040da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d105      	bne.n	80040ee <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 80040e2:	2100      	movs	r1, #0
 80040e4:	6878      	ldr	r0, [r7, #4]
 80040e6:	f7ff fab5 	bl	8003654 <VL53L0X_ClearInterruptMask>
 80040ea:	4603      	mov	r3, r0
 80040ec:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80040ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d106      	bne.n	8004104 <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 80040f6:	2200      	movs	r2, #0
 80040f8:	2100      	movs	r1, #0
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f002 fe5a 	bl	8006db4 <VL53L0X_WrByte>
 8004100:	4603      	mov	r3, r0
 8004102:	73fb      	strb	r3, [r7, #15]

	return Status;
 8004104:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004108:	4618      	mov	r0, r3
 800410a:	3710      	adds	r7, #16
 800410c:	46bd      	mov	sp, r7
 800410e:	bd80      	pop	{r7, pc}

08004110 <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b084      	sub	sp, #16
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
 8004118:	4608      	mov	r0, r1
 800411a:	4611      	mov	r1, r2
 800411c:	461a      	mov	r2, r3
 800411e:	4603      	mov	r3, r0
 8004120:	70fb      	strb	r3, [r7, #3]
 8004122:	460b      	mov	r3, r1
 8004124:	70bb      	strb	r3, [r7, #2]
 8004126:	4613      	mov	r3, r2
 8004128:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800412a:	2300      	movs	r3, #0
 800412c:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 800412e:	2300      	movs	r3, #0
 8004130:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8004132:	2201      	movs	r2, #1
 8004134:	21ff      	movs	r1, #255	; 0xff
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	f002 fe3c 	bl	8006db4 <VL53L0X_WrByte>
 800413c:	4603      	mov	r3, r0
 800413e:	461a      	mov	r2, r3
 8004140:	7bfb      	ldrb	r3, [r7, #15]
 8004142:	4313      	orrs	r3, r2
 8004144:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8004146:	2200      	movs	r2, #0
 8004148:	2100      	movs	r1, #0
 800414a:	6878      	ldr	r0, [r7, #4]
 800414c:	f002 fe32 	bl	8006db4 <VL53L0X_WrByte>
 8004150:	4603      	mov	r3, r0
 8004152:	461a      	mov	r2, r3
 8004154:	7bfb      	ldrb	r3, [r7, #15]
 8004156:	4313      	orrs	r3, r2
 8004158:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800415a:	2200      	movs	r2, #0
 800415c:	21ff      	movs	r1, #255	; 0xff
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	f002 fe28 	bl	8006db4 <VL53L0X_WrByte>
 8004164:	4603      	mov	r3, r0
 8004166:	461a      	mov	r2, r3
 8004168:	7bfb      	ldrb	r3, [r7, #15]
 800416a:	4313      	orrs	r3, r2
 800416c:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 800416e:	78fb      	ldrb	r3, [r7, #3]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d01e      	beq.n	80041b2 <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 8004174:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d009      	beq.n	8004190 <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 800417c:	69ba      	ldr	r2, [r7, #24]
 800417e:	21cb      	movs	r1, #203	; 0xcb
 8004180:	6878      	ldr	r0, [r7, #4]
 8004182:	f002 fd1c 	bl	8006bbe <VL53L0X_RdByte>
 8004186:	4603      	mov	r3, r0
 8004188:	461a      	mov	r2, r3
 800418a:	7bfb      	ldrb	r3, [r7, #15]
 800418c:	4313      	orrs	r3, r2
 800418e:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 8004190:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004194:	2b00      	cmp	r3, #0
 8004196:	d02a      	beq.n	80041ee <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 8004198:	f107 030e 	add.w	r3, r7, #14
 800419c:	461a      	mov	r2, r3
 800419e:	21ee      	movs	r1, #238	; 0xee
 80041a0:	6878      	ldr	r0, [r7, #4]
 80041a2:	f002 fd0c 	bl	8006bbe <VL53L0X_RdByte>
 80041a6:	4603      	mov	r3, r0
 80041a8:	461a      	mov	r2, r3
 80041aa:	7bfb      	ldrb	r3, [r7, #15]
 80041ac:	4313      	orrs	r3, r2
 80041ae:	73fb      	strb	r3, [r7, #15]
 80041b0:	e01d      	b.n	80041ee <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 80041b2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d00a      	beq.n	80041d0 <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 80041ba:	78bb      	ldrb	r3, [r7, #2]
 80041bc:	461a      	mov	r2, r3
 80041be:	21cb      	movs	r1, #203	; 0xcb
 80041c0:	6878      	ldr	r0, [r7, #4]
 80041c2:	f002 fdf7 	bl	8006db4 <VL53L0X_WrByte>
 80041c6:	4603      	mov	r3, r0
 80041c8:	461a      	mov	r2, r3
 80041ca:	7bfb      	ldrb	r3, [r7, #15]
 80041cc:	4313      	orrs	r3, r2
 80041ce:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 80041d0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d00a      	beq.n	80041ee <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 80041d8:	787b      	ldrb	r3, [r7, #1]
 80041da:	2280      	movs	r2, #128	; 0x80
 80041dc:	21ee      	movs	r1, #238	; 0xee
 80041de:	6878      	ldr	r0, [r7, #4]
 80041e0:	f002 fe36 	bl	8006e50 <VL53L0X_UpdateByte>
 80041e4:	4603      	mov	r3, r0
 80041e6:	461a      	mov	r2, r3
 80041e8:	7bfb      	ldrb	r3, [r7, #15]
 80041ea:	4313      	orrs	r3, r2
 80041ec:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80041ee:	2201      	movs	r2, #1
 80041f0:	21ff      	movs	r1, #255	; 0xff
 80041f2:	6878      	ldr	r0, [r7, #4]
 80041f4:	f002 fdde 	bl	8006db4 <VL53L0X_WrByte>
 80041f8:	4603      	mov	r3, r0
 80041fa:	461a      	mov	r2, r3
 80041fc:	7bfb      	ldrb	r3, [r7, #15]
 80041fe:	4313      	orrs	r3, r2
 8004200:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8004202:	2201      	movs	r2, #1
 8004204:	2100      	movs	r1, #0
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	f002 fdd4 	bl	8006db4 <VL53L0X_WrByte>
 800420c:	4603      	mov	r3, r0
 800420e:	461a      	mov	r2, r3
 8004210:	7bfb      	ldrb	r3, [r7, #15]
 8004212:	4313      	orrs	r3, r2
 8004214:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8004216:	2200      	movs	r2, #0
 8004218:	21ff      	movs	r1, #255	; 0xff
 800421a:	6878      	ldr	r0, [r7, #4]
 800421c:	f002 fdca 	bl	8006db4 <VL53L0X_WrByte>
 8004220:	4603      	mov	r3, r0
 8004222:	461a      	mov	r2, r3
 8004224:	7bfb      	ldrb	r3, [r7, #15]
 8004226:	4313      	orrs	r3, r2
 8004228:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 800422a:	7bbb      	ldrb	r3, [r7, #14]
 800422c:	f023 0310 	bic.w	r3, r3, #16
 8004230:	b2da      	uxtb	r2, r3
 8004232:	69fb      	ldr	r3, [r7, #28]
 8004234:	701a      	strb	r2, [r3, #0]

	return Status;
 8004236:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800423a:	4618      	mov	r0, r3
 800423c:	3710      	adds	r7, #16
 800423e:	46bd      	mov	sp, r7
 8004240:	bd80      	pop	{r7, pc}

08004242 <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8004242:	b580      	push	{r7, lr}
 8004244:	b08a      	sub	sp, #40	; 0x28
 8004246:	af04      	add	r7, sp, #16
 8004248:	60f8      	str	r0, [r7, #12]
 800424a:	60b9      	str	r1, [r7, #8]
 800424c:	4611      	mov	r1, r2
 800424e:	461a      	mov	r2, r3
 8004250:	460b      	mov	r3, r1
 8004252:	71fb      	strb	r3, [r7, #7]
 8004254:	4613      	mov	r3, r2
 8004256:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004258:	2300      	movs	r3, #0
 800425a:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800425c:	2300      	movs	r3, #0
 800425e:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 8004260:	2300      	movs	r3, #0
 8004262:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 8004264:	2300      	movs	r3, #0
 8004266:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 8004268:	2300      	movs	r3, #0
 800426a:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 800426c:	79bb      	ldrb	r3, [r7, #6]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d003      	beq.n	800427a <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8004278:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 800427a:	2201      	movs	r2, #1
 800427c:	2101      	movs	r1, #1
 800427e:	68f8      	ldr	r0, [r7, #12]
 8004280:	f002 fd98 	bl	8006db4 <VL53L0X_WrByte>
 8004284:	4603      	mov	r3, r0
 8004286:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 8004288:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d105      	bne.n	800429c <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 8004290:	2140      	movs	r1, #64	; 0x40
 8004292:	68f8      	ldr	r0, [r7, #12]
 8004294:	f7ff ff01 	bl	800409a <VL53L0X_perform_single_ref_calibration>
 8004298:	4603      	mov	r3, r0
 800429a:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 800429c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d115      	bne.n	80042d0 <VL53L0X_perform_vhv_calibration+0x8e>
 80042a4:	79fb      	ldrb	r3, [r7, #7]
 80042a6:	2b01      	cmp	r3, #1
 80042a8:	d112      	bne.n	80042d0 <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 80042aa:	7d39      	ldrb	r1, [r7, #20]
 80042ac:	7d7a      	ldrb	r2, [r7, #21]
 80042ae:	2300      	movs	r3, #0
 80042b0:	9303      	str	r3, [sp, #12]
 80042b2:	2301      	movs	r3, #1
 80042b4:	9302      	str	r3, [sp, #8]
 80042b6:	f107 0313 	add.w	r3, r7, #19
 80042ba:	9301      	str	r3, [sp, #4]
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	9300      	str	r3, [sp, #0]
 80042c0:	460b      	mov	r3, r1
 80042c2:	2101      	movs	r1, #1
 80042c4:	68f8      	ldr	r0, [r7, #12]
 80042c6:	f7ff ff23 	bl	8004110 <VL53L0X_ref_calibration_io>
 80042ca:	4603      	mov	r3, r0
 80042cc:	75fb      	strb	r3, [r7, #23]
 80042ce:	e002      	b.n	80042d6 <VL53L0X_perform_vhv_calibration+0x94>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	2200      	movs	r2, #0
 80042d4:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 80042d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d112      	bne.n	8004304 <VL53L0X_perform_vhv_calibration+0xc2>
 80042de:	79bb      	ldrb	r3, [r7, #6]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d00f      	beq.n	8004304 <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80042e4:	7dbb      	ldrb	r3, [r7, #22]
 80042e6:	461a      	mov	r2, r3
 80042e8:	2101      	movs	r1, #1
 80042ea:	68f8      	ldr	r0, [r7, #12]
 80042ec:	f002 fd62 	bl	8006db4 <VL53L0X_WrByte>
 80042f0:	4603      	mov	r3, r0
 80042f2:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 80042f4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d103      	bne.n	8004304 <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	7dba      	ldrb	r2, [r7, #22]
 8004300:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8004304:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004308:	4618      	mov	r0, r3
 800430a:	3718      	adds	r7, #24
 800430c:	46bd      	mov	sp, r7
 800430e:	bd80      	pop	{r7, pc}

08004310 <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b08a      	sub	sp, #40	; 0x28
 8004314:	af04      	add	r7, sp, #16
 8004316:	60f8      	str	r0, [r7, #12]
 8004318:	60b9      	str	r1, [r7, #8]
 800431a:	4611      	mov	r1, r2
 800431c:	461a      	mov	r2, r3
 800431e:	460b      	mov	r3, r1
 8004320:	71fb      	strb	r3, [r7, #7]
 8004322:	4613      	mov	r3, r2
 8004324:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004326:	2300      	movs	r3, #0
 8004328:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800432a:	2300      	movs	r3, #0
 800432c:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 800432e:	2300      	movs	r3, #0
 8004330:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 8004332:	2300      	movs	r3, #0
 8004334:	753b      	strb	r3, [r7, #20]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8004336:	79bb      	ldrb	r3, [r7, #6]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d003      	beq.n	8004344 <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8004342:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 8004344:	2202      	movs	r2, #2
 8004346:	2101      	movs	r1, #1
 8004348:	68f8      	ldr	r0, [r7, #12]
 800434a:	f002 fd33 	bl	8006db4 <VL53L0X_WrByte>
 800434e:	4603      	mov	r3, r0
 8004350:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 8004352:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d105      	bne.n	8004366 <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 800435a:	2100      	movs	r1, #0
 800435c:	68f8      	ldr	r0, [r7, #12]
 800435e:	f7ff fe9c 	bl	800409a <VL53L0X_perform_single_ref_calibration>
 8004362:	4603      	mov	r3, r0
 8004364:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8004366:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d115      	bne.n	800439a <VL53L0X_perform_phase_calibration+0x8a>
 800436e:	79fb      	ldrb	r3, [r7, #7]
 8004370:	2b01      	cmp	r3, #1
 8004372:	d112      	bne.n	800439a <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8004374:	7d39      	ldrb	r1, [r7, #20]
 8004376:	7d7a      	ldrb	r2, [r7, #21]
 8004378:	2301      	movs	r3, #1
 800437a:	9303      	str	r3, [sp, #12]
 800437c:	2300      	movs	r3, #0
 800437e:	9302      	str	r3, [sp, #8]
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	9301      	str	r3, [sp, #4]
 8004384:	f107 0313 	add.w	r3, r7, #19
 8004388:	9300      	str	r3, [sp, #0]
 800438a:	460b      	mov	r3, r1
 800438c:	2101      	movs	r1, #1
 800438e:	68f8      	ldr	r0, [r7, #12]
 8004390:	f7ff febe 	bl	8004110 <VL53L0X_ref_calibration_io>
 8004394:	4603      	mov	r3, r0
 8004396:	75fb      	strb	r3, [r7, #23]
 8004398:	e002      	b.n	80043a0 <VL53L0X_perform_phase_calibration+0x90>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	2200      	movs	r2, #0
 800439e:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 80043a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d112      	bne.n	80043ce <VL53L0X_perform_phase_calibration+0xbe>
 80043a8:	79bb      	ldrb	r3, [r7, #6]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d00f      	beq.n	80043ce <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80043ae:	7dbb      	ldrb	r3, [r7, #22]
 80043b0:	461a      	mov	r2, r3
 80043b2:	2101      	movs	r1, #1
 80043b4:	68f8      	ldr	r0, [r7, #12]
 80043b6:	f002 fcfd 	bl	8006db4 <VL53L0X_WrByte>
 80043ba:	4603      	mov	r3, r0
 80043bc:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 80043be:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d103      	bne.n	80043ce <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	7dba      	ldrb	r2, [r7, #22]
 80043ca:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 80043ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	3718      	adds	r7, #24
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bd80      	pop	{r7, pc}

080043da <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 80043da:	b580      	push	{r7, lr}
 80043dc:	b086      	sub	sp, #24
 80043de:	af00      	add	r7, sp, #0
 80043e0:	60f8      	str	r0, [r7, #12]
 80043e2:	60b9      	str	r1, [r7, #8]
 80043e4:	607a      	str	r2, [r7, #4]
 80043e6:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80043e8:	2300      	movs	r3, #0
 80043ea:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 80043ec:	2300      	movs	r3, #0
 80043ee:	75bb      	strb	r3, [r7, #22]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 80043f6:	75bb      	strb	r3, [r7, #22]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 80043f8:	78fa      	ldrb	r2, [r7, #3]
 80043fa:	2300      	movs	r3, #0
 80043fc:	68b9      	ldr	r1, [r7, #8]
 80043fe:	68f8      	ldr	r0, [r7, #12]
 8004400:	f7ff ff1f 	bl	8004242 <VL53L0X_perform_vhv_calibration>
 8004404:	4603      	mov	r3, r0
 8004406:	75fb      	strb	r3, [r7, #23]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8004408:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d107      	bne.n	8004420 <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 8004410:	78fa      	ldrb	r2, [r7, #3]
 8004412:	2300      	movs	r3, #0
 8004414:	6879      	ldr	r1, [r7, #4]
 8004416:	68f8      	ldr	r0, [r7, #12]
 8004418:	f7ff ff7a 	bl	8004310 <VL53L0X_perform_phase_calibration>
 800441c:	4603      	mov	r3, r0
 800441e:	75fb      	strb	r3, [r7, #23]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 8004420:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d10f      	bne.n	8004448 <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8004428:	7dbb      	ldrb	r3, [r7, #22]
 800442a:	461a      	mov	r2, r3
 800442c:	2101      	movs	r1, #1
 800442e:	68f8      	ldr	r0, [r7, #12]
 8004430:	f002 fcc0 	bl	8006db4 <VL53L0X_WrByte>
 8004434:	4603      	mov	r3, r0
 8004436:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8004438:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d103      	bne.n	8004448 <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	7dba      	ldrb	r2, [r7, #22]
 8004444:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8004448:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800444c:	4618      	mov	r0, r3
 800444e:	3718      	adds	r7, #24
 8004450:	46bd      	mov	sp, r7
 8004452:	bd80      	pop	{r7, pc}

08004454 <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b086      	sub	sp, #24
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800445c:	2300      	movs	r3, #0
 800445e:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 8004460:	2300      	movs	r3, #0
 8004462:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	LoopNb = 0;
 8004464:	2300      	movs	r3, #0
 8004466:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8004468:	f107 030f 	add.w	r3, r7, #15
 800446c:	4619      	mov	r1, r3
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	f7fe fdff 	bl	8003072 <VL53L0X_GetMeasurementDataReady>
 8004474:	4603      	mov	r3, r0
 8004476:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 8004478:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d10f      	bne.n	80044a0 <VL53L0X_measurement_poll_for_completion+0x4c>
			break; /* the error is set */

		if (NewDataReady == 1)
 8004480:	7bfb      	ldrb	r3, [r7, #15]
 8004482:	2b01      	cmp	r3, #1
 8004484:	d00e      	beq.n	80044a4 <VL53L0X_measurement_poll_for_completion+0x50>
			break; /* done note that status == 0 */

		LoopNb++;
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	3301      	adds	r3, #1
 800448a:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	2bc7      	cmp	r3, #199	; 0xc7
 8004490:	d902      	bls.n	8004498 <VL53L0X_measurement_poll_for_completion+0x44>
			Status = VL53L0X_ERROR_TIME_OUT;
 8004492:	23f9      	movs	r3, #249	; 0xf9
 8004494:	75fb      	strb	r3, [r7, #23]
			break;
 8004496:	e006      	b.n	80044a6 <VL53L0X_measurement_poll_for_completion+0x52>
		}

		VL53L0X_PollingDelay(Dev);
 8004498:	6878      	ldr	r0, [r7, #4]
 800449a:	f002 fd0d 	bl	8006eb8 <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 800449e:	e7e3      	b.n	8004468 <VL53L0X_measurement_poll_for_completion+0x14>
			break; /* the error is set */
 80044a0:	bf00      	nop
 80044a2:	e000      	b.n	80044a6 <VL53L0X_measurement_poll_for_completion+0x52>
			break; /* done note that status == 0 */
 80044a4:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
 80044a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	3718      	adds	r7, #24
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}

080044b2 <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 80044b2:	b480      	push	{r7}
 80044b4:	b085      	sub	sp, #20
 80044b6:	af00      	add	r7, sp, #0
 80044b8:	4603      	mov	r3, r0
 80044ba:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 80044bc:	2300      	movs	r3, #0
 80044be:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 80044c0:	79fb      	ldrb	r3, [r7, #7]
 80044c2:	3301      	adds	r3, #1
 80044c4:	b2db      	uxtb	r3, r3
 80044c6:	005b      	lsls	r3, r3, #1
 80044c8:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 80044ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80044cc:	4618      	mov	r0, r3
 80044ce:	3714      	adds	r7, #20
 80044d0:	46bd      	mov	sp, r7
 80044d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d6:	4770      	bx	lr

080044d8 <VL53L0X_encode_vcsel_period>:

uint8_t VL53L0X_encode_vcsel_period(uint8_t vcsel_period_pclks)
{
 80044d8:	b480      	push	{r7}
 80044da:	b085      	sub	sp, #20
 80044dc:	af00      	add	r7, sp, #0
 80044de:	4603      	mov	r3, r0
 80044e0:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real period
	 * in PLL clocks
	 */

	uint8_t vcsel_period_reg = 0;
 80044e2:	2300      	movs	r3, #0
 80044e4:	73fb      	strb	r3, [r7, #15]

	vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;
 80044e6:	79fb      	ldrb	r3, [r7, #7]
 80044e8:	085b      	lsrs	r3, r3, #1
 80044ea:	b2db      	uxtb	r3, r3
 80044ec:	3b01      	subs	r3, #1
 80044ee:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_reg;
 80044f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80044f2:	4618      	mov	r0, r3
 80044f4:	3714      	adds	r7, #20
 80044f6:	46bd      	mov	sp, r7
 80044f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fc:	4770      	bx	lr

080044fe <VL53L0X_isqrt>:


uint32_t VL53L0X_isqrt(uint32_t num)
{
 80044fe:	b480      	push	{r7}
 8004500:	b085      	sub	sp, #20
 8004502:	af00      	add	r7, sp, #0
 8004504:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 8004506:	2300      	movs	r3, #0
 8004508:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 800450a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800450e:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 8004510:	e002      	b.n	8004518 <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	089b      	lsrs	r3, r3, #2
 8004516:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 8004518:	68ba      	ldr	r2, [r7, #8]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	429a      	cmp	r2, r3
 800451e:	d8f8      	bhi.n	8004512 <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 8004520:	e017      	b.n	8004552 <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 8004522:	68fa      	ldr	r2, [r7, #12]
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	4413      	add	r3, r2
 8004528:	687a      	ldr	r2, [r7, #4]
 800452a:	429a      	cmp	r2, r3
 800452c:	d30b      	bcc.n	8004546 <VL53L0X_isqrt+0x48>
			num -= res + bit;
 800452e:	68fa      	ldr	r2, [r7, #12]
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	4413      	add	r3, r2
 8004534:	687a      	ldr	r2, [r7, #4]
 8004536:	1ad3      	subs	r3, r2, r3
 8004538:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	085b      	lsrs	r3, r3, #1
 800453e:	68ba      	ldr	r2, [r7, #8]
 8004540:	4413      	add	r3, r2
 8004542:	60fb      	str	r3, [r7, #12]
 8004544:	e002      	b.n	800454c <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	085b      	lsrs	r3, r3, #1
 800454a:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	089b      	lsrs	r3, r3, #2
 8004550:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d1e4      	bne.n	8004522 <VL53L0X_isqrt+0x24>
	}

	return res;
 8004558:	68fb      	ldr	r3, [r7, #12]
}
 800455a:	4618      	mov	r0, r3
 800455c:	3714      	adds	r7, #20
 800455e:	46bd      	mov	sp, r7
 8004560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004564:	4770      	bx	lr

08004566 <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 8004566:	b580      	push	{r7, lr}
 8004568:	b086      	sub	sp, #24
 800456a:	af00      	add	r7, sp, #0
 800456c:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800456e:	2300      	movs	r3, #0
 8004570:	75fb      	strb	r3, [r7, #23]
	uint8_t strobe;
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 8004572:	2200      	movs	r2, #0
 8004574:	2183      	movs	r1, #131	; 0x83
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	f002 fc1c 	bl	8006db4 <VL53L0X_WrByte>
 800457c:	4603      	mov	r3, r0
 800457e:	461a      	mov	r2, r3
 8004580:	7dfb      	ldrb	r3, [r7, #23]
 8004582:	4313      	orrs	r3, r2
 8004584:	75fb      	strb	r3, [r7, #23]

	/* polling
	 * use timeout to avoid deadlock*/
	if (Status == VL53L0X_ERROR_NONE) {
 8004586:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d11c      	bne.n	80045c8 <VL53L0X_device_read_strobe+0x62>
		LoopNb = 0;
 800458e:	2300      	movs	r3, #0
 8004590:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 8004592:	f107 030f 	add.w	r3, r7, #15
 8004596:	461a      	mov	r2, r3
 8004598:	2183      	movs	r1, #131	; 0x83
 800459a:	6878      	ldr	r0, [r7, #4]
 800459c:	f002 fb0f 	bl	8006bbe <VL53L0X_RdByte>
 80045a0:	4603      	mov	r3, r0
 80045a2:	75fb      	strb	r3, [r7, #23]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 80045a4:	7bfb      	ldrb	r3, [r7, #15]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d109      	bne.n	80045be <VL53L0X_device_read_strobe+0x58>
 80045aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d105      	bne.n	80045be <VL53L0X_device_read_strobe+0x58>
					break;

			LoopNb = LoopNb + 1;
 80045b2:	693b      	ldr	r3, [r7, #16]
 80045b4:	3301      	adds	r3, #1
 80045b6:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	2bc7      	cmp	r3, #199	; 0xc7
 80045bc:	d9e9      	bls.n	8004592 <VL53L0X_device_read_strobe+0x2c>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	2bc7      	cmp	r3, #199	; 0xc7
 80045c2:	d901      	bls.n	80045c8 <VL53L0X_device_read_strobe+0x62>
			Status = VL53L0X_ERROR_TIME_OUT;
 80045c4:	23f9      	movs	r3, #249	; 0xf9
 80045c6:	75fb      	strb	r3, [r7, #23]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 80045c8:	2201      	movs	r2, #1
 80045ca:	2183      	movs	r1, #131	; 0x83
 80045cc:	6878      	ldr	r0, [r7, #4]
 80045ce:	f002 fbf1 	bl	8006db4 <VL53L0X_WrByte>
 80045d2:	4603      	mov	r3, r0
 80045d4:	461a      	mov	r2, r3
 80045d6:	7dfb      	ldrb	r3, [r7, #23]
 80045d8:	4313      	orrs	r3, r2
 80045da:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
	return Status;
 80045dc:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 80045e0:	4618      	mov	r0, r3
 80045e2:	3718      	adds	r7, #24
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd80      	pop	{r7, pc}

080045e8 <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b098      	sub	sp, #96	; 0x60
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
 80045f0:	460b      	mov	r3, r1
 80045f2:	70fb      	strb	r3, [r7, #3]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80045f4:	2300      	movs	r3, #0
 80045f6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 80045fa:	2300      	movs	r3, #0
 80045fc:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t ReferenceSpadType = 0;
 8004600:	2300      	movs	r3, #0
 8004602:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	uint32_t PartUIDUpper = 0;
 8004606:	2300      	movs	r3, #0
 8004608:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PartUIDLower = 0;
 800460a:	2300      	movs	r3, #0
 800460c:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t OffsetFixed1104_mm = 0;
 800460e:	2300      	movs	r3, #0
 8004610:	64bb      	str	r3, [r7, #72]	; 0x48
	int16_t OffsetMicroMeters = 0;
 8004612:	2300      	movs	r3, #0
 8004614:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 8004618:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800461c:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 800461e:	2300      	movs	r3, #0
 8004620:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 8004622:	2300      	movs	r3, #0
 8004624:	653b      	str	r3, [r7, #80]	; 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 8004626:	2300      	movs	r3, #0
 8004628:	643b      	str	r3, [r7, #64]	; 0x40
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 8004630:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done*/
	if (ReadDataFromDeviceDone != 7) {
 8004634:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004638:	2b07      	cmp	r3, #7
 800463a:	f000 8408 	beq.w	8004e4e <VL53L0X_get_info_from_device+0x866>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800463e:	2201      	movs	r2, #1
 8004640:	2180      	movs	r1, #128	; 0x80
 8004642:	6878      	ldr	r0, [r7, #4]
 8004644:	f002 fbb6 	bl	8006db4 <VL53L0X_WrByte>
 8004648:	4603      	mov	r3, r0
 800464a:	461a      	mov	r2, r3
 800464c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004650:	4313      	orrs	r3, r2
 8004652:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8004656:	2201      	movs	r2, #1
 8004658:	21ff      	movs	r1, #255	; 0xff
 800465a:	6878      	ldr	r0, [r7, #4]
 800465c:	f002 fbaa 	bl	8006db4 <VL53L0X_WrByte>
 8004660:	4603      	mov	r3, r0
 8004662:	461a      	mov	r2, r3
 8004664:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004668:	4313      	orrs	r3, r2
 800466a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800466e:	2200      	movs	r2, #0
 8004670:	2100      	movs	r1, #0
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	f002 fb9e 	bl	8006db4 <VL53L0X_WrByte>
 8004678:	4603      	mov	r3, r0
 800467a:	461a      	mov	r2, r3
 800467c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004680:	4313      	orrs	r3, r2
 8004682:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8004686:	2206      	movs	r2, #6
 8004688:	21ff      	movs	r1, #255	; 0xff
 800468a:	6878      	ldr	r0, [r7, #4]
 800468c:	f002 fb92 	bl	8006db4 <VL53L0X_WrByte>
 8004690:	4603      	mov	r3, r0
 8004692:	461a      	mov	r2, r3
 8004694:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004698:	4313      	orrs	r3, r2
 800469a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 800469e:	f107 0337 	add.w	r3, r7, #55	; 0x37
 80046a2:	461a      	mov	r2, r3
 80046a4:	2183      	movs	r1, #131	; 0x83
 80046a6:	6878      	ldr	r0, [r7, #4]
 80046a8:	f002 fa89 	bl	8006bbe <VL53L0X_RdByte>
 80046ac:	4603      	mov	r3, r0
 80046ae:	461a      	mov	r2, r3
 80046b0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80046b4:	4313      	orrs	r3, r2
 80046b6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 80046ba:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80046be:	f043 0304 	orr.w	r3, r3, #4
 80046c2:	b2db      	uxtb	r3, r3
 80046c4:	461a      	mov	r2, r3
 80046c6:	2183      	movs	r1, #131	; 0x83
 80046c8:	6878      	ldr	r0, [r7, #4]
 80046ca:	f002 fb73 	bl	8006db4 <VL53L0X_WrByte>
 80046ce:	4603      	mov	r3, r0
 80046d0:	461a      	mov	r2, r3
 80046d2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80046d6:	4313      	orrs	r3, r2
 80046d8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 80046dc:	2207      	movs	r2, #7
 80046de:	21ff      	movs	r1, #255	; 0xff
 80046e0:	6878      	ldr	r0, [r7, #4]
 80046e2:	f002 fb67 	bl	8006db4 <VL53L0X_WrByte>
 80046e6:	4603      	mov	r3, r0
 80046e8:	461a      	mov	r2, r3
 80046ea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80046ee:	4313      	orrs	r3, r2
 80046f0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 80046f4:	2201      	movs	r2, #1
 80046f6:	2181      	movs	r1, #129	; 0x81
 80046f8:	6878      	ldr	r0, [r7, #4]
 80046fa:	f002 fb5b 	bl	8006db4 <VL53L0X_WrByte>
 80046fe:	4603      	mov	r3, r0
 8004700:	461a      	mov	r2, r3
 8004702:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004706:	4313      	orrs	r3, r2
 8004708:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_PollingDelay(Dev);
 800470c:	6878      	ldr	r0, [r7, #4]
 800470e:	f002 fbd3 	bl	8006eb8 <VL53L0X_PollingDelay>
 8004712:	4603      	mov	r3, r0
 8004714:	461a      	mov	r2, r3
 8004716:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800471a:	4313      	orrs	r3, r2
 800471c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8004720:	2201      	movs	r2, #1
 8004722:	2180      	movs	r1, #128	; 0x80
 8004724:	6878      	ldr	r0, [r7, #4]
 8004726:	f002 fb45 	bl	8006db4 <VL53L0X_WrByte>
 800472a:	4603      	mov	r3, r0
 800472c:	461a      	mov	r2, r3
 800472e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004732:	4313      	orrs	r3, r2
 8004734:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		if (((option & 1) == 1) &&
 8004738:	78fb      	ldrb	r3, [r7, #3]
 800473a:	f003 0301 	and.w	r3, r3, #1
 800473e:	2b00      	cmp	r3, #0
 8004740:	f000 8098 	beq.w	8004874 <VL53L0X_get_info_from_device+0x28c>
			((ReadDataFromDeviceDone & 1) == 0)) {
 8004744:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004748:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 800474c:	2b00      	cmp	r3, #0
 800474e:	f040 8091 	bne.w	8004874 <VL53L0X_get_info_from_device+0x28c>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 8004752:	226b      	movs	r2, #107	; 0x6b
 8004754:	2194      	movs	r1, #148	; 0x94
 8004756:	6878      	ldr	r0, [r7, #4]
 8004758:	f002 fb2c 	bl	8006db4 <VL53L0X_WrByte>
 800475c:	4603      	mov	r3, r0
 800475e:	461a      	mov	r2, r3
 8004760:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004764:	4313      	orrs	r3, r2
 8004766:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	f7ff fefb 	bl	8004566 <VL53L0X_device_read_strobe>
 8004770:	4603      	mov	r3, r0
 8004772:	461a      	mov	r2, r3
 8004774:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004778:	4313      	orrs	r3, r2
 800477a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800477e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004782:	461a      	mov	r2, r3
 8004784:	2190      	movs	r1, #144	; 0x90
 8004786:	6878      	ldr	r0, [r7, #4]
 8004788:	f002 fad8 	bl	8006d3c <VL53L0X_RdDWord>
 800478c:	4603      	mov	r3, r0
 800478e:	461a      	mov	r2, r3
 8004790:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004794:	4313      	orrs	r3, r2
 8004796:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 800479a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800479c:	0a1b      	lsrs	r3, r3, #8
 800479e:	b2db      	uxtb	r3, r3
 80047a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80047a4:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 80047a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047aa:	0bdb      	lsrs	r3, r3, #15
 80047ac:	b2db      	uxtb	r3, r3
 80047ae:	f003 0301 	and.w	r3, r3, #1
 80047b2:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 80047b6:	2224      	movs	r2, #36	; 0x24
 80047b8:	2194      	movs	r1, #148	; 0x94
 80047ba:	6878      	ldr	r0, [r7, #4]
 80047bc:	f002 fafa 	bl	8006db4 <VL53L0X_WrByte>
 80047c0:	4603      	mov	r3, r0
 80047c2:	461a      	mov	r2, r3
 80047c4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80047c8:	4313      	orrs	r3, r2
 80047ca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80047ce:	6878      	ldr	r0, [r7, #4]
 80047d0:	f7ff fec9 	bl	8004566 <VL53L0X_device_read_strobe>
 80047d4:	4603      	mov	r3, r0
 80047d6:	461a      	mov	r2, r3
 80047d8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80047dc:	4313      	orrs	r3, r2
 80047de:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80047e2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80047e6:	461a      	mov	r2, r3
 80047e8:	2190      	movs	r1, #144	; 0x90
 80047ea:	6878      	ldr	r0, [r7, #4]
 80047ec:	f002 faa6 	bl	8006d3c <VL53L0X_RdDWord>
 80047f0:	4603      	mov	r3, r0
 80047f2:	461a      	mov	r2, r3
 80047f4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80047f8:	4313      	orrs	r3, r2
 80047fa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 80047fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004800:	0e1b      	lsrs	r3, r3, #24
 8004802:	b2db      	uxtb	r3, r3
 8004804:	723b      	strb	r3, [r7, #8]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 8004806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004808:	0c1b      	lsrs	r3, r3, #16
 800480a:	b2db      	uxtb	r3, r3
 800480c:	727b      	strb	r3, [r7, #9]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 800480e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004810:	0a1b      	lsrs	r3, r3, #8
 8004812:	b2db      	uxtb	r3, r3
 8004814:	72bb      	strb	r3, [r7, #10]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 8004816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004818:	b2db      	uxtb	r3, r3
 800481a:	72fb      	strb	r3, [r7, #11]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 800481c:	2225      	movs	r2, #37	; 0x25
 800481e:	2194      	movs	r1, #148	; 0x94
 8004820:	6878      	ldr	r0, [r7, #4]
 8004822:	f002 fac7 	bl	8006db4 <VL53L0X_WrByte>
 8004826:	4603      	mov	r3, r0
 8004828:	461a      	mov	r2, r3
 800482a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800482e:	4313      	orrs	r3, r2
 8004830:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8004834:	6878      	ldr	r0, [r7, #4]
 8004836:	f7ff fe96 	bl	8004566 <VL53L0X_device_read_strobe>
 800483a:	4603      	mov	r3, r0
 800483c:	461a      	mov	r2, r3
 800483e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004842:	4313      	orrs	r3, r2
 8004844:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8004848:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800484c:	461a      	mov	r2, r3
 800484e:	2190      	movs	r1, #144	; 0x90
 8004850:	6878      	ldr	r0, [r7, #4]
 8004852:	f002 fa73 	bl	8006d3c <VL53L0X_RdDWord>
 8004856:	4603      	mov	r3, r0
 8004858:	461a      	mov	r2, r3
 800485a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800485e:	4313      	orrs	r3, r2
 8004860:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 8004864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004866:	0e1b      	lsrs	r3, r3, #24
 8004868:	b2db      	uxtb	r3, r3
 800486a:	733b      	strb	r3, [r7, #12]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 800486c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800486e:	0c1b      	lsrs	r3, r3, #16
 8004870:	b2db      	uxtb	r3, r3
 8004872:	737b      	strb	r3, [r7, #13]
				& 0xff);
		}

		if (((option & 2) == 2) &&
 8004874:	78fb      	ldrb	r3, [r7, #3]
 8004876:	f003 0302 	and.w	r3, r3, #2
 800487a:	2b00      	cmp	r3, #0
 800487c:	f000 8189 	beq.w	8004b92 <VL53L0X_get_info_from_device+0x5aa>
			((ReadDataFromDeviceDone & 2) == 0)) {
 8004880:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004884:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 8004888:	2b00      	cmp	r3, #0
 800488a:	f040 8182 	bne.w	8004b92 <VL53L0X_get_info_from_device+0x5aa>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 800488e:	2202      	movs	r2, #2
 8004890:	2194      	movs	r1, #148	; 0x94
 8004892:	6878      	ldr	r0, [r7, #4]
 8004894:	f002 fa8e 	bl	8006db4 <VL53L0X_WrByte>
 8004898:	4603      	mov	r3, r0
 800489a:	461a      	mov	r2, r3
 800489c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80048a0:	4313      	orrs	r3, r2
 80048a2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80048a6:	6878      	ldr	r0, [r7, #4]
 80048a8:	f7ff fe5d 	bl	8004566 <VL53L0X_device_read_strobe>
 80048ac:	4603      	mov	r3, r0
 80048ae:	461a      	mov	r2, r3
 80048b0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80048b4:	4313      	orrs	r3, r2
 80048b6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 80048ba:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 80048be:	461a      	mov	r2, r3
 80048c0:	2190      	movs	r1, #144	; 0x90
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	f002 f97b 	bl	8006bbe <VL53L0X_RdByte>
 80048c8:	4603      	mov	r3, r0
 80048ca:	461a      	mov	r2, r3
 80048cc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80048d0:	4313      	orrs	r3, r2
 80048d2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 80048d6:	227b      	movs	r2, #123	; 0x7b
 80048d8:	2194      	movs	r1, #148	; 0x94
 80048da:	6878      	ldr	r0, [r7, #4]
 80048dc:	f002 fa6a 	bl	8006db4 <VL53L0X_WrByte>
 80048e0:	4603      	mov	r3, r0
 80048e2:	461a      	mov	r2, r3
 80048e4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80048e8:	4313      	orrs	r3, r2
 80048ea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	f7ff fe39 	bl	8004566 <VL53L0X_device_read_strobe>
 80048f4:	4603      	mov	r3, r0
 80048f6:	461a      	mov	r2, r3
 80048f8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80048fc:	4313      	orrs	r3, r2
 80048fe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 8004902:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8004906:	461a      	mov	r2, r3
 8004908:	2190      	movs	r1, #144	; 0x90
 800490a:	6878      	ldr	r0, [r7, #4]
 800490c:	f002 f957 	bl	8006bbe <VL53L0X_RdByte>
 8004910:	4603      	mov	r3, r0
 8004912:	461a      	mov	r2, r3
 8004914:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004918:	4313      	orrs	r3, r2
 800491a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 800491e:	2277      	movs	r2, #119	; 0x77
 8004920:	2194      	movs	r1, #148	; 0x94
 8004922:	6878      	ldr	r0, [r7, #4]
 8004924:	f002 fa46 	bl	8006db4 <VL53L0X_WrByte>
 8004928:	4603      	mov	r3, r0
 800492a:	461a      	mov	r2, r3
 800492c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004930:	4313      	orrs	r3, r2
 8004932:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8004936:	6878      	ldr	r0, [r7, #4]
 8004938:	f7ff fe15 	bl	8004566 <VL53L0X_device_read_strobe>
 800493c:	4603      	mov	r3, r0
 800493e:	461a      	mov	r2, r3
 8004940:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004944:	4313      	orrs	r3, r2
 8004946:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800494a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800494e:	461a      	mov	r2, r3
 8004950:	2190      	movs	r1, #144	; 0x90
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	f002 f9f2 	bl	8006d3c <VL53L0X_RdDWord>
 8004958:	4603      	mov	r3, r0
 800495a:	461a      	mov	r2, r3
 800495c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004960:	4313      	orrs	r3, r2
 8004962:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 8004966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004968:	0e5b      	lsrs	r3, r3, #25
 800496a:	b2db      	uxtb	r3, r3
 800496c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004970:	b2db      	uxtb	r3, r3
 8004972:	743b      	strb	r3, [r7, #16]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 8004974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004976:	0c9b      	lsrs	r3, r3, #18
 8004978:	b2db      	uxtb	r3, r3
 800497a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800497e:	b2db      	uxtb	r3, r3
 8004980:	747b      	strb	r3, [r7, #17]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 8004982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004984:	0adb      	lsrs	r3, r3, #11
 8004986:	b2db      	uxtb	r3, r3
 8004988:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800498c:	b2db      	uxtb	r3, r3
 800498e:	74bb      	strb	r3, [r7, #18]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 8004990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004992:	091b      	lsrs	r3, r3, #4
 8004994:	b2db      	uxtb	r3, r3
 8004996:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800499a:	b2db      	uxtb	r3, r3
 800499c:	74fb      	strb	r3, [r7, #19]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 800499e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049a0:	b2db      	uxtb	r3, r3
 80049a2:	00db      	lsls	r3, r3, #3
 80049a4:	b2db      	uxtb	r3, r3
 80049a6:	f003 0378 	and.w	r3, r3, #120	; 0x78
 80049aa:	b2db      	uxtb	r3, r3
 80049ac:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 80049b0:	2278      	movs	r2, #120	; 0x78
 80049b2:	2194      	movs	r1, #148	; 0x94
 80049b4:	6878      	ldr	r0, [r7, #4]
 80049b6:	f002 f9fd 	bl	8006db4 <VL53L0X_WrByte>
 80049ba:	4603      	mov	r3, r0
 80049bc:	461a      	mov	r2, r3
 80049be:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80049c2:	4313      	orrs	r3, r2
 80049c4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80049c8:	6878      	ldr	r0, [r7, #4]
 80049ca:	f7ff fdcc 	bl	8004566 <VL53L0X_device_read_strobe>
 80049ce:	4603      	mov	r3, r0
 80049d0:	461a      	mov	r2, r3
 80049d2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80049d6:	4313      	orrs	r3, r2
 80049d8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80049dc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80049e0:	461a      	mov	r2, r3
 80049e2:	2190      	movs	r1, #144	; 0x90
 80049e4:	6878      	ldr	r0, [r7, #4]
 80049e6:	f002 f9a9 	bl	8006d3c <VL53L0X_RdDWord>
 80049ea:	4603      	mov	r3, r0
 80049ec:	461a      	mov	r2, r3
 80049ee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80049f2:	4313      	orrs	r3, r2
 80049f4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 80049f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049fa:	0f5b      	lsrs	r3, r3, #29
 80049fc:	b2db      	uxtb	r3, r3
 80049fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a02:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 8004a04:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004a08:	4413      	add	r3, r2
 8004a0a:	b2db      	uxtb	r3, r3
 8004a0c:	753b      	strb	r3, [r7, #20]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 8004a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a10:	0d9b      	lsrs	r3, r3, #22
 8004a12:	b2db      	uxtb	r3, r3
 8004a14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a18:	b2db      	uxtb	r3, r3
 8004a1a:	757b      	strb	r3, [r7, #21]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 8004a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a1e:	0bdb      	lsrs	r3, r3, #15
 8004a20:	b2db      	uxtb	r3, r3
 8004a22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a26:	b2db      	uxtb	r3, r3
 8004a28:	75bb      	strb	r3, [r7, #22]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 8004a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a2c:	0a1b      	lsrs	r3, r3, #8
 8004a2e:	b2db      	uxtb	r3, r3
 8004a30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a34:	b2db      	uxtb	r3, r3
 8004a36:	75fb      	strb	r3, [r7, #23]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 8004a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a3a:	085b      	lsrs	r3, r3, #1
 8004a3c:	b2db      	uxtb	r3, r3
 8004a3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a42:	b2db      	uxtb	r3, r3
 8004a44:	763b      	strb	r3, [r7, #24]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 8004a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a48:	b2db      	uxtb	r3, r3
 8004a4a:	019b      	lsls	r3, r3, #6
 8004a4c:	b2db      	uxtb	r3, r3
 8004a4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a52:	b2db      	uxtb	r3, r3
 8004a54:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 8004a58:	2279      	movs	r2, #121	; 0x79
 8004a5a:	2194      	movs	r1, #148	; 0x94
 8004a5c:	6878      	ldr	r0, [r7, #4]
 8004a5e:	f002 f9a9 	bl	8006db4 <VL53L0X_WrByte>
 8004a62:	4603      	mov	r3, r0
 8004a64:	461a      	mov	r2, r3
 8004a66:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 8004a70:	6878      	ldr	r0, [r7, #4]
 8004a72:	f7ff fd78 	bl	8004566 <VL53L0X_device_read_strobe>
 8004a76:	4603      	mov	r3, r0
 8004a78:	461a      	mov	r2, r3
 8004a7a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8004a84:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004a88:	461a      	mov	r2, r3
 8004a8a:	2190      	movs	r1, #144	; 0x90
 8004a8c:	6878      	ldr	r0, [r7, #4]
 8004a8e:	f002 f955 	bl	8006d3c <VL53L0X_RdDWord>
 8004a92:	4603      	mov	r3, r0
 8004a94:	461a      	mov	r2, r3
 8004a96:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 8004aa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aa2:	0e9b      	lsrs	r3, r3, #26
 8004aa4:	b2db      	uxtb	r3, r3
 8004aa6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004aaa:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 8004aac:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004ab0:	4413      	add	r3, r2
 8004ab2:	b2db      	uxtb	r3, r3
 8004ab4:	767b      	strb	r3, [r7, #25]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 8004ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ab8:	0cdb      	lsrs	r3, r3, #19
 8004aba:	b2db      	uxtb	r3, r3
 8004abc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ac0:	b2db      	uxtb	r3, r3
 8004ac2:	76bb      	strb	r3, [r7, #26]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 8004ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ac6:	0b1b      	lsrs	r3, r3, #12
 8004ac8:	b2db      	uxtb	r3, r3
 8004aca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ace:	b2db      	uxtb	r3, r3
 8004ad0:	76fb      	strb	r3, [r7, #27]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 8004ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ad4:	095b      	lsrs	r3, r3, #5
 8004ad6:	b2db      	uxtb	r3, r3
 8004ad8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004adc:	b2db      	uxtb	r3, r3
 8004ade:	773b      	strb	r3, [r7, #28]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 8004ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ae2:	b2db      	uxtb	r3, r3
 8004ae4:	009b      	lsls	r3, r3, #2
 8004ae6:	b2db      	uxtb	r3, r3
 8004ae8:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8004aec:	b2db      	uxtb	r3, r3
 8004aee:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 8004af2:	227a      	movs	r2, #122	; 0x7a
 8004af4:	2194      	movs	r1, #148	; 0x94
 8004af6:	6878      	ldr	r0, [r7, #4]
 8004af8:	f002 f95c 	bl	8006db4 <VL53L0X_WrByte>
 8004afc:	4603      	mov	r3, r0
 8004afe:	461a      	mov	r2, r3
 8004b00:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004b04:	4313      	orrs	r3, r2
 8004b06:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 8004b0a:	6878      	ldr	r0, [r7, #4]
 8004b0c:	f7ff fd2b 	bl	8004566 <VL53L0X_device_read_strobe>
 8004b10:	4603      	mov	r3, r0
 8004b12:	461a      	mov	r2, r3
 8004b14:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8004b1e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004b22:	461a      	mov	r2, r3
 8004b24:	2190      	movs	r1, #144	; 0x90
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	f002 f908 	bl	8006d3c <VL53L0X_RdDWord>
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	461a      	mov	r2, r3
 8004b30:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004b34:	4313      	orrs	r3, r2
 8004b36:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 8004b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b3c:	0f9b      	lsrs	r3, r3, #30
 8004b3e:	b2db      	uxtb	r3, r3
 8004b40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b44:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 8004b46:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004b4a:	4413      	add	r3, r2
 8004b4c:	b2db      	uxtb	r3, r3
 8004b4e:	777b      	strb	r3, [r7, #29]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 8004b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b52:	0ddb      	lsrs	r3, r3, #23
 8004b54:	b2db      	uxtb	r3, r3
 8004b56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b5a:	b2db      	uxtb	r3, r3
 8004b5c:	77bb      	strb	r3, [r7, #30]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 8004b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b60:	0c1b      	lsrs	r3, r3, #16
 8004b62:	b2db      	uxtb	r3, r3
 8004b64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b68:	b2db      	uxtb	r3, r3
 8004b6a:	77fb      	strb	r3, [r7, #31]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 8004b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b6e:	0a5b      	lsrs	r3, r3, #9
 8004b70:	b2db      	uxtb	r3, r3
 8004b72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b76:	b2db      	uxtb	r3, r3
 8004b78:	f887 3020 	strb.w	r3, [r7, #32]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 8004b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b7e:	089b      	lsrs	r3, r3, #2
 8004b80:	b2db      	uxtb	r3, r3
 8004b82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b86:	b2db      	uxtb	r3, r3
 8004b88:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			ProductId[18] = '\0';
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		}

		if (((option & 4) == 4) &&
 8004b92:	78fb      	ldrb	r3, [r7, #3]
 8004b94:	f003 0304 	and.w	r3, r3, #4
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	f000 80f1 	beq.w	8004d80 <VL53L0X_get_info_from_device+0x798>
			((ReadDataFromDeviceDone & 4) == 0)) {
 8004b9e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004ba2:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	f040 80ea 	bne.w	8004d80 <VL53L0X_get_info_from_device+0x798>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8004bac:	227b      	movs	r2, #123	; 0x7b
 8004bae:	2194      	movs	r1, #148	; 0x94
 8004bb0:	6878      	ldr	r0, [r7, #4]
 8004bb2:	f002 f8ff 	bl	8006db4 <VL53L0X_WrByte>
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	461a      	mov	r2, r3
 8004bba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8004bc4:	6878      	ldr	r0, [r7, #4]
 8004bc6:	f7ff fcce 	bl	8004566 <VL53L0X_device_read_strobe>
 8004bca:	4603      	mov	r3, r0
 8004bcc:	461a      	mov	r2, r3
 8004bce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 8004bd8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004bdc:	461a      	mov	r2, r3
 8004bde:	2190      	movs	r1, #144	; 0x90
 8004be0:	6878      	ldr	r0, [r7, #4]
 8004be2:	f002 f8ab 	bl	8006d3c <VL53L0X_RdDWord>
 8004be6:	4603      	mov	r3, r0
 8004be8:	461a      	mov	r2, r3
 8004bea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 8004bf4:	227c      	movs	r2, #124	; 0x7c
 8004bf6:	2194      	movs	r1, #148	; 0x94
 8004bf8:	6878      	ldr	r0, [r7, #4]
 8004bfa:	f002 f8db 	bl	8006db4 <VL53L0X_WrByte>
 8004bfe:	4603      	mov	r3, r0
 8004c00:	461a      	mov	r2, r3
 8004c02:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004c06:	4313      	orrs	r3, r2
 8004c08:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8004c0c:	6878      	ldr	r0, [r7, #4]
 8004c0e:	f7ff fcaa 	bl	8004566 <VL53L0X_device_read_strobe>
 8004c12:	4603      	mov	r3, r0
 8004c14:	461a      	mov	r2, r3
 8004c16:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 8004c20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004c24:	461a      	mov	r2, r3
 8004c26:	2190      	movs	r1, #144	; 0x90
 8004c28:	6878      	ldr	r0, [r7, #4]
 8004c2a:	f002 f887 	bl	8006d3c <VL53L0X_RdDWord>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	461a      	mov	r2, r3
 8004c32:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004c36:	4313      	orrs	r3, r2
 8004c38:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 8004c3c:	2273      	movs	r2, #115	; 0x73
 8004c3e:	2194      	movs	r1, #148	; 0x94
 8004c40:	6878      	ldr	r0, [r7, #4]
 8004c42:	f002 f8b7 	bl	8006db4 <VL53L0X_WrByte>
 8004c46:	4603      	mov	r3, r0
 8004c48:	461a      	mov	r2, r3
 8004c4a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8004c54:	6878      	ldr	r0, [r7, #4]
 8004c56:	f7ff fc86 	bl	8004566 <VL53L0X_device_read_strobe>
 8004c5a:	4603      	mov	r3, r0
 8004c5c:	461a      	mov	r2, r3
 8004c5e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004c62:	4313      	orrs	r3, r2
 8004c64:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8004c68:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004c6c:	461a      	mov	r2, r3
 8004c6e:	2190      	movs	r1, #144	; 0x90
 8004c70:	6878      	ldr	r0, [r7, #4]
 8004c72:	f002 f863 	bl	8006d3c <VL53L0X_RdDWord>
 8004c76:	4603      	mov	r3, r0
 8004c78:	461a      	mov	r2, r3
 8004c7a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x000000ff) << 8;
 8004c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c86:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 8004c88:	b29b      	uxth	r3, r3
 8004c8a:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 8004c8c:	2274      	movs	r2, #116	; 0x74
 8004c8e:	2194      	movs	r1, #148	; 0x94
 8004c90:	6878      	ldr	r0, [r7, #4]
 8004c92:	f002 f88f 	bl	8006db4 <VL53L0X_WrByte>
 8004c96:	4603      	mov	r3, r0
 8004c98:	461a      	mov	r2, r3
 8004c9a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8004ca4:	6878      	ldr	r0, [r7, #4]
 8004ca6:	f7ff fc5e 	bl	8004566 <VL53L0X_device_read_strobe>
 8004caa:	4603      	mov	r3, r0
 8004cac:	461a      	mov	r2, r3
 8004cae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8004cb8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004cbc:	461a      	mov	r2, r3
 8004cbe:	2190      	movs	r1, #144	; 0x90
 8004cc0:	6878      	ldr	r0, [r7, #4]
 8004cc2:	f002 f83b 	bl	8006d3c <VL53L0X_RdDWord>
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	461a      	mov	r2, r3
 8004cca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 8004cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cd6:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 8004cd8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 8004cde:	2275      	movs	r2, #117	; 0x75
 8004ce0:	2194      	movs	r1, #148	; 0x94
 8004ce2:	6878      	ldr	r0, [r7, #4]
 8004ce4:	f002 f866 	bl	8006db4 <VL53L0X_WrByte>
 8004ce8:	4603      	mov	r3, r0
 8004cea:	461a      	mov	r2, r3
 8004cec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8004cf6:	6878      	ldr	r0, [r7, #4]
 8004cf8:	f7ff fc35 	bl	8004566 <VL53L0X_device_read_strobe>
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	461a      	mov	r2, r3
 8004d00:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004d04:	4313      	orrs	r3, r2
 8004d06:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8004d0a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004d0e:	461a      	mov	r2, r3
 8004d10:	2190      	movs	r1, #144	; 0x90
 8004d12:	6878      	ldr	r0, [r7, #4]
 8004d14:	f002 f812 	bl	8006d3c <VL53L0X_RdDWord>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	461a      	mov	r2, r3
 8004d1c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004d20:	4313      	orrs	r3, r2
 8004d22:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm = (TmpDWord & 0x000000ff)
							<< 8;
 8004d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d28:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x000000ff)
 8004d2a:	b29b      	uxth	r3, r3
 8004d2c:	657b      	str	r3, [r7, #84]	; 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 8004d2e:	2276      	movs	r2, #118	; 0x76
 8004d30:	2194      	movs	r1, #148	; 0x94
 8004d32:	6878      	ldr	r0, [r7, #4]
 8004d34:	f002 f83e 	bl	8006db4 <VL53L0X_WrByte>
 8004d38:	4603      	mov	r3, r0
 8004d3a:	461a      	mov	r2, r3
 8004d3c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004d40:	4313      	orrs	r3, r2
 8004d42:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	f7ff fc0d 	bl	8004566 <VL53L0X_device_read_strobe>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	461a      	mov	r2, r3
 8004d50:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004d54:	4313      	orrs	r3, r2
 8004d56:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8004d5a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004d5e:	461a      	mov	r2, r3
 8004d60:	2190      	movs	r1, #144	; 0x90
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	f001 ffea 	bl	8006d3c <VL53L0X_RdDWord>
 8004d68:	4603      	mov	r3, r0
 8004d6a:	461a      	mov	r2, r3
 8004d6c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004d70:	4313      	orrs	r3, r2
 8004d72:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 8004d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d78:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 8004d7a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	657b      	str	r3, [r7, #84]	; 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 8004d80:	2200      	movs	r2, #0
 8004d82:	2181      	movs	r1, #129	; 0x81
 8004d84:	6878      	ldr	r0, [r7, #4]
 8004d86:	f002 f815 	bl	8006db4 <VL53L0X_WrByte>
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	461a      	mov	r2, r3
 8004d8e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004d92:	4313      	orrs	r3, r2
 8004d94:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8004d98:	2206      	movs	r2, #6
 8004d9a:	21ff      	movs	r1, #255	; 0xff
 8004d9c:	6878      	ldr	r0, [r7, #4]
 8004d9e:	f002 f809 	bl	8006db4 <VL53L0X_WrByte>
 8004da2:	4603      	mov	r3, r0
 8004da4:	461a      	mov	r2, r3
 8004da6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004daa:	4313      	orrs	r3, r2
 8004dac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8004db0:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8004db4:	461a      	mov	r2, r3
 8004db6:	2183      	movs	r1, #131	; 0x83
 8004db8:	6878      	ldr	r0, [r7, #4]
 8004dba:	f001 ff00 	bl	8006bbe <VL53L0X_RdByte>
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	461a      	mov	r2, r3
 8004dc2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 8004dcc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004dd0:	f023 0304 	bic.w	r3, r3, #4
 8004dd4:	b2db      	uxtb	r3, r3
 8004dd6:	461a      	mov	r2, r3
 8004dd8:	2183      	movs	r1, #131	; 0x83
 8004dda:	6878      	ldr	r0, [r7, #4]
 8004ddc:	f001 ffea 	bl	8006db4 <VL53L0X_WrByte>
 8004de0:	4603      	mov	r3, r0
 8004de2:	461a      	mov	r2, r3
 8004de4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004de8:	4313      	orrs	r3, r2
 8004dea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8004dee:	2201      	movs	r2, #1
 8004df0:	21ff      	movs	r1, #255	; 0xff
 8004df2:	6878      	ldr	r0, [r7, #4]
 8004df4:	f001 ffde 	bl	8006db4 <VL53L0X_WrByte>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	461a      	mov	r2, r3
 8004dfc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004e00:	4313      	orrs	r3, r2
 8004e02:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8004e06:	2201      	movs	r2, #1
 8004e08:	2100      	movs	r1, #0
 8004e0a:	6878      	ldr	r0, [r7, #4]
 8004e0c:	f001 ffd2 	bl	8006db4 <VL53L0X_WrByte>
 8004e10:	4603      	mov	r3, r0
 8004e12:	461a      	mov	r2, r3
 8004e14:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8004e1e:	2200      	movs	r2, #0
 8004e20:	21ff      	movs	r1, #255	; 0xff
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	f001 ffc6 	bl	8006db4 <VL53L0X_WrByte>
 8004e28:	4603      	mov	r3, r0
 8004e2a:	461a      	mov	r2, r3
 8004e2c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004e30:	4313      	orrs	r3, r2
 8004e32:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8004e36:	2200      	movs	r2, #0
 8004e38:	2180      	movs	r1, #128	; 0x80
 8004e3a:	6878      	ldr	r0, [r7, #4]
 8004e3c:	f001 ffba 	bl	8006db4 <VL53L0X_WrByte>
 8004e40:	4603      	mov	r3, r0
 8004e42:	461a      	mov	r2, r3
 8004e44:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8004e4e:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	f040 808f 	bne.w	8004f76 <VL53L0X_get_info_from_device+0x98e>
 8004e58:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004e5c:	2b07      	cmp	r3, #7
 8004e5e:	f000 808a 	beq.w	8004f76 <VL53L0X_get_info_from_device+0x98e>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 8004e62:	78fb      	ldrb	r3, [r7, #3]
 8004e64:	f003 0301 	and.w	r3, r3, #1
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d024      	beq.n	8004eb6 <VL53L0X_get_info_from_device+0x8ce>
			((ReadDataFromDeviceDone & 1) == 0)) {
 8004e6c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004e70:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d11e      	bne.n	8004eb6 <VL53L0X_get_info_from_device+0x8ce>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 8004e7e:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 8004e88:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e90:	e00e      	b.n	8004eb0 <VL53L0X_get_info_from_device+0x8c8>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 8004e92:	f107 0208 	add.w	r2, r7, #8
 8004e96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e98:	4413      	add	r3, r2
 8004e9a:	7819      	ldrb	r1, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 8004e9c:	687a      	ldr	r2, [r7, #4]
 8004e9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ea0:	4413      	add	r3, r2
 8004ea2:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 8004ea6:	460a      	mov	r2, r1
 8004ea8:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8004eaa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004eac:	3301      	adds	r3, #1
 8004eae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004eb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004eb2:	2b05      	cmp	r3, #5
 8004eb4:	dded      	ble.n	8004e92 <VL53L0X_get_info_from_device+0x8aa>
			}
		}

		if (((option & 2) == 2) &&
 8004eb6:	78fb      	ldrb	r3, [r7, #3]
 8004eb8:	f003 0302 	and.w	r3, r3, #2
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d018      	beq.n	8004ef2 <VL53L0X_get_info_from_device+0x90a>
			((ReadDataFromDeviceDone & 2) == 0)) {
 8004ec0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004ec4:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d112      	bne.n	8004ef2 <VL53L0X_get_info_from_device+0x90a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8004ecc:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8004ed6:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	33f3      	adds	r3, #243	; 0xf3
 8004ee4:	63bb      	str	r3, [r7, #56]	; 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 8004ee6:	f107 0310 	add.w	r3, r7, #16
 8004eea:	4619      	mov	r1, r3
 8004eec:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004eee:	f005 fc17 	bl	800a720 <strcpy>

		}

		if (((option & 4) == 4) &&
 8004ef2:	78fb      	ldrb	r3, [r7, #3]
 8004ef4:	f003 0304 	and.w	r3, r3, #4
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d030      	beq.n	8004f5e <VL53L0X_get_info_from_device+0x976>
			((ReadDataFromDeviceDone & 4) == 0)) {
 8004efc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004f00:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d12a      	bne.n	8004f5e <VL53L0X_get_info_from_device+0x976>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8004f08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8004f10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 8004f18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f1a:	025b      	lsls	r3, r3, #9
 8004f1c:	643b      	str	r3, [r7, #64]	; 0x40
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004f22:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 8004f26:	2300      	movs	r3, #0
 8004f28:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			if (DistMeasFixed1104_400_mm != 0) {
 8004f2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d011      	beq.n	8004f56 <VL53L0X_get_info_from_device+0x96e>
					OffsetFixed1104_mm =
 8004f32:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004f34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f36:	1ad3      	subs	r3, r2, r3
 8004f38:	64bb      	str	r3, [r7, #72]	; 0x48
						DistMeasFixed1104_400_mm -
						DistMeasTgtFixed1104_mm;
					OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 8004f3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f3c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004f40:	fb02 f303 	mul.w	r3, r2, r3
 8004f44:	091b      	lsrs	r3, r3, #4
					OffsetMicroMeters = (OffsetFixed1104_mm
 8004f46:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
					OffsetMicroMeters *= -1;
 8004f4a:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8004f4e:	425b      	negs	r3, r3
 8004f50:	b29b      	uxth	r3, r3
 8004f52:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			}

			PALDevDataSet(Dev,
 8004f56:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	60da      	str	r2, [r3, #12]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 8004f5e:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8004f62:	78fb      	ldrb	r3, [r7, #3]
 8004f64:	4313      	orrs	r3, r2
 8004f66:	b2db      	uxtb	r3, r3
 8004f68:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 8004f6c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004f76:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	3760      	adds	r7, #96	; 0x60
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bd80      	pop	{r7, pc}

08004f82 <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev, uint8_t vcsel_period_pclks)
{
 8004f82:	b490      	push	{r4, r7}
 8004f84:	b086      	sub	sp, #24
 8004f86:	af00      	add	r7, sp, #0
 8004f88:	6078      	str	r0, [r7, #4]
 8004f8a:	460b      	mov	r3, r1
 8004f8c:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	   therefore set fixed value
	*/
	PLL_period_ps = 1655;
 8004f8e:	f240 6377 	movw	r3, #1655	; 0x677
 8004f92:	f04f 0400 	mov.w	r4, #0
 8004f96:	e9c7 3404 	strd	r3, r4, [r7, #16]

	macro_period_vclks = 2304;
 8004f9a:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8004f9e:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 8004fa0:	78fb      	ldrb	r3, [r7, #3]
 8004fa2:	68fa      	ldr	r2, [r7, #12]
 8004fa4:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 8004fa8:	693a      	ldr	r2, [r7, #16]
 8004faa:	fb02 f303 	mul.w	r3, r2, r3
 8004fae:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 8004fb0:	68bb      	ldr	r3, [r7, #8]
}
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	3718      	adds	r7, #24
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bc90      	pop	{r4, r7}
 8004fba:	4770      	bx	lr

08004fbc <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b087      	sub	sp, #28
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 8004fc8:	2300      	movs	r3, #0
 8004fca:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 8004fcc:	2300      	movs	r3, #0
 8004fce:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d017      	beq.n	8005006 <VL53L0X_encode_timeout+0x4a>
		ls_byte = timeout_macro_clks - 1;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	3b01      	subs	r3, #1
 8004fda:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 8004fdc:	e005      	b.n	8004fea <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 8004fde:	693b      	ldr	r3, [r7, #16]
 8004fe0:	085b      	lsrs	r3, r3, #1
 8004fe2:	613b      	str	r3, [r7, #16]
			ms_byte++;
 8004fe4:	89fb      	ldrh	r3, [r7, #14]
 8004fe6:	3301      	adds	r3, #1
 8004fe8:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d1f4      	bne.n	8004fde <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 8004ff4:	89fb      	ldrh	r3, [r7, #14]
 8004ff6:	021b      	lsls	r3, r3, #8
 8004ff8:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	b29b      	uxth	r3, r3
 8004ffe:	b2db      	uxtb	r3, r3
 8005000:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 8005002:	4413      	add	r3, r2
 8005004:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 8005006:	8afb      	ldrh	r3, [r7, #22]

}
 8005008:	4618      	mov	r0, r3
 800500a:	371c      	adds	r7, #28
 800500c:	46bd      	mov	sp, r7
 800500e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005012:	4770      	bx	lr

08005014 <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 8005014:	b480      	push	{r7}
 8005016:	b085      	sub	sp, #20
 8005018:	af00      	add	r7, sp, #0
 800501a:	4603      	mov	r3, r0
 800501c:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 800501e:	2300      	movs	r3, #0
 8005020:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8005022:	88fb      	ldrh	r3, [r7, #6]
 8005024:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 8005026:	88fa      	ldrh	r2, [r7, #6]
 8005028:	0a12      	lsrs	r2, r2, #8
 800502a:	b292      	uxth	r2, r2
 800502c:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800502e:	3301      	adds	r3, #1
 8005030:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 8005032:	68fb      	ldr	r3, [r7, #12]
}
 8005034:	4618      	mov	r0, r3
 8005036:	3714      	adds	r7, #20
 8005038:	46bd      	mov	sp, r7
 800503a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503e:	4770      	bx	lr

08005040 <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b088      	sub	sp, #32
 8005044:	af00      	add	r7, sp, #0
 8005046:	60f8      	str	r0, [r7, #12]
 8005048:	60b9      	str	r1, [r7, #8]
 800504a:	4613      	mov	r3, r2
 800504c:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 800504e:	2300      	movs	r3, #0
 8005050:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 8005052:	79fb      	ldrb	r3, [r7, #7]
 8005054:	4619      	mov	r1, r3
 8005056:	68f8      	ldr	r0, [r7, #12]
 8005058:	f7ff ff93 	bl	8004f82 <VL53L0X_calc_macro_period_ps>
 800505c:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800505e:	69bb      	ldr	r3, [r7, #24]
 8005060:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8005064:	4a0a      	ldr	r2, [pc, #40]	; (8005090 <VL53L0X_calc_timeout_mclks+0x50>)
 8005066:	fba2 2303 	umull	r2, r3, r2, r3
 800506a:	099b      	lsrs	r3, r3, #6
 800506c:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005074:	fb02 f203 	mul.w	r2, r2, r3
		+ (macro_period_ns / 2)) / macro_period_ns);
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	085b      	lsrs	r3, r3, #1
 800507c:	441a      	add	r2, r3
	timeout_period_mclks =
 800507e:	697b      	ldr	r3, [r7, #20]
 8005080:	fbb2 f3f3 	udiv	r3, r2, r3
 8005084:	61fb      	str	r3, [r7, #28]

	return timeout_period_mclks;
 8005086:	69fb      	ldr	r3, [r7, #28]
}
 8005088:	4618      	mov	r0, r3
 800508a:	3720      	adds	r7, #32
 800508c:	46bd      	mov	sp, r7
 800508e:	bd80      	pop	{r7, pc}
 8005090:	10624dd3 	.word	0x10624dd3

08005094 <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b086      	sub	sp, #24
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
 800509c:	460b      	mov	r3, r1
 800509e:	807b      	strh	r3, [r7, #2]
 80050a0:	4613      	mov	r3, r2
 80050a2:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 80050a4:	2300      	movs	r3, #0
 80050a6:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 80050a8:	787b      	ldrb	r3, [r7, #1]
 80050aa:	4619      	mov	r1, r3
 80050ac:	6878      	ldr	r0, [r7, #4]
 80050ae:	f7ff ff68 	bl	8004f82 <VL53L0X_calc_macro_period_ps>
 80050b2:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 80050b4:	693b      	ldr	r3, [r7, #16]
 80050b6:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80050ba:	4a0b      	ldr	r2, [pc, #44]	; (80050e8 <VL53L0X_calc_timeout_us+0x54>)
 80050bc:	fba2 2303 	umull	r2, r3, r2, r3
 80050c0:	099b      	lsrs	r3, r3, #6
 80050c2:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns)
 80050c4:	887b      	ldrh	r3, [r7, #2]
 80050c6:	68fa      	ldr	r2, [r7, #12]
 80050c8:	fb02 f203 	mul.w	r2, r2, r3
		+ (macro_period_ns / 2)) / 1000;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	085b      	lsrs	r3, r3, #1
 80050d0:	4413      	add	r3, r2
	actual_timeout_period_us =
 80050d2:	4a05      	ldr	r2, [pc, #20]	; (80050e8 <VL53L0X_calc_timeout_us+0x54>)
 80050d4:	fba2 2303 	umull	r2, r3, r2, r3
 80050d8:	099b      	lsrs	r3, r3, #6
 80050da:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 80050dc:	697b      	ldr	r3, [r7, #20]
}
 80050de:	4618      	mov	r0, r3
 80050e0:	3718      	adds	r7, #24
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}
 80050e6:	bf00      	nop
 80050e8:	10624dd3 	.word	0x10624dd3

080050ec <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b08c      	sub	sp, #48	; 0x30
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	60f8      	str	r0, [r7, #12]
 80050f4:	460b      	mov	r3, r1
 80050f6:	607a      	str	r2, [r7, #4]
 80050f8:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80050fa:	2300      	movs	r3, #0
 80050fc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 8005100:	2300      	movs	r3, #0
 8005102:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 8005106:	2300      	movs	r3, #0
 8005108:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 800510a:	2300      	movs	r3, #0
 800510c:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 800510e:	2300      	movs	r3, #0
 8005110:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 8005112:	7afb      	ldrb	r3, [r7, #11]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d005      	beq.n	8005124 <get_sequence_step_timeout+0x38>
 8005118:	7afb      	ldrb	r3, [r7, #11]
 800511a:	2b01      	cmp	r3, #1
 800511c:	d002      	beq.n	8005124 <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 800511e:	7afb      	ldrb	r3, [r7, #11]
 8005120:	2b02      	cmp	r3, #2
 8005122:	d128      	bne.n	8005176 <get_sequence_step_timeout+0x8a>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8005124:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8005128:	461a      	mov	r2, r3
 800512a:	2100      	movs	r1, #0
 800512c:	68f8      	ldr	r0, [r7, #12]
 800512e:	f7fd fa75 	bl	800261c <VL53L0X_GetVcselPulsePeriod>
 8005132:	4603      	mov	r3, r0
 8005134:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 8005138:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800513c:	2b00      	cmp	r3, #0
 800513e:	d109      	bne.n	8005154 <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 8005140:	f107 0320 	add.w	r3, r7, #32
 8005144:	461a      	mov	r2, r3
 8005146:	2146      	movs	r1, #70	; 0x46
 8005148:	68f8      	ldr	r0, [r7, #12]
 800514a:	f001 fd38 	bl	8006bbe <VL53L0X_RdByte>
 800514e:	4603      	mov	r3, r0
 8005150:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 8005154:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005158:	b29b      	uxth	r3, r3
 800515a:	4618      	mov	r0, r3
 800515c:	f7ff ff5a 	bl	8005014 <VL53L0X_decode_timeout>
 8005160:	4603      	mov	r3, r0
 8005162:	847b      	strh	r3, [r7, #34]	; 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8005164:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8005168:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800516a:	4619      	mov	r1, r3
 800516c:	68f8      	ldr	r0, [r7, #12]
 800516e:	f7ff ff91 	bl	8005094 <VL53L0X_calc_timeout_us>
 8005172:	62b8      	str	r0, [r7, #40]	; 0x28
 8005174:	e092      	b.n	800529c <get_sequence_step_timeout+0x1b0>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 8005176:	7afb      	ldrb	r3, [r7, #11]
 8005178:	2b03      	cmp	r3, #3
 800517a:	d135      	bne.n	80051e8 <get_sequence_step_timeout+0xfc>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800517c:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8005180:	461a      	mov	r2, r3
 8005182:	2100      	movs	r1, #0
 8005184:	68f8      	ldr	r0, [r7, #12]
 8005186:	f7fd fa49 	bl	800261c <VL53L0X_GetVcselPulsePeriod>
 800518a:	4603      	mov	r3, r0
 800518c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 8005190:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005194:	2b00      	cmp	r3, #0
 8005196:	f040 8081 	bne.w	800529c <get_sequence_step_timeout+0x1b0>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800519a:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800519e:	461a      	mov	r2, r3
 80051a0:	2100      	movs	r1, #0
 80051a2:	68f8      	ldr	r0, [r7, #12]
 80051a4:	f7fd fa3a 	bl	800261c <VL53L0X_GetVcselPulsePeriod>
 80051a8:	4603      	mov	r3, r0
 80051aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 80051ae:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d109      	bne.n	80051ca <get_sequence_step_timeout+0xde>
				Status = VL53L0X_RdWord(Dev,
 80051b6:	f107 031e 	add.w	r3, r7, #30
 80051ba:	461a      	mov	r2, r3
 80051bc:	2151      	movs	r1, #81	; 0x51
 80051be:	68f8      	ldr	r0, [r7, #12]
 80051c0:	f001 fd84 	bl	8006ccc <VL53L0X_RdWord>
 80051c4:	4603      	mov	r3, r0
 80051c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 80051ca:	8bfb      	ldrh	r3, [r7, #30]
 80051cc:	4618      	mov	r0, r3
 80051ce:	f7ff ff21 	bl	8005014 <VL53L0X_decode_timeout>
 80051d2:	4603      	mov	r3, r0
 80051d4:	84fb      	strh	r3, [r7, #38]	; 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 80051d6:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80051da:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80051dc:	4619      	mov	r1, r3
 80051de:	68f8      	ldr	r0, [r7, #12]
 80051e0:	f7ff ff58 	bl	8005094 <VL53L0X_calc_timeout_us>
 80051e4:	62b8      	str	r0, [r7, #40]	; 0x28
 80051e6:	e059      	b.n	800529c <get_sequence_step_timeout+0x1b0>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 80051e8:	7afb      	ldrb	r3, [r7, #11]
 80051ea:	2b04      	cmp	r3, #4
 80051ec:	d156      	bne.n	800529c <get_sequence_step_timeout+0x1b0>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 80051ee:	f107 0314 	add.w	r3, r7, #20
 80051f2:	4619      	mov	r1, r3
 80051f4:	68f8      	ldr	r0, [r7, #12]
 80051f6:	f7fd fb1d 	bl	8002834 <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 80051fa:	2300      	movs	r3, #0
 80051fc:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 80051fe:	7dfb      	ldrb	r3, [r7, #23]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d01d      	beq.n	8005240 <get_sequence_step_timeout+0x154>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8005204:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8005208:	461a      	mov	r2, r3
 800520a:	2100      	movs	r1, #0
 800520c:	68f8      	ldr	r0, [r7, #12]
 800520e:	f7fd fa05 	bl	800261c <VL53L0X_GetVcselPulsePeriod>
 8005212:	4603      	mov	r3, r0
 8005214:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_VCSEL_PERIOD_PRE_RANGE,
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS) */
			if (Status == VL53L0X_ERROR_NONE) {
 8005218:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800521c:	2b00      	cmp	r3, #0
 800521e:	d10f      	bne.n	8005240 <get_sequence_step_timeout+0x154>
				Status = VL53L0X_RdWord(Dev,
 8005220:	f107 031e 	add.w	r3, r7, #30
 8005224:	461a      	mov	r2, r3
 8005226:	2151      	movs	r1, #81	; 0x51
 8005228:	68f8      	ldr	r0, [r7, #12]
 800522a:	f001 fd4f 	bl	8006ccc <VL53L0X_RdWord>
 800522e:	4603      	mov	r3, r0
 8005230:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8005234:	8bfb      	ldrh	r3, [r7, #30]
 8005236:	4618      	mov	r0, r3
 8005238:	f7ff feec 	bl	8005014 <VL53L0X_decode_timeout>
 800523c:	4603      	mov	r3, r0
 800523e:	84fb      	strh	r3, [r7, #38]	; 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 8005240:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005244:	2b00      	cmp	r3, #0
 8005246:	d109      	bne.n	800525c <get_sequence_step_timeout+0x170>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8005248:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800524c:	461a      	mov	r2, r3
 800524e:	2101      	movs	r1, #1
 8005250:	68f8      	ldr	r0, [r7, #12]
 8005252:	f7fd f9e3 	bl	800261c <VL53L0X_GetVcselPulsePeriod>
 8005256:	4603      	mov	r3, r0
 8005258:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 800525c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005260:	2b00      	cmp	r3, #0
 8005262:	d10f      	bne.n	8005284 <get_sequence_step_timeout+0x198>
			Status = VL53L0X_RdWord(Dev,
 8005264:	f107 031c 	add.w	r3, r7, #28
 8005268:	461a      	mov	r2, r3
 800526a:	2171      	movs	r1, #113	; 0x71
 800526c:	68f8      	ldr	r0, [r7, #12]
 800526e:	f001 fd2d 	bl	8006ccc <VL53L0X_RdWord>
 8005272:	4603      	mov	r3, r0
 8005274:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 8005278:	8bbb      	ldrh	r3, [r7, #28]
 800527a:	4618      	mov	r0, r3
 800527c:	f7ff feca 	bl	8005014 <VL53L0X_decode_timeout>
 8005280:	4603      	mov	r3, r0
 8005282:	84bb      	strh	r3, [r7, #36]	; 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 8005284:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005286:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005288:	1ad3      	subs	r3, r2, r3
 800528a:	84bb      	strh	r3, [r7, #36]	; 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800528c:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8005290:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005292:	4619      	mov	r1, r3
 8005294:	68f8      	ldr	r0, [r7, #12]
 8005296:	f7ff fefd 	bl	8005094 <VL53L0X_calc_timeout_us>
 800529a:	62b8      	str	r0, [r7, #40]	; 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80052a0:	601a      	str	r2, [r3, #0]

	return Status;
 80052a2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80052a6:	4618      	mov	r0, r3
 80052a8:	3730      	adds	r7, #48	; 0x30
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bd80      	pop	{r7, pc}

080052ae <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 80052ae:	b580      	push	{r7, lr}
 80052b0:	b08a      	sub	sp, #40	; 0x28
 80052b2:	af00      	add	r7, sp, #0
 80052b4:	60f8      	str	r0, [r7, #12]
 80052b6:	460b      	mov	r3, r1
 80052b8:	607a      	str	r2, [r7, #4]
 80052ba:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80052bc:	2300      	movs	r3, #0
 80052be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t MsrcRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 80052c2:	7afb      	ldrb	r3, [r7, #11]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d005      	beq.n	80052d4 <set_sequence_step_timeout+0x26>
 80052c8:	7afb      	ldrb	r3, [r7, #11]
 80052ca:	2b01      	cmp	r3, #1
 80052cc:	d002      	beq.n	80052d4 <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 80052ce:	7afb      	ldrb	r3, [r7, #11]
 80052d0:	2b02      	cmp	r3, #2
 80052d2:	d138      	bne.n	8005346 <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80052d4:	f107 031d 	add.w	r3, r7, #29
 80052d8:	461a      	mov	r2, r3
 80052da:	2100      	movs	r1, #0
 80052dc:	68f8      	ldr	r0, [r7, #12]
 80052de:	f7fd f99d 	bl	800261c <VL53L0X_GetVcselPulsePeriod>
 80052e2:	4603      	mov	r3, r0
 80052e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 80052e8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d11a      	bne.n	8005326 <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 80052f0:	7f7b      	ldrb	r3, [r7, #29]
 80052f2:	461a      	mov	r2, r3
 80052f4:	6879      	ldr	r1, [r7, #4]
 80052f6:	68f8      	ldr	r0, [r7, #12]
 80052f8:	f7ff fea2 	bl	8005040 <VL53L0X_calc_timeout_mclks>
 80052fc:	4603      	mov	r3, r0
 80052fe:	83fb      	strh	r3, [r7, #30]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 8005300:	8bfb      	ldrh	r3, [r7, #30]
 8005302:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005306:	d903      	bls.n	8005310 <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 8005308:	23ff      	movs	r3, #255	; 0xff
 800530a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800530e:	e004      	b.n	800531a <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 8005310:	8bfb      	ldrh	r3, [r7, #30]
 8005312:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 8005314:	3b01      	subs	r3, #1
 8005316:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800531a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800531e:	b29a      	uxth	r2, r3
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 8005326:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800532a:	2b00      	cmp	r3, #0
 800532c:	f040 80ad 	bne.w	800548a <set_sequence_step_timeout+0x1dc>
			Status = VL53L0X_WrByte(Dev,
 8005330:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005334:	461a      	mov	r2, r3
 8005336:	2146      	movs	r1, #70	; 0x46
 8005338:	68f8      	ldr	r0, [r7, #12]
 800533a:	f001 fd3b 	bl	8006db4 <VL53L0X_WrByte>
 800533e:	4603      	mov	r3, r0
 8005340:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 8005344:	e0a1      	b.n	800548a <set_sequence_step_timeout+0x1dc>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 8005346:	7afb      	ldrb	r3, [r7, #11]
 8005348:	2b03      	cmp	r3, #3
 800534a:	d135      	bne.n	80053b8 <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 800534c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005350:	2b00      	cmp	r3, #0
 8005352:	d11b      	bne.n	800538c <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8005354:	f107 031d 	add.w	r3, r7, #29
 8005358:	461a      	mov	r2, r3
 800535a:	2100      	movs	r1, #0
 800535c:	68f8      	ldr	r0, [r7, #12]
 800535e:	f7fd f95d 	bl	800261c <VL53L0X_GetVcselPulsePeriod>
 8005362:	4603      	mov	r3, r0
 8005364:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 8005368:	7f7b      	ldrb	r3, [r7, #29]
 800536a:	461a      	mov	r2, r3
 800536c:	6879      	ldr	r1, [r7, #4]
 800536e:	68f8      	ldr	r0, [r7, #12]
 8005370:	f7ff fe66 	bl	8005040 <VL53L0X_calc_timeout_mclks>
 8005374:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 8005376:	84bb      	strh	r3, [r7, #36]	; 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 8005378:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800537a:	4618      	mov	r0, r3
 800537c:	f7ff fe1e 	bl	8004fbc <VL53L0X_encode_timeout>
 8005380:	4603      	mov	r3, r0
 8005382:	837b      	strh	r3, [r7, #26]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8005384:	8b7a      	ldrh	r2, [r7, #26]
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800538c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005390:	2b00      	cmp	r3, #0
 8005392:	d108      	bne.n	80053a6 <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 8005394:	8b7b      	ldrh	r3, [r7, #26]
 8005396:	461a      	mov	r2, r3
 8005398:	2151      	movs	r1, #81	; 0x51
 800539a:	68f8      	ldr	r0, [r7, #12]
 800539c:	f001 fd2e 	bl	8006dfc <VL53L0X_WrWord>
 80053a0:	4603      	mov	r3, r0
 80053a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 80053a6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d16d      	bne.n	800548a <set_sequence_step_timeout+0x1dc>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	687a      	ldr	r2, [r7, #4]
 80053b2:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 80053b6:	e068      	b.n	800548a <set_sequence_step_timeout+0x1dc>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 80053b8:	7afb      	ldrb	r3, [r7, #11]
 80053ba:	2b04      	cmp	r3, #4
 80053bc:	d162      	bne.n	8005484 <set_sequence_step_timeout+0x1d6>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 80053be:	f107 0314 	add.w	r3, r7, #20
 80053c2:	4619      	mov	r1, r3
 80053c4:	68f8      	ldr	r0, [r7, #12]
 80053c6:	f7fd fa35 	bl	8002834 <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 80053ca:	2300      	movs	r3, #0
 80053cc:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 80053ce:	7dfb      	ldrb	r3, [r7, #23]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d01d      	beq.n	8005410 <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80053d4:	f107 031d 	add.w	r3, r7, #29
 80053d8:	461a      	mov	r2, r3
 80053da:	2100      	movs	r1, #0
 80053dc:	68f8      	ldr	r0, [r7, #12]
 80053de:	f7fd f91d 	bl	800261c <VL53L0X_GetVcselPulsePeriod>
 80053e2:	4603      	mov	r3, r0
 80053e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS) */
				if (Status == VL53L0X_ERROR_NONE) {
 80053e8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d10f      	bne.n	8005410 <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 80053f0:	f107 031a 	add.w	r3, r7, #26
 80053f4:	461a      	mov	r2, r3
 80053f6:	2151      	movs	r1, #81	; 0x51
 80053f8:	68f8      	ldr	r0, [r7, #12]
 80053fa:	f001 fc67 	bl	8006ccc <VL53L0X_RdWord>
 80053fe:	4603      	mov	r3, r0
 8005400:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 8005404:	8b7b      	ldrh	r3, [r7, #26]
 8005406:	4618      	mov	r0, r3
 8005408:	f7ff fe04 	bl	8005014 <VL53L0X_decode_timeout>
 800540c:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 800540e:	84bb      	strh	r3, [r7, #36]	; 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8005410:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005414:	2b00      	cmp	r3, #0
 8005416:	d109      	bne.n	800542c <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8005418:	f107 031d 	add.w	r3, r7, #29
 800541c:	461a      	mov	r2, r3
 800541e:	2101      	movs	r1, #1
 8005420:	68f8      	ldr	r0, [r7, #12]
 8005422:	f7fd f8fb 	bl	800261c <VL53L0X_GetVcselPulsePeriod>
 8005426:	4603      	mov	r3, r0
 8005428:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
						&CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 800542c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005430:	2b00      	cmp	r3, #0
 8005432:	d12a      	bne.n	800548a <set_sequence_step_timeout+0x1dc>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 8005434:	7f7b      	ldrb	r3, [r7, #29]
 8005436:	461a      	mov	r2, r3
 8005438:	6879      	ldr	r1, [r7, #4]
 800543a:	68f8      	ldr	r0, [r7, #12]
 800543c:	f7ff fe00 	bl	8005040 <VL53L0X_calc_timeout_mclks>
 8005440:	4603      	mov	r3, r0
				FinalRangeTimeOutMClks =
 8005442:	847b      	strh	r3, [r7, #34]	; 0x22
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 8005444:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8005446:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005448:	4413      	add	r3, r2
 800544a:	847b      	strh	r3, [r7, #34]	; 0x22

				FinalRangeEncodedTimeOut =
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);
 800544c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
				FinalRangeEncodedTimeOut =
 800544e:	4618      	mov	r0, r3
 8005450:	f7ff fdb4 	bl	8004fbc <VL53L0X_encode_timeout>
 8005454:	4603      	mov	r3, r0
 8005456:	843b      	strh	r3, [r7, #32]

				if (Status == VL53L0X_ERROR_NONE) {
 8005458:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800545c:	2b00      	cmp	r3, #0
 800545e:	d108      	bne.n	8005472 <set_sequence_step_timeout+0x1c4>
					Status = VL53L0X_WrWord(Dev, 0x71,
 8005460:	8c3b      	ldrh	r3, [r7, #32]
 8005462:	461a      	mov	r2, r3
 8005464:	2171      	movs	r1, #113	; 0x71
 8005466:	68f8      	ldr	r0, [r7, #12]
 8005468:	f001 fcc8 	bl	8006dfc <VL53L0X_WrWord>
 800546c:	4603      	mov	r3, r0
 800546e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 8005472:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005476:	2b00      	cmp	r3, #0
 8005478:	d107      	bne.n	800548a <set_sequence_step_timeout+0x1dc>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	687a      	ldr	r2, [r7, #4]
 800547e:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 8005482:	e002      	b.n	800548a <set_sequence_step_timeout+0x1dc>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005484:	23fc      	movs	r3, #252	; 0xfc
 8005486:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	}
	return Status;
 800548a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800548e:	4618      	mov	r0, r3
 8005490:	3728      	adds	r7, #40	; 0x28
 8005492:	46bd      	mov	sp, r7
 8005494:	bd80      	pop	{r7, pc}

08005496 <VL53L0X_set_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_set_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 8005496:	b580      	push	{r7, lr}
 8005498:	b08a      	sub	sp, #40	; 0x28
 800549a:	af00      	add	r7, sp, #0
 800549c:	6078      	str	r0, [r7, #4]
 800549e:	460b      	mov	r3, r1
 80054a0:	70fb      	strb	r3, [r7, #3]
 80054a2:	4613      	mov	r3, r2
 80054a4:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80054a6:	2300      	movs	r3, #0
 80054a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t vcsel_period_reg;
	uint8_t MinPreVcselPeriodPCLK = 12;
 80054ac:	230c      	movs	r3, #12
 80054ae:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t MaxPreVcselPeriodPCLK = 18;
 80054b2:	2312      	movs	r3, #18
 80054b4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t MinFinalVcselPeriodPCLK = 8;
 80054b8:	2308      	movs	r3, #8
 80054ba:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t MaxFinalVcselPeriodPCLK = 14;
 80054be:	230e      	movs	r3, #14
 80054c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t MeasurementTimingBudgetMicroSeconds;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t PreRangeTimeoutMicroSeconds;
	uint32_t MsrcTimeoutMicroSeconds;
	uint8_t PhaseCalInt = 0;
 80054c4:	2300      	movs	r3, #0
 80054c6:	73fb      	strb	r3, [r7, #15]

	/* Check if valid clock period requested */

	if ((VCSELPulsePeriodPCLK % 2) != 0) {
 80054c8:	78bb      	ldrb	r3, [r7, #2]
 80054ca:	f003 0301 	and.w	r3, r3, #1
 80054ce:	b2db      	uxtb	r3, r3
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d003      	beq.n	80054dc <VL53L0X_set_vcsel_pulse_period+0x46>
		/* Value must be an even number */
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80054d4:	23fc      	movs	r3, #252	; 0xfc
 80054d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80054da:	e020      	b.n	800551e <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE &&
 80054dc:	78fb      	ldrb	r3, [r7, #3]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d10d      	bne.n	80054fe <VL53L0X_set_vcsel_pulse_period+0x68>
 80054e2:	78ba      	ldrb	r2, [r7, #2]
 80054e4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80054e8:	429a      	cmp	r2, r3
 80054ea:	d304      	bcc.n	80054f6 <VL53L0X_set_vcsel_pulse_period+0x60>
		(VCSELPulsePeriodPCLK < MinPreVcselPeriodPCLK ||
 80054ec:	78ba      	ldrb	r2, [r7, #2]
 80054ee:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80054f2:	429a      	cmp	r2, r3
 80054f4:	d903      	bls.n	80054fe <VL53L0X_set_vcsel_pulse_period+0x68>
		VCSELPulsePeriodPCLK > MaxPreVcselPeriodPCLK)) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80054f6:	23fc      	movs	r3, #252	; 0xfc
 80054f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80054fc:	e00f      	b.n	800551e <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE &&
 80054fe:	78fb      	ldrb	r3, [r7, #3]
 8005500:	2b01      	cmp	r3, #1
 8005502:	d10c      	bne.n	800551e <VL53L0X_set_vcsel_pulse_period+0x88>
 8005504:	78ba      	ldrb	r2, [r7, #2]
 8005506:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800550a:	429a      	cmp	r2, r3
 800550c:	d304      	bcc.n	8005518 <VL53L0X_set_vcsel_pulse_period+0x82>
		(VCSELPulsePeriodPCLK < MinFinalVcselPeriodPCLK ||
 800550e:	78ba      	ldrb	r2, [r7, #2]
 8005510:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005514:	429a      	cmp	r2, r3
 8005516:	d902      	bls.n	800551e <VL53L0X_set_vcsel_pulse_period+0x88>
		 VCSELPulsePeriodPCLK > MaxFinalVcselPeriodPCLK)) {

		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005518:	23fc      	movs	r3, #252	; 0xfc
 800551a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Apply specific settings for the requested clock period */

	if (Status != VL53L0X_ERROR_NONE)
 800551e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005522:	2b00      	cmp	r3, #0
 8005524:	d002      	beq.n	800552c <VL53L0X_set_vcsel_pulse_period+0x96>
		return Status;
 8005526:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800552a:	e239      	b.n	80059a0 <VL53L0X_set_vcsel_pulse_period+0x50a>


	if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE) {
 800552c:	78fb      	ldrb	r3, [r7, #3]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d150      	bne.n	80055d4 <VL53L0X_set_vcsel_pulse_period+0x13e>

		/* Set phase check limits */
		if (VCSELPulsePeriodPCLK == 12) {
 8005532:	78bb      	ldrb	r3, [r7, #2]
 8005534:	2b0c      	cmp	r3, #12
 8005536:	d110      	bne.n	800555a <VL53L0X_set_vcsel_pulse_period+0xc4>

			Status = VL53L0X_WrByte(Dev,
 8005538:	2218      	movs	r2, #24
 800553a:	2157      	movs	r1, #87	; 0x57
 800553c:	6878      	ldr	r0, [r7, #4]
 800553e:	f001 fc39 	bl	8006db4 <VL53L0X_WrByte>
 8005542:	4603      	mov	r3, r0
 8005544:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x18);
			Status = VL53L0X_WrByte(Dev,
 8005548:	2208      	movs	r2, #8
 800554a:	2156      	movs	r1, #86	; 0x56
 800554c:	6878      	ldr	r0, [r7, #4]
 800554e:	f001 fc31 	bl	8006db4 <VL53L0X_WrByte>
 8005552:	4603      	mov	r3, r0
 8005554:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005558:	e17f      	b.n	800585a <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 14) {
 800555a:	78bb      	ldrb	r3, [r7, #2]
 800555c:	2b0e      	cmp	r3, #14
 800555e:	d110      	bne.n	8005582 <VL53L0X_set_vcsel_pulse_period+0xec>

			Status = VL53L0X_WrByte(Dev,
 8005560:	2230      	movs	r2, #48	; 0x30
 8005562:	2157      	movs	r1, #87	; 0x57
 8005564:	6878      	ldr	r0, [r7, #4]
 8005566:	f001 fc25 	bl	8006db4 <VL53L0X_WrByte>
 800556a:	4603      	mov	r3, r0
 800556c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x30);
			Status = VL53L0X_WrByte(Dev,
 8005570:	2208      	movs	r2, #8
 8005572:	2156      	movs	r1, #86	; 0x56
 8005574:	6878      	ldr	r0, [r7, #4]
 8005576:	f001 fc1d 	bl	8006db4 <VL53L0X_WrByte>
 800557a:	4603      	mov	r3, r0
 800557c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005580:	e16b      	b.n	800585a <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 16) {
 8005582:	78bb      	ldrb	r3, [r7, #2]
 8005584:	2b10      	cmp	r3, #16
 8005586:	d110      	bne.n	80055aa <VL53L0X_set_vcsel_pulse_period+0x114>

			Status = VL53L0X_WrByte(Dev,
 8005588:	2240      	movs	r2, #64	; 0x40
 800558a:	2157      	movs	r1, #87	; 0x57
 800558c:	6878      	ldr	r0, [r7, #4]
 800558e:	f001 fc11 	bl	8006db4 <VL53L0X_WrByte>
 8005592:	4603      	mov	r3, r0
 8005594:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x40);
			Status = VL53L0X_WrByte(Dev,
 8005598:	2208      	movs	r2, #8
 800559a:	2156      	movs	r1, #86	; 0x56
 800559c:	6878      	ldr	r0, [r7, #4]
 800559e:	f001 fc09 	bl	8006db4 <VL53L0X_WrByte>
 80055a2:	4603      	mov	r3, r0
 80055a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80055a8:	e157      	b.n	800585a <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 18) {
 80055aa:	78bb      	ldrb	r3, [r7, #2]
 80055ac:	2b12      	cmp	r3, #18
 80055ae:	f040 8154 	bne.w	800585a <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 80055b2:	2250      	movs	r2, #80	; 0x50
 80055b4:	2157      	movs	r1, #87	; 0x57
 80055b6:	6878      	ldr	r0, [r7, #4]
 80055b8:	f001 fbfc 	bl	8006db4 <VL53L0X_WrByte>
 80055bc:	4603      	mov	r3, r0
 80055be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x50);
			Status = VL53L0X_WrByte(Dev,
 80055c2:	2208      	movs	r2, #8
 80055c4:	2156      	movs	r1, #86	; 0x56
 80055c6:	6878      	ldr	r0, [r7, #4]
 80055c8:	f001 fbf4 	bl	8006db4 <VL53L0X_WrByte>
 80055cc:	4603      	mov	r3, r0
 80055ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80055d2:	e142      	b.n	800585a <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		}
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE) {
 80055d4:	78fb      	ldrb	r3, [r7, #3]
 80055d6:	2b01      	cmp	r3, #1
 80055d8:	f040 813f 	bne.w	800585a <VL53L0X_set_vcsel_pulse_period+0x3c4>

		if (VCSELPulsePeriodPCLK == 8) {
 80055dc:	78bb      	ldrb	r3, [r7, #2]
 80055de:	2b08      	cmp	r3, #8
 80055e0:	d14c      	bne.n	800567c <VL53L0X_set_vcsel_pulse_period+0x1e6>

			Status = VL53L0X_WrByte(Dev,
 80055e2:	2210      	movs	r2, #16
 80055e4:	2148      	movs	r1, #72	; 0x48
 80055e6:	6878      	ldr	r0, [r7, #4]
 80055e8:	f001 fbe4 	bl	8006db4 <VL53L0X_WrByte>
 80055ec:	4603      	mov	r3, r0
 80055ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x10);
			Status = VL53L0X_WrByte(Dev,
 80055f2:	2208      	movs	r2, #8
 80055f4:	2147      	movs	r1, #71	; 0x47
 80055f6:	6878      	ldr	r0, [r7, #4]
 80055f8:	f001 fbdc 	bl	8006db4 <VL53L0X_WrByte>
 80055fc:	4603      	mov	r3, r0
 80055fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 8005602:	2202      	movs	r2, #2
 8005604:	2132      	movs	r1, #50	; 0x32
 8005606:	6878      	ldr	r0, [r7, #4]
 8005608:	f001 fbd4 	bl	8006db4 <VL53L0X_WrByte>
 800560c:	4603      	mov	r3, r0
 800560e:	461a      	mov	r2, r3
 8005610:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005614:	4313      	orrs	r3, r2
 8005616:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x02);
			Status |= VL53L0X_WrByte(Dev,
 800561a:	220c      	movs	r2, #12
 800561c:	2130      	movs	r1, #48	; 0x30
 800561e:	6878      	ldr	r0, [r7, #4]
 8005620:	f001 fbc8 	bl	8006db4 <VL53L0X_WrByte>
 8005624:	4603      	mov	r3, r0
 8005626:	461a      	mov	r2, r3
 8005628:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800562c:	4313      	orrs	r3, r2
 800562e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x0C);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8005632:	2201      	movs	r2, #1
 8005634:	21ff      	movs	r1, #255	; 0xff
 8005636:	6878      	ldr	r0, [r7, #4]
 8005638:	f001 fbbc 	bl	8006db4 <VL53L0X_WrByte>
 800563c:	4603      	mov	r3, r0
 800563e:	461a      	mov	r2, r3
 8005640:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005644:	4313      	orrs	r3, r2
 8005646:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800564a:	2230      	movs	r2, #48	; 0x30
 800564c:	2130      	movs	r1, #48	; 0x30
 800564e:	6878      	ldr	r0, [r7, #4]
 8005650:	f001 fbb0 	bl	8006db4 <VL53L0X_WrByte>
 8005654:	4603      	mov	r3, r0
 8005656:	461a      	mov	r2, r3
 8005658:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800565c:	4313      	orrs	r3, r2
 800565e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x30);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8005662:	2200      	movs	r2, #0
 8005664:	21ff      	movs	r1, #255	; 0xff
 8005666:	6878      	ldr	r0, [r7, #4]
 8005668:	f001 fba4 	bl	8006db4 <VL53L0X_WrByte>
 800566c:	4603      	mov	r3, r0
 800566e:	461a      	mov	r2, r3
 8005670:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005674:	4313      	orrs	r3, r2
 8005676:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800567a:	e0ee      	b.n	800585a <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 10) {
 800567c:	78bb      	ldrb	r3, [r7, #2]
 800567e:	2b0a      	cmp	r3, #10
 8005680:	d14c      	bne.n	800571c <VL53L0X_set_vcsel_pulse_period+0x286>

			Status = VL53L0X_WrByte(Dev,
 8005682:	2228      	movs	r2, #40	; 0x28
 8005684:	2148      	movs	r1, #72	; 0x48
 8005686:	6878      	ldr	r0, [r7, #4]
 8005688:	f001 fb94 	bl	8006db4 <VL53L0X_WrByte>
 800568c:	4603      	mov	r3, r0
 800568e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x28);
			Status = VL53L0X_WrByte(Dev,
 8005692:	2208      	movs	r2, #8
 8005694:	2147      	movs	r1, #71	; 0x47
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	f001 fb8c 	bl	8006db4 <VL53L0X_WrByte>
 800569c:	4603      	mov	r3, r0
 800569e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 80056a2:	2203      	movs	r2, #3
 80056a4:	2132      	movs	r1, #50	; 0x32
 80056a6:	6878      	ldr	r0, [r7, #4]
 80056a8:	f001 fb84 	bl	8006db4 <VL53L0X_WrByte>
 80056ac:	4603      	mov	r3, r0
 80056ae:	461a      	mov	r2, r3
 80056b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80056b4:	4313      	orrs	r3, r2
 80056b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 80056ba:	2209      	movs	r2, #9
 80056bc:	2130      	movs	r1, #48	; 0x30
 80056be:	6878      	ldr	r0, [r7, #4]
 80056c0:	f001 fb78 	bl	8006db4 <VL53L0X_WrByte>
 80056c4:	4603      	mov	r3, r0
 80056c6:	461a      	mov	r2, r3
 80056c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80056cc:	4313      	orrs	r3, r2
 80056ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x09);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 80056d2:	2201      	movs	r2, #1
 80056d4:	21ff      	movs	r1, #255	; 0xff
 80056d6:	6878      	ldr	r0, [r7, #4]
 80056d8:	f001 fb6c 	bl	8006db4 <VL53L0X_WrByte>
 80056dc:	4603      	mov	r3, r0
 80056de:	461a      	mov	r2, r3
 80056e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80056e4:	4313      	orrs	r3, r2
 80056e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 80056ea:	2220      	movs	r2, #32
 80056ec:	2130      	movs	r1, #48	; 0x30
 80056ee:	6878      	ldr	r0, [r7, #4]
 80056f0:	f001 fb60 	bl	8006db4 <VL53L0X_WrByte>
 80056f4:	4603      	mov	r3, r0
 80056f6:	461a      	mov	r2, r3
 80056f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80056fc:	4313      	orrs	r3, r2
 80056fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8005702:	2200      	movs	r2, #0
 8005704:	21ff      	movs	r1, #255	; 0xff
 8005706:	6878      	ldr	r0, [r7, #4]
 8005708:	f001 fb54 	bl	8006db4 <VL53L0X_WrByte>
 800570c:	4603      	mov	r3, r0
 800570e:	461a      	mov	r2, r3
 8005710:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005714:	4313      	orrs	r3, r2
 8005716:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800571a:	e09e      	b.n	800585a <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 12) {
 800571c:	78bb      	ldrb	r3, [r7, #2]
 800571e:	2b0c      	cmp	r3, #12
 8005720:	d14c      	bne.n	80057bc <VL53L0X_set_vcsel_pulse_period+0x326>

			Status = VL53L0X_WrByte(Dev,
 8005722:	2238      	movs	r2, #56	; 0x38
 8005724:	2148      	movs	r1, #72	; 0x48
 8005726:	6878      	ldr	r0, [r7, #4]
 8005728:	f001 fb44 	bl	8006db4 <VL53L0X_WrByte>
 800572c:	4603      	mov	r3, r0
 800572e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x38);
			Status = VL53L0X_WrByte(Dev,
 8005732:	2208      	movs	r2, #8
 8005734:	2147      	movs	r1, #71	; 0x47
 8005736:	6878      	ldr	r0, [r7, #4]
 8005738:	f001 fb3c 	bl	8006db4 <VL53L0X_WrByte>
 800573c:	4603      	mov	r3, r0
 800573e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 8005742:	2203      	movs	r2, #3
 8005744:	2132      	movs	r1, #50	; 0x32
 8005746:	6878      	ldr	r0, [r7, #4]
 8005748:	f001 fb34 	bl	8006db4 <VL53L0X_WrByte>
 800574c:	4603      	mov	r3, r0
 800574e:	461a      	mov	r2, r3
 8005750:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005754:	4313      	orrs	r3, r2
 8005756:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800575a:	2208      	movs	r2, #8
 800575c:	2130      	movs	r1, #48	; 0x30
 800575e:	6878      	ldr	r0, [r7, #4]
 8005760:	f001 fb28 	bl	8006db4 <VL53L0X_WrByte>
 8005764:	4603      	mov	r3, r0
 8005766:	461a      	mov	r2, r3
 8005768:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800576c:	4313      	orrs	r3, r2
 800576e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x08);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8005772:	2201      	movs	r2, #1
 8005774:	21ff      	movs	r1, #255	; 0xff
 8005776:	6878      	ldr	r0, [r7, #4]
 8005778:	f001 fb1c 	bl	8006db4 <VL53L0X_WrByte>
 800577c:	4603      	mov	r3, r0
 800577e:	461a      	mov	r2, r3
 8005780:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005784:	4313      	orrs	r3, r2
 8005786:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800578a:	2220      	movs	r2, #32
 800578c:	2130      	movs	r1, #48	; 0x30
 800578e:	6878      	ldr	r0, [r7, #4]
 8005790:	f001 fb10 	bl	8006db4 <VL53L0X_WrByte>
 8005794:	4603      	mov	r3, r0
 8005796:	461a      	mov	r2, r3
 8005798:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800579c:	4313      	orrs	r3, r2
 800579e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80057a2:	2200      	movs	r2, #0
 80057a4:	21ff      	movs	r1, #255	; 0xff
 80057a6:	6878      	ldr	r0, [r7, #4]
 80057a8:	f001 fb04 	bl	8006db4 <VL53L0X_WrByte>
 80057ac:	4603      	mov	r3, r0
 80057ae:	461a      	mov	r2, r3
 80057b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80057b4:	4313      	orrs	r3, r2
 80057b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80057ba:	e04e      	b.n	800585a <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 14) {
 80057bc:	78bb      	ldrb	r3, [r7, #2]
 80057be:	2b0e      	cmp	r3, #14
 80057c0:	d14b      	bne.n	800585a <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 80057c2:	2248      	movs	r2, #72	; 0x48
 80057c4:	2148      	movs	r1, #72	; 0x48
 80057c6:	6878      	ldr	r0, [r7, #4]
 80057c8:	f001 faf4 	bl	8006db4 <VL53L0X_WrByte>
 80057cc:	4603      	mov	r3, r0
 80057ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x048);
			Status = VL53L0X_WrByte(Dev,
 80057d2:	2208      	movs	r2, #8
 80057d4:	2147      	movs	r1, #71	; 0x47
 80057d6:	6878      	ldr	r0, [r7, #4]
 80057d8:	f001 faec 	bl	8006db4 <VL53L0X_WrByte>
 80057dc:	4603      	mov	r3, r0
 80057de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 80057e2:	2203      	movs	r2, #3
 80057e4:	2132      	movs	r1, #50	; 0x32
 80057e6:	6878      	ldr	r0, [r7, #4]
 80057e8:	f001 fae4 	bl	8006db4 <VL53L0X_WrByte>
 80057ec:	4603      	mov	r3, r0
 80057ee:	461a      	mov	r2, r3
 80057f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80057f4:	4313      	orrs	r3, r2
 80057f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 80057fa:	2207      	movs	r2, #7
 80057fc:	2130      	movs	r1, #48	; 0x30
 80057fe:	6878      	ldr	r0, [r7, #4]
 8005800:	f001 fad8 	bl	8006db4 <VL53L0X_WrByte>
 8005804:	4603      	mov	r3, r0
 8005806:	461a      	mov	r2, r3
 8005808:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800580c:	4313      	orrs	r3, r2
 800580e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x07);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8005812:	2201      	movs	r2, #1
 8005814:	21ff      	movs	r1, #255	; 0xff
 8005816:	6878      	ldr	r0, [r7, #4]
 8005818:	f001 facc 	bl	8006db4 <VL53L0X_WrByte>
 800581c:	4603      	mov	r3, r0
 800581e:	461a      	mov	r2, r3
 8005820:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005824:	4313      	orrs	r3, r2
 8005826:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800582a:	2220      	movs	r2, #32
 800582c:	2130      	movs	r1, #48	; 0x30
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f001 fac0 	bl	8006db4 <VL53L0X_WrByte>
 8005834:	4603      	mov	r3, r0
 8005836:	461a      	mov	r2, r3
 8005838:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800583c:	4313      	orrs	r3, r2
 800583e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8005842:	2200      	movs	r2, #0
 8005844:	21ff      	movs	r1, #255	; 0xff
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	f001 fab4 	bl	8006db4 <VL53L0X_WrByte>
 800584c:	4603      	mov	r3, r0
 800584e:	461a      	mov	r2, r3
 8005850:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005854:	4313      	orrs	r3, r2
 8005856:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}


	/* Re-calculate and apply timeouts, in macro periods */

	if (Status == VL53L0X_ERROR_NONE) {
 800585a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800585e:	2b00      	cmp	r3, #0
 8005860:	d17f      	bne.n	8005962 <VL53L0X_set_vcsel_pulse_period+0x4cc>
		vcsel_period_reg = VL53L0X_encode_vcsel_period((uint8_t)
 8005862:	78bb      	ldrb	r3, [r7, #2]
 8005864:	4618      	mov	r0, r3
 8005866:	f7fe fe37 	bl	80044d8 <VL53L0X_encode_vcsel_period>
 800586a:	4603      	mov	r3, r0
 800586c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		* using the new VCSEL period.
		*
		* For the MSRC timeout, the same applies - this timeout being
		* dependant on the pre-range vcsel period.
		*/
		switch (VcselPeriodType) {
 8005870:	78fb      	ldrb	r3, [r7, #3]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d002      	beq.n	800587c <VL53L0X_set_vcsel_pulse_period+0x3e6>
 8005876:	2b01      	cmp	r3, #1
 8005878:	d045      	beq.n	8005906 <VL53L0X_set_vcsel_pulse_period+0x470>
 800587a:	e06e      	b.n	800595a <VL53L0X_set_vcsel_pulse_period+0x4c4>
		case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
			Status = get_sequence_step_timeout(Dev,
 800587c:	f107 0314 	add.w	r3, r7, #20
 8005880:	461a      	mov	r2, r3
 8005882:	2103      	movs	r1, #3
 8005884:	6878      	ldr	r0, [r7, #4]
 8005886:	f7ff fc31 	bl	80050ec <get_sequence_step_timeout>
 800588a:	4603      	mov	r3, r0
 800588c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 8005890:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005894:	2b00      	cmp	r3, #0
 8005896:	d109      	bne.n	80058ac <VL53L0X_set_vcsel_pulse_period+0x416>
				Status = get_sequence_step_timeout(Dev,
 8005898:	f107 0310 	add.w	r3, r7, #16
 800589c:	461a      	mov	r2, r3
 800589e:	2102      	movs	r1, #2
 80058a0:	6878      	ldr	r0, [r7, #4]
 80058a2:	f7ff fc23 	bl	80050ec <get_sequence_step_timeout>
 80058a6:	4603      	mov	r3, r0
 80058a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					&MsrcTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 80058ac:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d109      	bne.n	80058c8 <VL53L0X_set_vcsel_pulse_period+0x432>
				Status = VL53L0X_WrByte(Dev,
 80058b4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80058b8:	461a      	mov	r2, r3
 80058ba:	2150      	movs	r1, #80	; 0x50
 80058bc:	6878      	ldr	r0, [r7, #4]
 80058be:	f001 fa79 	bl	8006db4 <VL53L0X_WrByte>
 80058c2:	4603      	mov	r3, r0
 80058c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 80058c8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d108      	bne.n	80058e2 <VL53L0X_set_vcsel_pulse_period+0x44c>
				Status = set_sequence_step_timeout(Dev,
 80058d0:	697b      	ldr	r3, [r7, #20]
 80058d2:	461a      	mov	r2, r3
 80058d4:	2103      	movs	r1, #3
 80058d6:	6878      	ldr	r0, [r7, #4]
 80058d8:	f7ff fce9 	bl	80052ae <set_sequence_step_timeout>
 80058dc:	4603      	mov	r3, r0
 80058de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_PRE_RANGE,
					PreRangeTimeoutMicroSeconds);


			if (Status == VL53L0X_ERROR_NONE)
 80058e2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d108      	bne.n	80058fc <VL53L0X_set_vcsel_pulse_period+0x466>
				Status = set_sequence_step_timeout(Dev,
 80058ea:	693b      	ldr	r3, [r7, #16]
 80058ec:	461a      	mov	r2, r3
 80058ee:	2102      	movs	r1, #2
 80058f0:	6878      	ldr	r0, [r7, #4]
 80058f2:	f7ff fcdc 	bl	80052ae <set_sequence_step_timeout>
 80058f6:	4603      	mov	r3, r0
 80058f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					MsrcTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	78ba      	ldrb	r2, [r7, #2]
 8005900:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				Dev,
				PreRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 8005904:	e02e      	b.n	8005964 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
			Status = get_sequence_step_timeout(Dev,
 8005906:	f107 0318 	add.w	r3, r7, #24
 800590a:	461a      	mov	r2, r3
 800590c:	2104      	movs	r1, #4
 800590e:	6878      	ldr	r0, [r7, #4]
 8005910:	f7ff fbec 	bl	80050ec <get_sequence_step_timeout>
 8005914:	4603      	mov	r3, r0
 8005916:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_FINAL_RANGE,
				&FinalRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800591a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800591e:	2b00      	cmp	r3, #0
 8005920:	d109      	bne.n	8005936 <VL53L0X_set_vcsel_pulse_period+0x4a0>
				Status = VL53L0X_WrByte(Dev,
 8005922:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8005926:	461a      	mov	r2, r3
 8005928:	2170      	movs	r1, #112	; 0x70
 800592a:	6878      	ldr	r0, [r7, #4]
 800592c:	f001 fa42 	bl	8006db4 <VL53L0X_WrByte>
 8005930:	4603      	mov	r3, r0
 8005932:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 8005936:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800593a:	2b00      	cmp	r3, #0
 800593c:	d108      	bne.n	8005950 <VL53L0X_set_vcsel_pulse_period+0x4ba>
				Status = set_sequence_step_timeout(Dev,
 800593e:	69bb      	ldr	r3, [r7, #24]
 8005940:	461a      	mov	r2, r3
 8005942:	2104      	movs	r1, #4
 8005944:	6878      	ldr	r0, [r7, #4]
 8005946:	f7ff fcb2 	bl	80052ae <set_sequence_step_timeout>
 800594a:	4603      	mov	r3, r0
 800594c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					FinalRangeTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	78ba      	ldrb	r2, [r7, #2]
 8005954:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				Dev,
				FinalRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 8005958:	e004      	b.n	8005964 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800595a:	23fc      	movs	r3, #252	; 0xfc
 800595c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005960:	e000      	b.n	8005964 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		}
	}
 8005962:	bf00      	nop

	/* Finally, the timing budget must be re-applied */
	if (Status == VL53L0X_ERROR_NONE) {
 8005964:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005968:	2b00      	cmp	r3, #0
 800596a:	d109      	bne.n	8005980 <VL53L0X_set_vcsel_pulse_period+0x4ea>
		VL53L0X_GETPARAMETERFIELD(Dev,
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	695b      	ldr	r3, [r3, #20]
 8005970:	61fb      	str	r3, [r7, #28]
			MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);

		Status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 8005972:	69f9      	ldr	r1, [r7, #28]
 8005974:	6878      	ldr	r0, [r7, #4]
 8005976:	f7fc fe13 	bl	80025a0 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 800597a:	4603      	mov	r3, r0
 800597c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Perform the phase calibration. This is needed after changing on
	 * vcsel period.
	 * get_data_enable = 0, restore_config = 1 */
	if (Status == VL53L0X_ERROR_NONE)
 8005980:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005984:	2b00      	cmp	r3, #0
 8005986:	d109      	bne.n	800599c <VL53L0X_set_vcsel_pulse_period+0x506>
		Status = VL53L0X_perform_phase_calibration(
 8005988:	f107 010f 	add.w	r1, r7, #15
 800598c:	2301      	movs	r3, #1
 800598e:	2200      	movs	r2, #0
 8005990:	6878      	ldr	r0, [r7, #4]
 8005992:	f7fe fcbd 	bl	8004310 <VL53L0X_perform_phase_calibration>
 8005996:	4603      	mov	r3, r0
 8005998:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Dev, &PhaseCalInt, 0, 1);

	return Status;
 800599c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80059a0:	4618      	mov	r0, r3
 80059a2:	3728      	adds	r7, #40	; 0x28
 80059a4:	46bd      	mov	sp, r7
 80059a6:	bd80      	pop	{r7, pc}

080059a8 <VL53L0X_get_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b086      	sub	sp, #24
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	60f8      	str	r0, [r7, #12]
 80059b0:	460b      	mov	r3, r1
 80059b2:	607a      	str	r2, [r7, #4]
 80059b4:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80059b6:	2300      	movs	r3, #0
 80059b8:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 80059ba:	7afb      	ldrb	r3, [r7, #11]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d002      	beq.n	80059c6 <VL53L0X_get_vcsel_pulse_period+0x1e>
 80059c0:	2b01      	cmp	r3, #1
 80059c2:	d00a      	beq.n	80059da <VL53L0X_get_vcsel_pulse_period+0x32>
 80059c4:	e013      	b.n	80059ee <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 80059c6:	f107 0316 	add.w	r3, r7, #22
 80059ca:	461a      	mov	r2, r3
 80059cc:	2150      	movs	r1, #80	; 0x50
 80059ce:	68f8      	ldr	r0, [r7, #12]
 80059d0:	f001 f8f5 	bl	8006bbe <VL53L0X_RdByte>
 80059d4:	4603      	mov	r3, r0
 80059d6:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 80059d8:	e00b      	b.n	80059f2 <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 80059da:	f107 0316 	add.w	r3, r7, #22
 80059de:	461a      	mov	r2, r3
 80059e0:	2170      	movs	r1, #112	; 0x70
 80059e2:	68f8      	ldr	r0, [r7, #12]
 80059e4:	f001 f8eb 	bl	8006bbe <VL53L0X_RdByte>
 80059e8:	4603      	mov	r3, r0
 80059ea:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 80059ec:	e001      	b.n	80059f2 <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80059ee:	23fc      	movs	r3, #252	; 0xfc
 80059f0:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 80059f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d107      	bne.n	8005a0a <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 80059fa:	7dbb      	ldrb	r3, [r7, #22]
 80059fc:	4618      	mov	r0, r3
 80059fe:	f7fe fd58 	bl	80044b2 <VL53L0X_decode_vcsel_period>
 8005a02:	4603      	mov	r3, r0
 8005a04:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	701a      	strb	r2, [r3, #0]

	return Status;
 8005a0a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005a0e:	4618      	mov	r0, r3
 8005a10:	3718      	adds	r7, #24
 8005a12:	46bd      	mov	sp, r7
 8005a14:	bd80      	pop	{r7, pc}

08005a16 <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8005a16:	b580      	push	{r7, lr}
 8005a18:	b092      	sub	sp, #72	; 0x48
 8005a1a:	af00      	add	r7, sp, #0
 8005a1c:	6078      	str	r0, [r7, #4]
 8005a1e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005a20:	2300      	movs	r3, #0
 8005a22:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 8005a26:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8005a2a:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1320;
 8005a2c:	f44f 63a5 	mov.w	r3, #1320	; 0x528
 8005a30:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t EndOverheadMicroSeconds		= 960;
 8005a32:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8005a36:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t MsrcOverheadMicroSeconds		= 660;
 8005a38:	f44f 7325 	mov.w	r3, #660	; 0x294
 8005a3c:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t TccOverheadMicroSeconds		= 590;
 8005a3e:	f240 234e 	movw	r3, #590	; 0x24e
 8005a42:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t DssOverheadMicroSeconds		= 690;
 8005a44:	f240 23b2 	movw	r3, #690	; 0x2b2
 8005a48:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 8005a4a:	f44f 7325 	mov.w	r3, #660	; 0x294
 8005a4e:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 8005a50:	f240 2326 	movw	r3, #550	; 0x226
 8005a54:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 8005a56:	2300      	movs	r3, #0
 8005a58:	60fb      	str	r3, [r7, #12]
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
 8005a5a:	f644 6320 	movw	r3, #20000	; 0x4e20
 8005a5e:	623b      	str	r3, [r7, #32]
	uint32_t SubTimeout = 0;
 8005a60:	2300      	movs	r3, #0
 8005a62:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
 8005a64:	683a      	ldr	r2, [r7, #0]
 8005a66:	6a3b      	ldr	r3, [r7, #32]
 8005a68:	429a      	cmp	r2, r3
 8005a6a:	d205      	bcs.n	8005a78 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x62>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005a6c:	23fc      	movs	r3, #252	; 0xfc
 8005a6e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		return Status;
 8005a72:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8005a76:	e0aa      	b.n	8005bce <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 8005a78:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005a7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a7c:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 8005a7e:	683a      	ldr	r2, [r7, #0]
 8005a80:	1ad3      	subs	r3, r2, r3
 8005a82:	643b      	str	r3, [r7, #64]	; 0x40

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8005a84:	f107 0314 	add.w	r3, r7, #20
 8005a88:	4619      	mov	r1, r3
 8005a8a:	6878      	ldr	r0, [r7, #4]
 8005a8c:	f7fc fed2 	bl	8002834 <VL53L0X_GetSequenceStepEnables>
 8005a90:	4603      	mov	r3, r0
 8005a92:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	if (Status == VL53L0X_ERROR_NONE &&
 8005a96:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d15b      	bne.n	8005b56 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
		(SchedulerSequenceSteps.TccOn  ||
 8005a9e:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d105      	bne.n	8005ab0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.MsrcOn ||
 8005aa4:	7d7b      	ldrb	r3, [r7, #21]
		(SchedulerSequenceSteps.TccOn  ||
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d102      	bne.n	8005ab0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.DssOn)) {
 8005aaa:	7dbb      	ldrb	r3, [r7, #22]
		SchedulerSequenceSteps.MsrcOn ||
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d052      	beq.n	8005b56 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 8005ab0:	f107 0310 	add.w	r3, r7, #16
 8005ab4:	461a      	mov	r2, r3
 8005ab6:	2102      	movs	r1, #2
 8005ab8:	6878      	ldr	r0, [r7, #4]
 8005aba:	f7ff fb17 	bl	80050ec <get_sequence_step_timeout>
 8005abe:	4603      	mov	r3, r0
 8005ac0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					&MsrcDccTccTimeoutMicroSeconds);

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled. */

		if (Status != VL53L0X_ERROR_NONE)
 8005ac4:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d002      	beq.n	8005ad2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbc>
			return Status;
 8005acc:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8005ad0:	e07d      	b.n	8005bce <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 8005ad2:	7d3b      	ldrb	r3, [r7, #20]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d00f      	beq.n	8005af8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 8005ad8:	693b      	ldr	r3, [r7, #16]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 8005ada:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005adc:	4413      	add	r3, r2
 8005ade:	61fb      	str	r3, [r7, #28]

			if (SubTimeout <
 8005ae0:	69fa      	ldr	r2, [r7, #28]
 8005ae2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ae4:	429a      	cmp	r2, r3
 8005ae6:	d204      	bcs.n	8005af2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xdc>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 8005ae8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005aea:	69fb      	ldr	r3, [r7, #28]
 8005aec:	1ad3      	subs	r3, r2, r3
 8005aee:	643b      	str	r3, [r7, #64]	; 0x40
 8005af0:	e002      	b.n	8005af8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005af2:	23fc      	movs	r3, #252	; 0xfc
 8005af4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 8005af8:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d002      	beq.n	8005b06 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf0>
			LOG_FUNCTION_END(Status);
			return Status;
 8005b00:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8005b04:	e063      	b.n	8005bce <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 8005b06:	7dbb      	ldrb	r3, [r7, #22]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d011      	beq.n	8005b30 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x11a>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 8005b0c:	693a      	ldr	r2, [r7, #16]
 8005b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b10:	4413      	add	r3, r2
 8005b12:	005b      	lsls	r3, r3, #1
 8005b14:	61fb      	str	r3, [r7, #28]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8005b16:	69fa      	ldr	r2, [r7, #28]
 8005b18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b1a:	429a      	cmp	r2, r3
 8005b1c:	d204      	bcs.n	8005b28 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x112>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 8005b1e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005b20:	69fb      	ldr	r3, [r7, #28]
 8005b22:	1ad3      	subs	r3, r2, r3
 8005b24:	643b      	str	r3, [r7, #64]	; 0x40
 8005b26:	e016      	b.n	8005b56 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005b28:	23fc      	movs	r3, #252	; 0xfc
 8005b2a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8005b2e:	e012      	b.n	8005b56 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 8005b30:	7d7b      	ldrb	r3, [r7, #21]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d00f      	beq.n	8005b56 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 8005b36:	693b      	ldr	r3, [r7, #16]
 8005b38:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005b3a:	4413      	add	r3, r2
 8005b3c:	61fb      	str	r3, [r7, #28]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8005b3e:	69fa      	ldr	r2, [r7, #28]
 8005b40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b42:	429a      	cmp	r2, r3
 8005b44:	d204      	bcs.n	8005b50 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x13a>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 8005b46:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005b48:	69fb      	ldr	r3, [r7, #28]
 8005b4a:	1ad3      	subs	r3, r2, r3
 8005b4c:	643b      	str	r3, [r7, #64]	; 0x40
 8005b4e:	e002      	b.n	8005b56 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005b50:	23fc      	movs	r3, #252	; 0xfc
 8005b52:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 8005b56:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d002      	beq.n	8005b64 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x14e>
		LOG_FUNCTION_END(Status);
		return Status;
 8005b5e:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8005b62:	e034      	b.n	8005bce <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 8005b64:	7dfb      	ldrb	r3, [r7, #23]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d019      	beq.n	8005b9e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 8005b6a:	f107 030c 	add.w	r3, r7, #12
 8005b6e:	461a      	mov	r2, r3
 8005b70:	2103      	movs	r1, #3
 8005b72:	6878      	ldr	r0, [r7, #4]
 8005b74:	f7ff faba 	bl	80050ec <get_sequence_step_timeout>
 8005b78:	4603      	mov	r3, r0
 8005b7a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b82:	4413      	add	r3, r2
 8005b84:	61fb      	str	r3, [r7, #28]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8005b86:	69fa      	ldr	r2, [r7, #28]
 8005b88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b8a:	429a      	cmp	r2, r3
 8005b8c:	d204      	bcs.n	8005b98 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x182>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 8005b8e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005b90:	69fb      	ldr	r3, [r7, #28]
 8005b92:	1ad3      	subs	r3, r2, r3
 8005b94:	643b      	str	r3, [r7, #64]	; 0x40
 8005b96:	e002      	b.n	8005b9e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005b98:	23fc      	movs	r3, #252	; 0xfc
 8005b9a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 8005b9e:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d111      	bne.n	8005bca <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>
		SchedulerSequenceSteps.FinalRangeOn) {
 8005ba6:	7e3b      	ldrb	r3, [r7, #24]
	if (Status == VL53L0X_ERROR_NONE &&
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d00e      	beq.n	8005bca <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>

		FinalRangeTimingBudgetMicroSeconds -=
 8005bac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb0:	1ad3      	subs	r3, r2, r3
 8005bb2:	643b      	str	r3, [r7, #64]	; 0x40
		* budget and the sum of all other timeouts within the sequence.
		* If there is no room for the final range timeout, then an error
		* will be set. Otherwise the remaining time will be applied to
		* the final range.
		*/
		Status = set_sequence_step_timeout(Dev,
 8005bb4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005bb6:	2104      	movs	r1, #4
 8005bb8:	6878      	ldr	r0, [r7, #4]
 8005bba:	f7ff fb78 	bl	80052ae <set_sequence_step_timeout>
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			   VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			   FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	683a      	ldr	r2, [r7, #0]
 8005bc8:	615a      	str	r2, [r3, #20]
			   MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);

	return Status;
 8005bca:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 8005bce:	4618      	mov	r0, r3
 8005bd0:	3748      	adds	r7, #72	; 0x48
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bd80      	pop	{r7, pc}

08005bd6 <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8005bd6:	b580      	push	{r7, lr}
 8005bd8:	b090      	sub	sp, #64	; 0x40
 8005bda:	af00      	add	r7, sp, #0
 8005bdc:	6078      	str	r0, [r7, #4]
 8005bde:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005be0:	2300      	movs	r3, #0
 8005be2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 8005be6:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8005bea:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 8005bec:	f240 7376 	movw	r3, #1910	; 0x776
 8005bf0:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 8005bf2:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8005bf6:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 8005bf8:	f44f 7325 	mov.w	r3, #660	; 0x294
 8005bfc:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 8005bfe:	f240 234e 	movw	r3, #590	; 0x24e
 8005c02:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 8005c04:	f240 23b2 	movw	r3, #690	; 0x2b2
 8005c08:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 8005c0a:	f44f 7325 	mov.w	r3, #660	; 0x294
 8005c0e:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 8005c10:	f240 2326 	movw	r3, #550	; 0x226
 8005c14:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 8005c16:	2300      	movs	r3, #0
 8005c18:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 8005c1a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005c1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c1e:	441a      	add	r2, r3
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8005c24:	f107 0318 	add.w	r3, r7, #24
 8005c28:	4619      	mov	r1, r3
 8005c2a:	6878      	ldr	r0, [r7, #4]
 8005c2c:	f7fc fe02 	bl	8002834 <VL53L0X_GetSequenceStepEnables>
 8005c30:	4603      	mov	r3, r0
 8005c32:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 8005c36:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d002      	beq.n	8005c44 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
		LOG_FUNCTION_END(Status);
		return Status;
 8005c3e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8005c42:	e075      	b.n	8005d30 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 8005c44:	7e3b      	ldrb	r3, [r7, #24]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d105      	bne.n	8005c56 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 8005c4a:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d102      	bne.n	8005c56 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn) {
 8005c50:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d030      	beq.n	8005cb8 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

		Status = get_sequence_step_timeout(Dev,
 8005c56:	f107 0310 	add.w	r3, r7, #16
 8005c5a:	461a      	mov	r2, r3
 8005c5c:	2102      	movs	r1, #2
 8005c5e:	6878      	ldr	r0, [r7, #4]
 8005c60:	f7ff fa44 	bl	80050ec <get_sequence_step_timeout>
 8005c64:	4603      	mov	r3, r0
 8005c66:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 8005c6a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d122      	bne.n	8005cb8 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
			if (SchedulerSequenceSteps.TccOn) {
 8005c72:	7e3b      	ldrb	r3, [r7, #24]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d007      	beq.n	8005c88 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
				*pMeasurementTimingBudgetMicroSeconds +=
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 8005c7c:	6939      	ldr	r1, [r7, #16]
 8005c7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c80:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 8005c82:	441a      	add	r2, r3
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 8005c88:	7ebb      	ldrb	r3, [r7, #26]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d009      	beq.n	8005ca2 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
				*pMeasurementTimingBudgetMicroSeconds +=
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 8005c92:	6939      	ldr	r1, [r7, #16]
 8005c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c96:	440b      	add	r3, r1
 8005c98:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 8005c9a:	441a      	add	r2, r3
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	601a      	str	r2, [r3, #0]
 8005ca0:	e00a      	b.n	8005cb8 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 8005ca2:	7e7b      	ldrb	r3, [r7, #25]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d007      	beq.n	8005cb8 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 8005cac:	6939      	ldr	r1, [r7, #16]
 8005cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cb0:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 8005cb2:	441a      	add	r2, r3
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005cb8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d114      	bne.n	8005cea <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
		if (SchedulerSequenceSteps.PreRangeOn) {
 8005cc0:	7efb      	ldrb	r3, [r7, #27]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d011      	beq.n	8005cea <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
			Status = get_sequence_step_timeout(Dev,
 8005cc6:	f107 030c 	add.w	r3, r7, #12
 8005cca:	461a      	mov	r2, r3
 8005ccc:	2103      	movs	r1, #3
 8005cce:	6878      	ldr	r0, [r7, #4]
 8005cd0:	f7ff fa0c 	bl	80050ec <get_sequence_step_timeout>
 8005cd4:	4603      	mov	r3, r0
 8005cd6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 8005cde:	68f9      	ldr	r1, [r7, #12]
 8005ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ce2:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 8005ce4:	441a      	add	r2, r3
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005cea:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d114      	bne.n	8005d1c <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 8005cf2:	7f3b      	ldrb	r3, [r7, #28]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d011      	beq.n	8005d1c <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
			Status = get_sequence_step_timeout(Dev,
 8005cf8:	f107 0314 	add.w	r3, r7, #20
 8005cfc:	461a      	mov	r2, r3
 8005cfe:	2104      	movs	r1, #4
 8005d00:	6878      	ldr	r0, [r7, #4]
 8005d02:	f7ff f9f3 	bl	80050ec <get_sequence_step_timeout>
 8005d06:	4603      	mov	r3, r0
 8005d08:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 8005d10:	6979      	ldr	r1, [r7, #20]
 8005d12:	6a3b      	ldr	r3, [r7, #32]
 8005d14:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 8005d16:	441a      	add	r2, r3
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005d1c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d103      	bne.n	8005d2c <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
		VL53L0X_SETPARAMETERFIELD(Dev,
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	681a      	ldr	r2, [r3, #0]
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005d2c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8005d30:	4618      	mov	r0, r3
 8005d32:	3740      	adds	r7, #64	; 0x40
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bd80      	pop	{r7, pc}

08005d38 <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b088      	sub	sp, #32
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
 8005d40:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005d42:	2300      	movs	r3, #0
 8005d44:	77fb      	strb	r3, [r7, #31]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 8005d46:	2300      	movs	r3, #0
 8005d48:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 8005d4a:	e0c6      	b.n	8005eda <VL53L0X_load_tuning_settings+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 8005d4c:	697b      	ldr	r3, [r7, #20]
 8005d4e:	683a      	ldr	r2, [r7, #0]
 8005d50:	4413      	add	r3, r2
 8005d52:	781b      	ldrb	r3, [r3, #0]
 8005d54:	74fb      	strb	r3, [r7, #19]
		Index++;
 8005d56:	697b      	ldr	r3, [r7, #20]
 8005d58:	3301      	adds	r3, #1
 8005d5a:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 8005d5c:	7cfb      	ldrb	r3, [r7, #19]
 8005d5e:	2bff      	cmp	r3, #255	; 0xff
 8005d60:	f040 808d 	bne.w	8005e7e <VL53L0X_load_tuning_settings+0x146>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 8005d64:	697b      	ldr	r3, [r7, #20]
 8005d66:	683a      	ldr	r2, [r7, #0]
 8005d68:	4413      	add	r3, r2
 8005d6a:	781b      	ldrb	r3, [r3, #0]
 8005d6c:	747b      	strb	r3, [r7, #17]
			Index++;
 8005d6e:	697b      	ldr	r3, [r7, #20]
 8005d70:	3301      	adds	r3, #1
 8005d72:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 8005d74:	7c7b      	ldrb	r3, [r7, #17]
 8005d76:	2b03      	cmp	r3, #3
 8005d78:	d87e      	bhi.n	8005e78 <VL53L0X_load_tuning_settings+0x140>
 8005d7a:	a201      	add	r2, pc, #4	; (adr r2, 8005d80 <VL53L0X_load_tuning_settings+0x48>)
 8005d7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d80:	08005d91 	.word	0x08005d91
 8005d84:	08005dcb 	.word	0x08005dcb
 8005d88:	08005e05 	.word	0x08005e05
 8005d8c:	08005e3f 	.word	0x08005e3f
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8005d90:	697b      	ldr	r3, [r7, #20]
 8005d92:	683a      	ldr	r2, [r7, #0]
 8005d94:	4413      	add	r3, r2
 8005d96:	781b      	ldrb	r3, [r3, #0]
 8005d98:	743b      	strb	r3, [r7, #16]
				Index++;
 8005d9a:	697b      	ldr	r3, [r7, #20]
 8005d9c:	3301      	adds	r3, #1
 8005d9e:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8005da0:	697b      	ldr	r3, [r7, #20]
 8005da2:	683a      	ldr	r2, [r7, #0]
 8005da4:	4413      	add	r3, r2
 8005da6:	781b      	ldrb	r3, [r3, #0]
 8005da8:	73fb      	strb	r3, [r7, #15]
				Index++;
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	3301      	adds	r3, #1
 8005dae:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8005db0:	7c3b      	ldrb	r3, [r7, #16]
 8005db2:	b29b      	uxth	r3, r3
 8005db4:	021b      	lsls	r3, r3, #8
 8005db6:	b29a      	uxth	r2, r3
 8005db8:	7bfb      	ldrb	r3, [r7, #15]
 8005dba:	b29b      	uxth	r3, r3
 8005dbc:	4413      	add	r3, r2
 8005dbe:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	89ba      	ldrh	r2, [r7, #12]
 8005dc4:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
				break;
 8005dc8:	e087      	b.n	8005eda <VL53L0X_load_tuning_settings+0x1a2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8005dca:	697b      	ldr	r3, [r7, #20]
 8005dcc:	683a      	ldr	r2, [r7, #0]
 8005dce:	4413      	add	r3, r2
 8005dd0:	781b      	ldrb	r3, [r3, #0]
 8005dd2:	743b      	strb	r3, [r7, #16]
				Index++;
 8005dd4:	697b      	ldr	r3, [r7, #20]
 8005dd6:	3301      	adds	r3, #1
 8005dd8:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8005dda:	697b      	ldr	r3, [r7, #20]
 8005ddc:	683a      	ldr	r2, [r7, #0]
 8005dde:	4413      	add	r3, r2
 8005de0:	781b      	ldrb	r3, [r3, #0]
 8005de2:	73fb      	strb	r3, [r7, #15]
				Index++;
 8005de4:	697b      	ldr	r3, [r7, #20]
 8005de6:	3301      	adds	r3, #1
 8005de8:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8005dea:	7c3b      	ldrb	r3, [r7, #16]
 8005dec:	b29b      	uxth	r3, r3
 8005dee:	021b      	lsls	r3, r3, #8
 8005df0:	b29a      	uxth	r2, r3
 8005df2:	7bfb      	ldrb	r3, [r7, #15]
 8005df4:	b29b      	uxth	r3, r3
 8005df6:	4413      	add	r3, r2
 8005df8:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	89ba      	ldrh	r2, [r7, #12]
 8005dfe:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
					Temp16);
				break;
 8005e02:	e06a      	b.n	8005eda <VL53L0X_load_tuning_settings+0x1a2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8005e04:	697b      	ldr	r3, [r7, #20]
 8005e06:	683a      	ldr	r2, [r7, #0]
 8005e08:	4413      	add	r3, r2
 8005e0a:	781b      	ldrb	r3, [r3, #0]
 8005e0c:	743b      	strb	r3, [r7, #16]
				Index++;
 8005e0e:	697b      	ldr	r3, [r7, #20]
 8005e10:	3301      	adds	r3, #1
 8005e12:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8005e14:	697b      	ldr	r3, [r7, #20]
 8005e16:	683a      	ldr	r2, [r7, #0]
 8005e18:	4413      	add	r3, r2
 8005e1a:	781b      	ldrb	r3, [r3, #0]
 8005e1c:	73fb      	strb	r3, [r7, #15]
				Index++;
 8005e1e:	697b      	ldr	r3, [r7, #20]
 8005e20:	3301      	adds	r3, #1
 8005e22:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8005e24:	7c3b      	ldrb	r3, [r7, #16]
 8005e26:	b29b      	uxth	r3, r3
 8005e28:	021b      	lsls	r3, r3, #8
 8005e2a:	b29a      	uxth	r2, r3
 8005e2c:	7bfb      	ldrb	r3, [r7, #15]
 8005e2e:	b29b      	uxth	r3, r3
 8005e30:	4413      	add	r3, r2
 8005e32:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	89ba      	ldrh	r2, [r7, #12]
 8005e38:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
				break;
 8005e3c:	e04d      	b.n	8005eda <VL53L0X_load_tuning_settings+0x1a2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8005e3e:	697b      	ldr	r3, [r7, #20]
 8005e40:	683a      	ldr	r2, [r7, #0]
 8005e42:	4413      	add	r3, r2
 8005e44:	781b      	ldrb	r3, [r3, #0]
 8005e46:	743b      	strb	r3, [r7, #16]
				Index++;
 8005e48:	697b      	ldr	r3, [r7, #20]
 8005e4a:	3301      	adds	r3, #1
 8005e4c:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8005e4e:	697b      	ldr	r3, [r7, #20]
 8005e50:	683a      	ldr	r2, [r7, #0]
 8005e52:	4413      	add	r3, r2
 8005e54:	781b      	ldrb	r3, [r3, #0]
 8005e56:	73fb      	strb	r3, [r7, #15]
				Index++;
 8005e58:	697b      	ldr	r3, [r7, #20]
 8005e5a:	3301      	adds	r3, #1
 8005e5c:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8005e5e:	7c3b      	ldrb	r3, [r7, #16]
 8005e60:	b29b      	uxth	r3, r3
 8005e62:	021b      	lsls	r3, r3, #8
 8005e64:	b29a      	uxth	r2, r3
 8005e66:	7bfb      	ldrb	r3, [r7, #15]
 8005e68:	b29b      	uxth	r3, r3
 8005e6a:	4413      	add	r3, r2
 8005e6c:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	89ba      	ldrh	r2, [r7, #12]
 8005e72:	f8a3 213a 	strh.w	r2, [r3, #314]	; 0x13a
				break;
 8005e76:	e030      	b.n	8005eda <VL53L0X_load_tuning_settings+0x1a2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005e78:	23fc      	movs	r3, #252	; 0xfc
 8005e7a:	77fb      	strb	r3, [r7, #31]
 8005e7c:	e02d      	b.n	8005eda <VL53L0X_load_tuning_settings+0x1a2>
			}

		} else if (NumberOfWrites <= 4) {
 8005e7e:	7cfb      	ldrb	r3, [r7, #19]
 8005e80:	2b04      	cmp	r3, #4
 8005e82:	d828      	bhi.n	8005ed6 <VL53L0X_load_tuning_settings+0x19e>
			Address = *(pTuningSettingBuffer + Index);
 8005e84:	697b      	ldr	r3, [r7, #20]
 8005e86:	683a      	ldr	r2, [r7, #0]
 8005e88:	4413      	add	r3, r2
 8005e8a:	781b      	ldrb	r3, [r3, #0]
 8005e8c:	74bb      	strb	r3, [r7, #18]
			Index++;
 8005e8e:	697b      	ldr	r3, [r7, #20]
 8005e90:	3301      	adds	r3, #1
 8005e92:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 8005e94:	2300      	movs	r3, #0
 8005e96:	61bb      	str	r3, [r7, #24]
 8005e98:	e00f      	b.n	8005eba <VL53L0X_load_tuning_settings+0x182>
				localBuffer[i] = *(pTuningSettingBuffer +
 8005e9a:	697b      	ldr	r3, [r7, #20]
 8005e9c:	683a      	ldr	r2, [r7, #0]
 8005e9e:	4413      	add	r3, r2
 8005ea0:	7819      	ldrb	r1, [r3, #0]
 8005ea2:	f107 0208 	add.w	r2, r7, #8
 8005ea6:	69bb      	ldr	r3, [r7, #24]
 8005ea8:	4413      	add	r3, r2
 8005eaa:	460a      	mov	r2, r1
 8005eac:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 8005eae:	697b      	ldr	r3, [r7, #20]
 8005eb0:	3301      	adds	r3, #1
 8005eb2:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 8005eb4:	69bb      	ldr	r3, [r7, #24]
 8005eb6:	3301      	adds	r3, #1
 8005eb8:	61bb      	str	r3, [r7, #24]
 8005eba:	7cfb      	ldrb	r3, [r7, #19]
 8005ebc:	69ba      	ldr	r2, [r7, #24]
 8005ebe:	429a      	cmp	r2, r3
 8005ec0:	dbeb      	blt.n	8005e9a <VL53L0X_load_tuning_settings+0x162>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 8005ec2:	7cfb      	ldrb	r3, [r7, #19]
 8005ec4:	f107 0208 	add.w	r2, r7, #8
 8005ec8:	7cb9      	ldrb	r1, [r7, #18]
 8005eca:	6878      	ldr	r0, [r7, #4]
 8005ecc:	f000 fea2 	bl	8006c14 <VL53L0X_WriteMulti>
 8005ed0:	4603      	mov	r3, r0
 8005ed2:	77fb      	strb	r3, [r7, #31]
 8005ed4:	e001      	b.n	8005eda <VL53L0X_load_tuning_settings+0x1a2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005ed6:	23fc      	movs	r3, #252	; 0xfc
 8005ed8:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 8005eda:	697b      	ldr	r3, [r7, #20]
 8005edc:	683a      	ldr	r2, [r7, #0]
 8005ede:	4413      	add	r3, r2
 8005ee0:	781b      	ldrb	r3, [r3, #0]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d004      	beq.n	8005ef0 <VL53L0X_load_tuning_settings+0x1b8>
 8005ee6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	f43f af2e 	beq.w	8005d4c <VL53L0X_load_tuning_settings+0x14>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005ef0:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	3720      	adds	r7, #32
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	bd80      	pop	{r7, pc}

08005efc <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b088      	sub	sp, #32
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	60f8      	str	r0, [r7, #12]
 8005f04:	60b9      	str	r1, [r7, #8]
 8005f06:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005f08:	2300      	movs	r3, #0
 8005f0a:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2200      	movs	r2, #0
 8005f10:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 8005f12:	f107 0313 	add.w	r3, r7, #19
 8005f16:	4619      	mov	r1, r3
 8005f18:	68f8      	ldr	r0, [r7, #12]
 8005f1a:	f7fc fd57 	bl	80029cc <VL53L0X_GetXTalkCompensationEnable>
 8005f1e:	4603      	mov	r3, r0
 8005f20:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 8005f22:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d111      	bne.n	8005f4e <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 8005f2a:	7cfb      	ldrb	r3, [r7, #19]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d00e      	beq.n	8005f4e <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	6a1b      	ldr	r3, [r3, #32]
 8005f34:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	8a9b      	ldrh	r3, [r3, #20]
 8005f3a:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 8005f3c:	69bb      	ldr	r3, [r7, #24]
 8005f3e:	fb02 f303 	mul.w	r3, r2, r3
 8005f42:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 8005f44:	697b      	ldr	r3, [r7, #20]
 8005f46:	3380      	adds	r3, #128	; 0x80
 8005f48:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 8005f4e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8005f52:	4618      	mov	r0, r3
 8005f54:	3720      	adds	r7, #32
 8005f56:	46bd      	mov	sp, r7
 8005f58:	bd80      	pop	{r7, pc}

08005f5a <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 8005f5a:	b580      	push	{r7, lr}
 8005f5c:	b086      	sub	sp, #24
 8005f5e:	af00      	add	r7, sp, #0
 8005f60:	60f8      	str	r0, [r7, #12]
 8005f62:	60b9      	str	r1, [r7, #8]
 8005f64:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005f66:	2300      	movs	r3, #0
 8005f68:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 8005f72:	f107 0310 	add.w	r3, r7, #16
 8005f76:	461a      	mov	r2, r3
 8005f78:	68b9      	ldr	r1, [r7, #8]
 8005f7a:	68f8      	ldr	r0, [r7, #12]
 8005f7c:	f7ff ffbe 	bl	8005efc <VL53L0X_get_total_xtalk_rate>
 8005f80:	4603      	mov	r3, r0
 8005f82:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 8005f84:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d105      	bne.n	8005f98 <VL53L0X_get_total_signal_rate+0x3e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681a      	ldr	r2, [r3, #0]
 8005f90:	693b      	ldr	r3, [r7, #16]
 8005f92:	441a      	add	r2, r3
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	601a      	str	r2, [r3, #0]

	return Status;
 8005f98:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	3718      	adds	r7, #24
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	bd80      	pop	{r7, pc}

08005fa4 <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b09a      	sub	sp, #104	; 0x68
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	60f8      	str	r0, [r7, #12]
 8005fac:	60b9      	str	r1, [r7, #8]
 8005fae:	607a      	str	r2, [r7, #4]
 8005fb0:	603b      	str	r3, [r7, #0]
	const uint32_t cSigmaLimit		= 18;
 8005fb2:	2312      	movs	r3, #18
 8005fb4:	657b      	str	r3, [r7, #84]	; 0x54
	const FixPoint1616_t cSignalLimit	= 0x4000; /* 0.25 */
 8005fb6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005fba:	653b      	str	r3, [r7, #80]	; 0x50
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 8005fbc:	2342      	movs	r3, #66	; 0x42
 8005fbe:	64fb      	str	r3, [r7, #76]	; 0x4c
	const uint32_t cAmbEffWidthSigmaEst_ns = 6;
 8005fc0:	2306      	movs	r3, #6
 8005fc2:	64bb      	str	r3, [r7, #72]	; 0x48
	const uint32_t cAmbEffWidthDMax_ns	   = 7;
 8005fc4:	2307      	movs	r3, #7
 8005fc6:	647b      	str	r3, [r7, #68]	; 0x44
	FixPoint1616_t dmaxAmbient;
	FixPoint1616_t dmaxDarkTmp;
	FixPoint1616_t sigmaEstP2Tmp;
	uint32_t signalRateTemp_mcps;

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005fc8:	2300      	movs	r3, #0
 8005fca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	f8b3 3150 	ldrh.w	r3, [r3, #336]	; 0x150
	dmaxCalRange_mm =
 8005fd4:	63fb      	str	r3, [r7, #60]	; 0x3c

	dmaxCalSignalRateRtn_mcps =
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8005fdc:	63bb      	str	r3, [r7, #56]	; 0x38
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 8005fde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fe0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005fe2:	fb02 f303 	mul.w	r3, r2, r3
 8005fe6:	637b      	str	r3, [r7, #52]	; 0x34

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 8005fe8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fea:	3380      	adds	r3, #128	; 0x80
 8005fec:	0a1b      	lsrs	r3, r3, #8
 8005fee:	637b      	str	r3, [r7, #52]	; 0x34
	SignalAt0mm *= dmaxCalRange_mm;
 8005ff0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ff2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005ff4:	fb02 f303 	mul.w	r3, r2, r3
 8005ff8:	637b      	str	r3, [r7, #52]	; 0x34

	minSignalNeeded_p1 = 0;
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	667b      	str	r3, [r7, #100]	; 0x64
	if (totalCorrSignalRate_mcps > 0) {
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d01b      	beq.n	800603c <VL53L0X_calc_dmax+0x98>

		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	029b      	lsls	r3, r3, #10
 8006008:	633b      	str	r3, [r7, #48]	; 0x30

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
			(totalCorrSignalRate_mcps/2);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	085b      	lsrs	r3, r3, #1
		minSignalNeeded_p1 = signalRateTemp_mcps +
 800600e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006010:	4413      	add	r3, r2
 8006012:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 8006014:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	fbb2 f3f3 	udiv	r3, r2, r3
 800601c:	667b      	str	r3, [r7, #100]	; 0x64

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 800601e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006020:	4613      	mov	r3, r2
 8006022:	005b      	lsls	r3, r3, #1
 8006024:	4413      	add	r3, r2
 8006026:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 8006028:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800602a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800602c:	fb02 f303 	mul.w	r3, r2, r3
 8006030:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 8006032:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006034:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8006038:	0c1b      	lsrs	r3, r3, #16
 800603a:	667b      	str	r3, [r7, #100]	; 0x64
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8006040:	fb02 f303 	mul.w	r3, r2, r3
 8006044:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* FixPoint1616 >> 16 =	 uint32 */
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 8006046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006048:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800604c:	0c1b      	lsrs	r3, r3, #16
 800604e:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* uint32 * uint32	=  uint32 */
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 8006050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006052:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006054:	fb02 f303 	mul.w	r3, r2, r3
 8006058:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 800605a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800605c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8006060:	0c1b      	lsrs	r3, r3, #16
 8006062:	62bb      	str	r3, [r7, #40]	; 0x28
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 8006064:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006066:	085a      	lsrs	r2, r3, #1
 8006068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800606a:	441a      	add	r2, r3
 800606c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800606e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006072:	62bb      	str	r3, [r7, #40]	; 0x28
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 8006074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006076:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006078:	fb02 f303 	mul.w	r3, r2, r3
 800607c:	62bb      	str	r3, [r7, #40]	; 0x28

	if (sigmaEstP2Tmp > 0xffff) {
 800607e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006080:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006084:	d302      	bcc.n	800608c <VL53L0X_calc_dmax+0xe8>
		minSignalNeeded_p3 = 0xfff00000;
 8006086:	4b55      	ldr	r3, [pc, #340]	; (80061dc <VL53L0X_calc_dmax+0x238>)
 8006088:	663b      	str	r3, [r7, #96]	; 0x60
 800608a:	e016      	b.n	80060ba <VL53L0X_calc_dmax+0x116>

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 800608c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800608e:	085a      	lsrs	r2, r3, #1
 8006090:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006092:	441a      	add	r2, r3
 8006094:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006096:	fbb2 f3f3 	udiv	r3, r2, r3
 800609a:	677b      	str	r3, [r7, #116]	; 0x74
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 800609c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800609e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80060a0:	fb02 f303 	mul.w	r3, r2, r3
 80060a4:	677b      	str	r3, [r7, #116]	; 0x74

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 80060a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80060a8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80060ac:	0c1b      	lsrs	r3, r3, #16
 80060ae:	663b      	str	r3, [r7, #96]	; 0x60

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 80060b0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80060b2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80060b4:	fb02 f303 	mul.w	r3, r2, r3
 80060b8:	663b      	str	r3, [r7, #96]	; 0x60

	}

	/* FixPoint1814 / uint32 = FixPoint1814 */
	sigmaLimitTmp = ((cSigmaLimit << 14) + 500) / 1000;
 80060ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80060bc:	039b      	lsls	r3, r3, #14
 80060be:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80060c2:	4a47      	ldr	r2, [pc, #284]	; (80061e0 <VL53L0X_calc_dmax+0x23c>)
 80060c4:	fba2 2303 	umull	r2, r3, r2, r3
 80060c8:	099b      	lsrs	r3, r3, #6
 80060ca:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1814 * FixPoint1814 = FixPoint3628 := FixPoint0428 */
	sigmaLimitTmp *= sigmaLimitTmp;
 80060cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060d0:	fb02 f303 	mul.w	r3, r2, r3
 80060d4:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
	sigmaEstSqTmp = cSigmaEstRef * cSigmaEstRef;
 80060d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060d8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80060da:	fb02 f303 	mul.w	r3, r2, r3
 80060de:	623b      	str	r3, [r7, #32]

	/* FixPoint3232 >> 4 = FixPoint0428 */
	sigmaEstSqTmp = (sigmaEstSqTmp + 0x08) >> 4;
 80060e0:	6a3b      	ldr	r3, [r7, #32]
 80060e2:	3308      	adds	r3, #8
 80060e4:	091b      	lsrs	r3, r3, #4
 80060e6:	623b      	str	r3, [r7, #32]

	/* FixPoint0428 - FixPoint0428	= FixPoint0428 */
	sigmaLimitTmp -=  sigmaEstSqTmp;
 80060e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060ea:	6a3b      	ldr	r3, [r7, #32]
 80060ec:	1ad3      	subs	r3, r2, r3
 80060ee:	627b      	str	r3, [r7, #36]	; 0x24

	/* uint32_t * FixPoint0428 = FixPoint0428 */
	minSignalNeeded_p4 = 4 * 12 * sigmaLimitTmp;
 80060f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060f2:	4613      	mov	r3, r2
 80060f4:	005b      	lsls	r3, r3, #1
 80060f6:	4413      	add	r3, r2
 80060f8:	011b      	lsls	r3, r3, #4
 80060fa:	61fb      	str	r3, [r7, #28]

	/* FixPoint0428 >> 14 = FixPoint1814 */
	minSignalNeeded_p4 = (minSignalNeeded_p4 + 0x2000) >> 14;
 80060fc:	69fb      	ldr	r3, [r7, #28]
 80060fe:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006102:	0b9b      	lsrs	r3, r3, #14
 8006104:	61fb      	str	r3, [r7, #28]

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);
 8006106:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006108:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800610a:	4413      	add	r3, r2
 800610c:	61bb      	str	r3, [r7, #24]

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
 800610e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006110:	085b      	lsrs	r3, r3, #1
 8006112:	69ba      	ldr	r2, [r7, #24]
 8006114:	4413      	add	r3, r2
 8006116:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= peakVcselDuration_us;
 8006118:	69ba      	ldr	r2, [r7, #24]
 800611a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800611c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006120:	61bb      	str	r3, [r7, #24]

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
 8006122:	69bb      	ldr	r3, [r7, #24]
 8006124:	039b      	lsls	r3, r3, #14
 8006126:	61bb      	str	r3, [r7, #24]

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
 8006128:	69fb      	ldr	r3, [r7, #28]
 800612a:	085b      	lsrs	r3, r3, #1
 800612c:	69ba      	ldr	r2, [r7, #24]
 800612e:	4413      	add	r3, r2
 8006130:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= minSignalNeeded_p4;
 8006132:	69ba      	ldr	r2, [r7, #24]
 8006134:	69fb      	ldr	r3, [r7, #28]
 8006136:	fbb2 f3f3 	udiv	r3, r2, r3
 800613a:	61bb      	str	r3, [r7, #24]

	/* FixPoint3200 * FixPoint2804 := FixPoint2804*/
	minSignalNeeded *= minSignalNeeded_p1;
 800613c:	69bb      	ldr	r3, [r7, #24]
 800613e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006140:	fb02 f303 	mul.w	r3, r2, r3
 8006144:	61bb      	str	r3, [r7, #24]
	 * and 10E-22 on the denominator.
	 * We do this because 32bit fix point calculation can't
	 * handle the larger and smaller elements of this equation,
	 * i.e. speed of light and pulse widths.
	 */
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 8006146:	69bb      	ldr	r3, [r7, #24]
 8006148:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800614c:	4a24      	ldr	r2, [pc, #144]	; (80061e0 <VL53L0X_calc_dmax+0x23c>)
 800614e:	fba2 2303 	umull	r2, r3, r2, r3
 8006152:	099b      	lsrs	r3, r3, #6
 8006154:	61bb      	str	r3, [r7, #24]
	minSignalNeeded <<= 4;
 8006156:	69bb      	ldr	r3, [r7, #24]
 8006158:	011b      	lsls	r3, r3, #4
 800615a:	61bb      	str	r3, [r7, #24]

	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800615c:	69bb      	ldr	r3, [r7, #24]
 800615e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8006162:	4a1f      	ldr	r2, [pc, #124]	; (80061e0 <VL53L0X_calc_dmax+0x23c>)
 8006164:	fba2 2303 	umull	r2, r3, r2, r3
 8006168:	099b      	lsrs	r3, r3, #6
 800616a:	61bb      	str	r3, [r7, #24]

	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;
 800616c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800616e:	3380      	adds	r3, #128	; 0x80
 8006170:	0a1b      	lsrs	r3, r3, #8
 8006172:	617b      	str	r3, [r7, #20]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
 8006174:	697b      	ldr	r3, [r7, #20]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d008      	beq.n	800618c <VL53L0X_calc_dmax+0x1e8>
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 800617a:	697b      	ldr	r3, [r7, #20]
 800617c:	085a      	lsrs	r2, r3, #1
 800617e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006180:	441a      	add	r2, r3
 8006182:	697b      	ldr	r3, [r7, #20]
 8006184:	fbb2 f3f3 	udiv	r3, r2, r3
 8006188:	65bb      	str	r3, [r7, #88]	; 0x58
 800618a:	e001      	b.n	8006190 <VL53L0X_calc_dmax+0x1ec>
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;
 800618c:	2300      	movs	r3, #0
 800618e:	65bb      	str	r3, [r7, #88]	; 0x58

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 8006190:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8006192:	f7fe f9b4 	bl	80044fe <VL53L0X_isqrt>
 8006196:	6138      	str	r0, [r7, #16]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 8006198:	69bb      	ldr	r3, [r7, #24]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d008      	beq.n	80061b0 <VL53L0X_calc_dmax+0x20c>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 800619e:	69bb      	ldr	r3, [r7, #24]
 80061a0:	085a      	lsrs	r2, r3, #1
 80061a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061a4:	441a      	add	r2, r3
 80061a6:	69bb      	ldr	r3, [r7, #24]
 80061a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80061ac:	65fb      	str	r3, [r7, #92]	; 0x5c
 80061ae:	e001      	b.n	80061b4 <VL53L0X_calc_dmax+0x210>
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
 80061b0:	2300      	movs	r3, #0
 80061b2:	65fb      	str	r3, [r7, #92]	; 0x5c

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 80061b4:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80061b6:	f7fe f9a2 	bl	80044fe <VL53L0X_isqrt>
 80061ba:	65f8      	str	r0, [r7, #92]	; 0x5c

	*pdmax_mm = dmaxDark;
 80061bc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80061be:	693a      	ldr	r2, [r7, #16]
 80061c0:	601a      	str	r2, [r3, #0]
	if (dmaxDark > dmaxAmbient)
 80061c2:	693a      	ldr	r2, [r7, #16]
 80061c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80061c6:	429a      	cmp	r2, r3
 80061c8:	d902      	bls.n	80061d0 <VL53L0X_calc_dmax+0x22c>
		*pdmax_mm = dmaxAmbient;
 80061ca:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80061cc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80061ce:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);

	return Status;
 80061d0:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
}
 80061d4:	4618      	mov	r0, r3
 80061d6:	3768      	adds	r7, #104	; 0x68
 80061d8:	46bd      	mov	sp, r7
 80061da:	bd80      	pop	{r7, pc}
 80061dc:	fff00000 	.word	0xfff00000
 80061e0:	10624dd3 	.word	0x10624dd3

080061e4 <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b0b2      	sub	sp, #200	; 0xc8
 80061e8:	af04      	add	r7, sp, #16
 80061ea:	60f8      	str	r0, [r7, #12]
 80061ec:	60b9      	str	r1, [r7, #8]
 80061ee:	607a      	str	r2, [r7, #4]
 80061f0:	603b      	str	r3, [r7, #0]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 80061f2:	f44f 7348 	mov.w	r3, #800	; 0x320
 80061f6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 80061fa:	f44f 7316 	mov.w	r3, #600	; 0x258
 80061fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 8006202:	2342      	movs	r3, #66	; 0x42
 8006204:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 8006208:	f241 235c 	movw	r3, #4700	; 0x125c
 800620c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 8006210:	4b6b      	ldr	r3, [pc, #428]	; (80063c0 <VL53L0X_calc_sigma_estimate+0x1dc>)
 8006212:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 8006216:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800621a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 800621e:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 8006222:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006226:	fbb2 f3f3 	udiv	r3, r2, r3
 800622a:	67fb      	str	r3, [r7, #124]	; 0x7c
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 800622c:	4b65      	ldr	r3, [pc, #404]	; (80063c4 <VL53L0X_calc_sigma_estimate+0x1e0>)
 800622e:	67bb      	str	r3, [r7, #120]	; 0x78
	const uint32_t c16BitRoundingParam		= 0x00008000;
 8006230:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006234:	677b      	str	r3, [r7, #116]	; 0x74
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 8006236:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 800623a:	673b      	str	r3, [r7, #112]	; 0x70
	const uint32_t cPllPeriod_ps			= 1655;
 800623c:	f240 6377 	movw	r3, #1655	; 0x677
 8006240:	66fb      	str	r3, [r7, #108]	; 0x6c
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006242:	2300      	movs	r3, #0
 8006244:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
	 *	- SigmaEstEffAmbWidth
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	6a1b      	ldr	r3, [r3, #32]
 800624c:	617b      	str	r3, [r7, #20]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 800624e:	68bb      	ldr	r3, [r7, #8]
 8006250:	691b      	ldr	r3, [r3, #16]
 8006252:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006256:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 800625a:	0c1b      	lsrs	r3, r3, #16
 800625c:	66bb      	str	r3, [r7, #104]	; 0x68

	correctedSignalRate_mcps =
 800625e:	68bb      	ldr	r3, [r7, #8]
 8006260:	68db      	ldr	r3, [r3, #12]
 8006262:	667b      	str	r3, [r7, #100]	; 0x64
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 8006264:	f107 0310 	add.w	r3, r7, #16
 8006268:	461a      	mov	r2, r3
 800626a:	68b9      	ldr	r1, [r7, #8]
 800626c:	68f8      	ldr	r0, [r7, #12]
 800626e:	f7ff fe74 	bl	8005f5a <VL53L0X_get_total_signal_rate>
 8006272:	4603      	mov	r3, r0
 8006274:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 8006278:	f107 0314 	add.w	r3, r7, #20
 800627c:	461a      	mov	r2, r3
 800627e:	68b9      	ldr	r1, [r7, #8]
 8006280:	68f8      	ldr	r0, [r7, #12]
 8006282:	f7ff fe3b 	bl	8005efc <VL53L0X_get_total_xtalk_rate>
 8006286:	4603      	mov	r3, r0
 8006288:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 800628c:	693b      	ldr	r3, [r7, #16]
 800628e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006292:	fb02 f303 	mul.w	r3, r2, r3
 8006296:	663b      	str	r3, [r7, #96]	; 0x60
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 8006298:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800629a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800629e:	0c1b      	lsrs	r3, r3, #16
 80062a0:	663b      	str	r3, [r7, #96]	; 0x60

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 80062a2:	697b      	ldr	r3, [r7, #20]
 80062a4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80062a8:	fb02 f303 	mul.w	r3, r2, r3
 80062ac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 80062b0:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80062b4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80062b6:	429a      	cmp	r2, r3
 80062b8:	d902      	bls.n	80062c0 <VL53L0X_calc_sigma_estimate+0xdc>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 80062ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80062bc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

	if (Status == VL53L0X_ERROR_NONE) {
 80062c0:	f997 30a3 	ldrsb.w	r3, [r7, #163]	; 0xa3
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d164      	bne.n	8006392 <VL53L0X_calc_sigma_estimate+0x1ae>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80062ce:	65fb      	str	r3, [r7, #92]	; 0x5c
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 80062d6:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 80062da:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80062de:	461a      	mov	r2, r3
 80062e0:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80062e2:	68f8      	ldr	r0, [r7, #12]
 80062e4:	f7fe feac 	bl	8005040 <VL53L0X_calc_timeout_mclks>
 80062e8:	6578      	str	r0, [r7, #84]	; 0x54
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80062f0:	653b      	str	r3, [r7, #80]	; 0x50
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 80062f8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 80062fc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8006300:	461a      	mov	r2, r3
 8006302:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006304:	68f8      	ldr	r0, [r7, #12]
 8006306:	f7fe fe9b 	bl	8005040 <VL53L0X_calc_timeout_mclks>
 800630a:	64b8      	str	r0, [r7, #72]	; 0x48
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 800630c:	2303      	movs	r3, #3
 800630e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
		if (finalRangeVcselPCLKS == 8)
 8006312:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8006316:	2b08      	cmp	r3, #8
 8006318:	d102      	bne.n	8006320 <VL53L0X_calc_sigma_estimate+0x13c>
			vcselWidth = 2;
 800631a:	2302      	movs	r3, #2
 800631c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 8006320:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006322:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006324:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 8006326:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800632a:	fb02 f303 	mul.w	r3, r2, r3
 800632e:	02db      	lsls	r3, r3, #11
 8006330:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 8006334:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006338:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800633c:	4a22      	ldr	r2, [pc, #136]	; (80063c8 <VL53L0X_calc_sigma_estimate+0x1e4>)
 800633e:	fba2 2303 	umull	r2, r3, r2, r3
 8006342:	099b      	lsrs	r3, r3, #6
 8006344:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		peakVcselDuration_us *= cPllPeriod_ps;
 8006348:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800634c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800634e:	fb02 f303 	mul.w	r3, r2, r3
 8006352:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 8006356:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800635a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800635e:	4a1a      	ldr	r2, [pc, #104]	; (80063c8 <VL53L0X_calc_sigma_estimate+0x1e4>)
 8006360:	fba2 2303 	umull	r2, r3, r2, r3
 8006364:	099b      	lsrs	r3, r3, #6
 8006366:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 800636a:	693b      	ldr	r3, [r7, #16]
 800636c:	3380      	adds	r3, #128	; 0x80
 800636e:	0a1b      	lsrs	r3, r3, #8
 8006370:	613b      	str	r3, [r7, #16]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 8006372:	693a      	ldr	r2, [r7, #16]
 8006374:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006378:	fb02 f303 	mul.w	r3, r2, r3
 800637c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 8006380:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006384:	3380      	adds	r3, #128	; 0x80
 8006386:	0a1b      	lsrs	r3, r3, #8
 8006388:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 800638c:	693b      	ldr	r3, [r7, #16]
 800638e:	021b      	lsls	r3, r3, #8
 8006390:	613b      	str	r3, [r7, #16]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 8006392:	f997 30a3 	ldrsb.w	r3, [r7, #163]	; 0xa3
 8006396:	2b00      	cmp	r3, #0
 8006398:	d002      	beq.n	80063a0 <VL53L0X_calc_sigma_estimate+0x1bc>
		LOG_FUNCTION_END(Status);
		return Status;
 800639a:	f997 30a3 	ldrsb.w	r3, [r7, #163]	; 0xa3
 800639e:	e12e      	b.n	80065fe <VL53L0X_calc_sigma_estimate+0x41a>
	}

	if (peakSignalRate_kcps == 0) {
 80063a0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d112      	bne.n	80063cc <VL53L0X_calc_sigma_estimate+0x1e8>
		*pSigmaEstimate = cSigmaEstMax;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80063ac:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80063b4:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
		*pDmax_mm = 0;
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	2200      	movs	r2, #0
 80063bc:	601a      	str	r2, [r3, #0]
 80063be:	e11c      	b.n	80065fa <VL53L0X_calc_sigma_estimate+0x416>
 80063c0:	028f87ae 	.word	0x028f87ae
 80063c4:	0006999a 	.word	0x0006999a
 80063c8:	10624dd3 	.word	0x10624dd3
	} else {
		if (vcselTotalEventsRtn < 1)
 80063cc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d102      	bne.n	80063da <VL53L0X_calc_sigma_estimate+0x1f6>
			vcselTotalEventsRtn = 1;
 80063d4:	2301      	movs	r3, #1
 80063d6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
		 * deltaT_ps represents the time of flight in pico secs for the
		 * current range measurement, using the "TOF per mm" constant
		 * (in ps).
		 */

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 80063da:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80063de:	647b      	str	r3, [r7, #68]	; 0x44

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 80063e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80063e2:	041a      	lsls	r2, r3, #16
 80063e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80063e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80063ea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 80063ee:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80063f2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80063f4:	429a      	cmp	r2, r3
 80063f6:	d902      	bls.n	80063fe <VL53L0X_calc_sigma_estimate+0x21a>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 80063f8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80063fa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 80063fe:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006402:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8006406:	fb02 f303 	mul.w	r3, r2, r3
 800640a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 800640e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006412:	4613      	mov	r3, r2
 8006414:	005b      	lsls	r3, r3, #1
 8006416:	4413      	add	r3, r2
 8006418:	009b      	lsls	r3, r3, #2
 800641a:	4618      	mov	r0, r3
 800641c:	f7fe f86f 	bl	80044fe <VL53L0X_isqrt>
 8006420:	4603      	mov	r3, r0
 8006422:	005b      	lsls	r3, r3, #1
 8006424:	643b      	str	r3, [r7, #64]	; 0x40

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	891b      	ldrh	r3, [r3, #8]
 800642a:	461a      	mov	r2, r3
 800642c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800642e:	fb02 f303 	mul.w	r3, r2, r3
 8006432:	63fb      	str	r3, [r7, #60]	; 0x3c
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8006434:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006436:	041a      	lsls	r2, r3, #16
 8006438:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800643c:	1ad3      	subs	r3, r2, r3
			xTalkCompRate_kcps) + 500)/1000;
 800643e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8006442:	4a71      	ldr	r2, [pc, #452]	; (8006608 <VL53L0X_calc_sigma_estimate+0x424>)
 8006444:	fba2 2303 	umull	r2, r3, r2, r3
 8006448:	099b      	lsrs	r3, r3, #6
 800644a:	63bb      	str	r3, [r7, #56]	; 0x38

		/* vcselRate + xtalkCompRate */
		diff2_mcps = (((peakSignalRate_kcps << 16) +
 800644c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800644e:	041a      	lsls	r2, r3, #16
 8006450:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006454:	4413      	add	r3, r2
			xTalkCompRate_kcps) + 500)/1000;
 8006456:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff2_mcps = (((peakSignalRate_kcps << 16) +
 800645a:	4a6b      	ldr	r2, [pc, #428]	; (8006608 <VL53L0X_calc_sigma_estimate+0x424>)
 800645c:	fba2 2303 	umull	r2, r3, r2, r3
 8006460:	099b      	lsrs	r3, r3, #6
 8006462:	637b      	str	r3, [r7, #52]	; 0x34

		/* Shift by 8 bits to increase resolution prior to the
		 * division */
		diff1_mcps <<= 8;
 8006464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006466:	021b      	lsls	r3, r3, #8
 8006468:	63bb      	str	r3, [r7, #56]	; 0x38

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 800646a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800646c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800646e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006472:	2b00      	cmp	r3, #0
 8006474:	bfb8      	it	lt
 8006476:	425b      	neglt	r3, r3
 8006478:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 800647a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800647c:	021b      	lsls	r3, r3, #8
 800647e:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint1616/uint32 = FixPoint1616 */
		pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 8006480:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006482:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006486:	fbb2 f3f3 	udiv	r3, r2, r3
 800648a:	62fb      	str	r3, [r7, #44]	; 0x2c
		/*
		 * FixPoint1616 * FixPoint1616 = FixPoint3232, however both
		 * values are small enough such that32 bits will not be
		 * exceeded.
		 */
		pwMult *= ((1 << 16) - xTalkCorrection);
 800648c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800648e:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 8006492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006494:	fb02 f303 	mul.w	r3, r2, r3
 8006498:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* (FixPoint3232 >> 16) = FixPoint1616 */
		pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 800649a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800649c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800649e:	4413      	add	r3, r2
 80064a0:	0c1b      	lsrs	r3, r3, #16
 80064a2:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
		pwMult += (1 << 16);
 80064a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064a6:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80064aa:	62fb      	str	r3, [r7, #44]	; 0x2c
		/*
		 * At this point the value will be 1.xx, therefore if we square
		 * the value this will exceed 32 bits. To address this perform
		 * a single shift to the right before the multiplication.
		 */
		pwMult >>= 1;
 80064ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064ae:	085b      	lsrs	r3, r3, #1
 80064b0:	62fb      	str	r3, [r7, #44]	; 0x2c
		/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
		pwMult = pwMult * pwMult;
 80064b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80064b6:	fb02 f303 	mul.w	r3, r2, r3
 80064ba:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* (FixPoint3430 >> 14) = Fix1616 */
		pwMult >>= 14;
 80064bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064be:	0b9b      	lsrs	r3, r3, #14
 80064c0:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 80064c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80064c6:	fb02 f303 	mul.w	r3, r2, r3
 80064ca:	62bb      	str	r3, [r7, #40]	; 0x28

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 80064cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ce:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80064d2:	0c1b      	lsrs	r3, r3, #16
 80064d4:	62bb      	str	r3, [r7, #40]	; 0x28

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 80064d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80064da:	fb02 f303 	mul.w	r3, r2, r3
 80064de:	62bb      	str	r3, [r7, #40]	; 0x28

		sqr2 = sigmaEstimateP2;
 80064e0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80064e4:	627b      	str	r3, [r7, #36]	; 0x24

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 80064e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064e8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80064ec:	0c1b      	lsrs	r3, r3, #16
 80064ee:	627b      	str	r3, [r7, #36]	; 0x24

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 80064f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064f4:	fb02 f303 	mul.w	r3, r2, r3
 80064f8:	627b      	str	r3, [r7, #36]	; 0x24

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 80064fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80064fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064fe:	4413      	add	r3, r2
 8006500:	623b      	str	r3, [r7, #32]

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 8006502:	6a38      	ldr	r0, [r7, #32]
 8006504:	f7fd fffb 	bl	80044fe <VL53L0X_isqrt>
 8006508:	61f8      	str	r0, [r7, #28]

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 800650a:	69fb      	ldr	r3, [r7, #28]
 800650c:	041b      	lsls	r3, r3, #16
 800650e:	61fb      	str	r3, [r7, #28]
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 8006510:	69fb      	ldr	r3, [r7, #28]
 8006512:	3332      	adds	r3, #50	; 0x32
 8006514:	4a3d      	ldr	r2, [pc, #244]	; (800660c <VL53L0X_calc_sigma_estimate+0x428>)
 8006516:	fba2 2303 	umull	r2, r3, r2, r3
 800651a:	095a      	lsrs	r2, r3, #5
 800651c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800651e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006522:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 8006526:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800652a:	f640 32b5 	movw	r2, #2997	; 0xbb5
 800652e:	fb02 f303 	mul.w	r3, r2, r3
 8006532:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 8006536:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800653a:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800653e:	3308      	adds	r3, #8
 8006540:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		sigmaEstRtn		 /= 10000;
 8006544:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006548:	4a31      	ldr	r2, [pc, #196]	; (8006610 <VL53L0X_calc_sigma_estimate+0x42c>)
 800654a:	fba2 2303 	umull	r2, r3, r2, r3
 800654e:	0b5b      	lsrs	r3, r3, #13
 8006550:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 8006554:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006558:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800655c:	429a      	cmp	r2, r3
 800655e:	d903      	bls.n	8006568 <VL53L0X_calc_sigma_estimate+0x384>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstRtn = cSigmaEstRtnMax;
 8006560:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006564:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		}

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 8006568:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800656c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006570:	fb02 f303 	mul.w	r3, r2, r3
 8006574:	62bb      	str	r3, [r7, #40]	; 0x28
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = cSigmaEstRef * cSigmaEstRef;
 8006576:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800657a:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800657e:	fb02 f303 	mul.w	r3, r2, r3
 8006582:	627b      	str	r3, [r7, #36]	; 0x24

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 8006584:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006588:	4413      	add	r3, r2
 800658a:	4618      	mov	r0, r3
 800658c:	f7fd ffb7 	bl	80044fe <VL53L0X_isqrt>
 8006590:	61b8      	str	r0, [r7, #24]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 8006592:	69bb      	ldr	r3, [r7, #24]
 8006594:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006598:	fb02 f303 	mul.w	r3, r2, r3
 800659c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 80065a0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d009      	beq.n	80065ba <VL53L0X_calc_sigma_estimate+0x3d6>
 80065a6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d005      	beq.n	80065ba <VL53L0X_calc_sigma_estimate+0x3d6>
 80065ae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80065b2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80065b6:	429a      	cmp	r2, r3
 80065b8:	d903      	bls.n	80065c2 <VL53L0X_calc_sigma_estimate+0x3de>
				(sigmaEstimate > cSigmaEstMax)) {
				sigmaEstimate = cSigmaEstMax;
 80065ba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80065be:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80065c8:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681a      	ldr	r2, [r3, #0]
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
		Status = VL53L0X_calc_dmax(
 80065d4:	6939      	ldr	r1, [r7, #16]
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	9303      	str	r3, [sp, #12]
 80065da:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80065de:	9302      	str	r3, [sp, #8]
 80065e0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80065e4:	9301      	str	r3, [sp, #4]
 80065e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80065e8:	9300      	str	r3, [sp, #0]
 80065ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065ec:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80065ee:	68f8      	ldr	r0, [r7, #12]
 80065f0:	f7ff fcd8 	bl	8005fa4 <VL53L0X_calc_dmax>
 80065f4:	4603      	mov	r3, r0
 80065f6:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
			peakVcselDuration_us,
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80065fa:	f997 30a3 	ldrsb.w	r3, [r7, #163]	; 0xa3
}
 80065fe:	4618      	mov	r0, r3
 8006600:	37b8      	adds	r7, #184	; 0xb8
 8006602:	46bd      	mov	sp, r7
 8006604:	bd80      	pop	{r7, pc}
 8006606:	bf00      	nop
 8006608:	10624dd3 	.word	0x10624dd3
 800660c:	51eb851f 	.word	0x51eb851f
 8006610:	d1b71759 	.word	0xd1b71759

08006614 <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b090      	sub	sp, #64	; 0x40
 8006618:	af00      	add	r7, sp, #0
 800661a:	60f8      	str	r0, [r7, #12]
 800661c:	607a      	str	r2, [r7, #4]
 800661e:	461a      	mov	r2, r3
 8006620:	460b      	mov	r3, r1
 8006622:	72fb      	strb	r3, [r7, #11]
 8006624:	4613      	mov	r3, r2
 8006626:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006628:	2300      	movs	r3, #0
 800662a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 800662e:	2300      	movs	r3, #0
 8006630:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t SignalRefClipflag = 0;
 8006634:	2300      	movs	r3, #0
 8006636:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 800663a:	2300      	movs	r3, #0
 800663c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 8006640:	2300      	movs	r3, #0
 8006642:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 8006646:	2300      	movs	r3, #0
 8006648:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 800664c:	2300      	movs	r3, #0
 800664e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 8006652:	2300      	movs	r3, #0
 8006654:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 8006658:	2300      	movs	r3, #0
 800665a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint16_t tmpWord = 0;
 800665e:	2300      	movs	r3, #0
 8006660:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 8006662:	2300      	movs	r3, #0
 8006664:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 8006666:	7afb      	ldrb	r3, [r7, #11]
 8006668:	10db      	asrs	r3, r3, #3
 800666a:	b2db      	uxtb	r3, r3
 800666c:	f003 030f 	and.w	r3, r3, #15
 8006670:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	if (DeviceRangeStatusInternal == 0 ||
 8006674:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8006678:	2b00      	cmp	r3, #0
 800667a:	d017      	beq.n	80066ac <VL53L0X_get_pal_range_status+0x98>
 800667c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8006680:	2b05      	cmp	r3, #5
 8006682:	d013      	beq.n	80066ac <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 5 ||
 8006684:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8006688:	2b07      	cmp	r3, #7
 800668a:	d00f      	beq.n	80066ac <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 7 ||
 800668c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8006690:	2b0c      	cmp	r3, #12
 8006692:	d00b      	beq.n	80066ac <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 12 ||
 8006694:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8006698:	2b0d      	cmp	r3, #13
 800669a:	d007      	beq.n	80066ac <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 13 ||
 800669c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80066a0:	2b0e      	cmp	r3, #14
 80066a2:	d003      	beq.n	80066ac <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 14 ||
 80066a4:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80066a8:	2b0f      	cmp	r3, #15
 80066aa:	d103      	bne.n	80066b4 <VL53L0X_get_pal_range_status+0xa0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 80066ac:	2301      	movs	r3, #1
 80066ae:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 80066b2:	e002      	b.n	80066ba <VL53L0X_get_pal_range_status+0xa6>
	} else {
		NoneFlag = 0;
 80066b4:	2300      	movs	r3, #0
 80066b6:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	}

	/* LastSignalRefMcps */
	if (Status == VL53L0X_ERROR_NONE)
 80066ba:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d107      	bne.n	80066d2 <VL53L0X_get_pal_range_status+0xbe>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80066c2:	2201      	movs	r2, #1
 80066c4:	21ff      	movs	r1, #255	; 0xff
 80066c6:	68f8      	ldr	r0, [r7, #12]
 80066c8:	f000 fb74 	bl	8006db4 <VL53L0X_WrByte>
 80066cc:	4603      	mov	r3, r0
 80066ce:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status == VL53L0X_ERROR_NONE)
 80066d2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d109      	bne.n	80066ee <VL53L0X_get_pal_range_status+0xda>
		Status = VL53L0X_RdWord(Dev,
 80066da:	f107 0316 	add.w	r3, r7, #22
 80066de:	461a      	mov	r2, r3
 80066e0:	21b6      	movs	r1, #182	; 0xb6
 80066e2:	68f8      	ldr	r0, [r7, #12]
 80066e4:	f000 faf2 	bl	8006ccc <VL53L0X_RdWord>
 80066e8:	4603      	mov	r3, r0
 80066ea:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			&tmpWord);

	LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 80066ee:	8afb      	ldrh	r3, [r7, #22]
 80066f0:	025b      	lsls	r3, r3, #9
 80066f2:	62fb      	str	r3, [r7, #44]	; 0x2c

	if (Status == VL53L0X_ERROR_NONE)
 80066f4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d107      	bne.n	800670c <VL53L0X_get_pal_range_status+0xf8>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80066fc:	2200      	movs	r2, #0
 80066fe:	21ff      	movs	r1, #255	; 0xff
 8006700:	68f8      	ldr	r0, [r7, #12]
 8006702:	f000 fb57 	bl	8006db4 <VL53L0X_WrByte>
 8006706:	4603      	mov	r3, r0
 8006708:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006710:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8006714:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8006718:	2b00      	cmp	r3, #0
 800671a:	d109      	bne.n	8006730 <VL53L0X_get_pal_range_status+0x11c>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800671c:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8006720:	461a      	mov	r2, r3
 8006722:	2100      	movs	r1, #0
 8006724:	68f8      	ldr	r0, [r7, #12]
 8006726:	f7fc fa25 	bl	8002b74 <VL53L0X_GetLimitCheckEnable>
 800672a:	4603      	mov	r3, r0
 800672c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 8006730:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006734:	2b00      	cmp	r3, #0
 8006736:	d02e      	beq.n	8006796 <VL53L0X_get_pal_range_status+0x182>
 8006738:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800673c:	2b00      	cmp	r3, #0
 800673e:	d12a      	bne.n	8006796 <VL53L0X_get_pal_range_status+0x182>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 8006740:	f107 0310 	add.w	r3, r7, #16
 8006744:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8006748:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800674a:	68f8      	ldr	r0, [r7, #12]
 800674c:	f7ff fd4a 	bl	80061e4 <VL53L0X_calc_sigma_estimate>
 8006750:	4603      	mov	r3, r0
 8006752:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 8006756:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800675a:	2b00      	cmp	r3, #0
 800675c:	d103      	bne.n	8006766 <VL53L0X_get_pal_range_status+0x152>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 800675e:	693b      	ldr	r3, [r7, #16]
 8006760:	b29a      	uxth	r2, r3
 8006762:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006764:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 8006766:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800676a:	2b00      	cmp	r3, #0
 800676c:	d113      	bne.n	8006796 <VL53L0X_get_pal_range_status+0x182>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 800676e:	f107 0320 	add.w	r3, r7, #32
 8006772:	461a      	mov	r2, r3
 8006774:	2100      	movs	r1, #0
 8006776:	68f8      	ldr	r0, [r7, #12]
 8006778:	f7fc fa82 	bl	8002c80 <VL53L0X_GetLimitCheckValue>
 800677c:	4603      	mov	r3, r0
 800677e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 8006782:	6a3b      	ldr	r3, [r7, #32]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d006      	beq.n	8006796 <VL53L0X_get_pal_range_status+0x182>
				(SigmaEstimate > SigmaLimitValue))
 8006788:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800678a:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 800678c:	429a      	cmp	r2, r3
 800678e:	d902      	bls.n	8006796 <VL53L0X_get_pal_range_status+0x182>
					/* Limit Fail */
					SigmaLimitflag = 1;
 8006790:	2301      	movs	r3, #1
 8006792:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8006796:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800679a:	2b00      	cmp	r3, #0
 800679c:	d109      	bne.n	80067b2 <VL53L0X_get_pal_range_status+0x19e>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800679e:	f107 0329 	add.w	r3, r7, #41	; 0x29
 80067a2:	461a      	mov	r2, r3
 80067a4:	2102      	movs	r1, #2
 80067a6:	68f8      	ldr	r0, [r7, #12]
 80067a8:	f7fc f9e4 	bl	8002b74 <VL53L0X_GetLimitCheckEnable>
 80067ac:	4603      	mov	r3, r0
 80067ae:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 80067b2:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d017      	beq.n	80067ea <VL53L0X_get_pal_range_status+0x1d6>
 80067ba:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d113      	bne.n	80067ea <VL53L0X_get_pal_range_status+0x1d6>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 80067c2:	f107 031c 	add.w	r3, r7, #28
 80067c6:	461a      	mov	r2, r3
 80067c8:	2102      	movs	r1, #2
 80067ca:	68f8      	ldr	r0, [r7, #12]
 80067cc:	f7fc fa58 	bl	8002c80 <VL53L0X_GetLimitCheckValue>
 80067d0:	4603      	mov	r3, r0
 80067d2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		if ((SignalRefClipValue > 0) &&
 80067d6:	69fb      	ldr	r3, [r7, #28]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d006      	beq.n	80067ea <VL53L0X_get_pal_range_status+0x1d6>
				(LastSignalRefMcps > SignalRefClipValue)) {
 80067dc:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 80067de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80067e0:	429a      	cmp	r2, r3
 80067e2:	d902      	bls.n	80067ea <VL53L0X_get_pal_range_status+0x1d6>
			/* Limit Fail */
			SignalRefClipflag = 1;
 80067e4:	2301      	movs	r3, #1
 80067e6:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 80067ea:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d109      	bne.n	8006806 <VL53L0X_get_pal_range_status+0x1f2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 80067f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80067f6:	461a      	mov	r2, r3
 80067f8:	2103      	movs	r1, #3
 80067fa:	68f8      	ldr	r0, [r7, #12]
 80067fc:	f7fc f9ba 	bl	8002b74 <VL53L0X_GetLimitCheckEnable>
 8006800:	4603      	mov	r3, r0
 8006802:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 8006806:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800680a:	2b00      	cmp	r3, #0
 800680c:	d023      	beq.n	8006856 <VL53L0X_get_pal_range_status+0x242>
 800680e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8006812:	2b00      	cmp	r3, #0
 8006814:	d11f      	bne.n	8006856 <VL53L0X_get_pal_range_status+0x242>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 8006816:	893b      	ldrh	r3, [r7, #8]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d102      	bne.n	8006822 <VL53L0X_get_pal_range_status+0x20e>
			SignalRatePerSpad = 0;
 800681c:	2300      	movs	r3, #0
 800681e:	637b      	str	r3, [r7, #52]	; 0x34
 8006820:	e005      	b.n	800682e <VL53L0X_get_pal_range_status+0x21a>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	021a      	lsls	r2, r3, #8
 8006826:	893b      	ldrh	r3, [r7, #8]
 8006828:	fbb2 f3f3 	udiv	r3, r2, r3
 800682c:	637b      	str	r3, [r7, #52]	; 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800682e:	f107 0318 	add.w	r3, r7, #24
 8006832:	461a      	mov	r2, r3
 8006834:	2103      	movs	r1, #3
 8006836:	68f8      	ldr	r0, [r7, #12]
 8006838:	f7fc fa22 	bl	8002c80 <VL53L0X_GetLimitCheckValue>
 800683c:	4603      	mov	r3, r0
 800683e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 8006842:	69bb      	ldr	r3, [r7, #24]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d006      	beq.n	8006856 <VL53L0X_get_pal_range_status+0x242>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 8006848:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 800684a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800684c:	429a      	cmp	r2, r3
 800684e:	d202      	bcs.n	8006856 <VL53L0X_get_pal_range_status+0x242>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 8006850:	2301      	movs	r3, #1
 8006852:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006856:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800685a:	2b00      	cmp	r3, #0
 800685c:	d14a      	bne.n	80068f4 <VL53L0X_get_pal_range_status+0x2e0>
		if (NoneFlag == 1) {
 800685e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8006862:	2b01      	cmp	r3, #1
 8006864:	d103      	bne.n	800686e <VL53L0X_get_pal_range_status+0x25a>
			*pPalRangeStatus = 255;	 /* NONE */
 8006866:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006868:	22ff      	movs	r2, #255	; 0xff
 800686a:	701a      	strb	r2, [r3, #0]
 800686c:	e042      	b.n	80068f4 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 1 ||
 800686e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8006872:	2b01      	cmp	r3, #1
 8006874:	d007      	beq.n	8006886 <VL53L0X_get_pal_range_status+0x272>
 8006876:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800687a:	2b02      	cmp	r3, #2
 800687c:	d003      	beq.n	8006886 <VL53L0X_get_pal_range_status+0x272>
					DeviceRangeStatusInternal == 2 ||
 800687e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8006882:	2b03      	cmp	r3, #3
 8006884:	d103      	bne.n	800688e <VL53L0X_get_pal_range_status+0x27a>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 8006886:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006888:	2205      	movs	r2, #5
 800688a:	701a      	strb	r2, [r3, #0]
 800688c:	e032      	b.n	80068f4 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 6 ||
 800688e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8006892:	2b06      	cmp	r3, #6
 8006894:	d003      	beq.n	800689e <VL53L0X_get_pal_range_status+0x28a>
 8006896:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800689a:	2b09      	cmp	r3, #9
 800689c:	d103      	bne.n	80068a6 <VL53L0X_get_pal_range_status+0x292>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 800689e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068a0:	2204      	movs	r2, #4
 80068a2:	701a      	strb	r2, [r3, #0]
 80068a4:	e026      	b.n	80068f4 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 8 ||
 80068a6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80068aa:	2b08      	cmp	r3, #8
 80068ac:	d007      	beq.n	80068be <VL53L0X_get_pal_range_status+0x2aa>
 80068ae:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80068b2:	2b0a      	cmp	r3, #10
 80068b4:	d003      	beq.n	80068be <VL53L0X_get_pal_range_status+0x2aa>
					DeviceRangeStatusInternal == 10 ||
 80068b6:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80068ba:	2b01      	cmp	r3, #1
 80068bc:	d103      	bne.n	80068c6 <VL53L0X_get_pal_range_status+0x2b2>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 80068be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068c0:	2203      	movs	r2, #3
 80068c2:	701a      	strb	r2, [r3, #0]
 80068c4:	e016      	b.n	80068f4 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 4 ||
 80068c6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80068ca:	2b04      	cmp	r3, #4
 80068cc:	d003      	beq.n	80068d6 <VL53L0X_get_pal_range_status+0x2c2>
 80068ce:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80068d2:	2b01      	cmp	r3, #1
 80068d4:	d103      	bne.n	80068de <VL53L0X_get_pal_range_status+0x2ca>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 80068d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068d8:	2202      	movs	r2, #2
 80068da:	701a      	strb	r2, [r3, #0]
 80068dc:	e00a      	b.n	80068f4 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (SigmaLimitflag == 1) {
 80068de:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80068e2:	2b01      	cmp	r3, #1
 80068e4:	d103      	bne.n	80068ee <VL53L0X_get_pal_range_status+0x2da>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 80068e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068e8:	2201      	movs	r2, #1
 80068ea:	701a      	strb	r2, [r3, #0]
 80068ec:	e002      	b.n	80068f4 <VL53L0X_get_pal_range_status+0x2e0>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 80068ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068f0:	2200      	movs	r2, #0
 80068f2:	701a      	strb	r2, [r3, #0]
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 80068f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068f6:	781b      	ldrb	r3, [r3, #0]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d102      	bne.n	8006902 <VL53L0X_get_pal_range_status+0x2ee>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 80068fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80068fe:	2200      	movs	r2, #0
 8006900:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8006902:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 8006906:	461a      	mov	r2, r3
 8006908:	2101      	movs	r1, #1
 800690a:	68f8      	ldr	r0, [r7, #12]
 800690c:	f7fc f932 	bl	8002b74 <VL53L0X_GetLimitCheckEnable>
 8006910:	4603      	mov	r3, r0
 8006912:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 8006916:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800691a:	2b00      	cmp	r3, #0
 800691c:	d14f      	bne.n	80069be <VL53L0X_get_pal_range_status+0x3aa>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 800691e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006922:	2b00      	cmp	r3, #0
 8006924:	d003      	beq.n	800692e <VL53L0X_get_pal_range_status+0x31a>
 8006926:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800692a:	2b01      	cmp	r3, #1
 800692c:	d103      	bne.n	8006936 <VL53L0X_get_pal_range_status+0x322>
			Temp8 = 1;
 800692e:	2301      	movs	r3, #1
 8006930:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006934:	e002      	b.n	800693c <VL53L0X_get_pal_range_status+0x328>
		else
			Temp8 = 0;
 8006936:	2300      	movs	r3, #0
 8006938:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8006942:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 8006946:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800694a:	2b04      	cmp	r3, #4
 800694c:	d003      	beq.n	8006956 <VL53L0X_get_pal_range_status+0x342>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 800694e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 8006952:	2b00      	cmp	r3, #0
 8006954:	d103      	bne.n	800695e <VL53L0X_get_pal_range_status+0x34a>
			Temp8 = 1;
 8006956:	2301      	movs	r3, #1
 8006958:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800695c:	e002      	b.n	8006964 <VL53L0X_get_pal_range_status+0x350>
		else
			Temp8 = 0;
 800695e:	2300      	movs	r3, #0
 8006960:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800696a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 800696e:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8006972:	2b00      	cmp	r3, #0
 8006974:	d003      	beq.n	800697e <VL53L0X_get_pal_range_status+0x36a>
 8006976:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800697a:	2b01      	cmp	r3, #1
 800697c:	d103      	bne.n	8006986 <VL53L0X_get_pal_range_status+0x372>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 800697e:	2301      	movs	r3, #1
 8006980:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006984:	e002      	b.n	800698c <VL53L0X_get_pal_range_status+0x378>
		else
			Temp8 = 0;
 8006986:	2300      	movs	r3, #0
 8006988:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8006992:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 8006996:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800699a:	2b00      	cmp	r3, #0
 800699c:	d003      	beq.n	80069a6 <VL53L0X_get_pal_range_status+0x392>
 800699e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80069a2:	2b01      	cmp	r3, #1
 80069a4:	d103      	bne.n	80069ae <VL53L0X_get_pal_range_status+0x39a>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 80069a6:	2301      	movs	r3, #1
 80069a8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80069ac:	e002      	b.n	80069b4 <VL53L0X_get_pal_range_status+0x3a0>
		else
			Temp8 = 0;
 80069ae:	2300      	movs	r3, #0
 80069b0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 80069ba:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80069be:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f

}
 80069c2:	4618      	mov	r0, r3
 80069c4:	3740      	adds	r7, #64	; 0x40
 80069c6:	46bd      	mov	sp, r7
 80069c8:	bd80      	pop	{r7, pc}

080069ca <VL53L0X_check_part_used>:


VL53L0X_Error VL53L0X_check_part_used(VL53L0X_DEV Dev,
		uint8_t *Revision,
		VL53L0X_DeviceInfo_t *pVL53L0X_DeviceInfo)
{
 80069ca:	b580      	push	{r7, lr}
 80069cc:	b086      	sub	sp, #24
 80069ce:	af00      	add	r7, sp, #0
 80069d0:	60f8      	str	r0, [r7, #12]
 80069d2:	60b9      	str	r1, [r7, #8]
 80069d4:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80069d6:	2300      	movs	r3, #0
 80069d8:	75fb      	strb	r3, [r7, #23]
	uint8_t ModuleIdInt;
	char *ProductId_tmp;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 2);
 80069da:	2102      	movs	r1, #2
 80069dc:	68f8      	ldr	r0, [r7, #12]
 80069de:	f7fd fe03 	bl	80045e8 <VL53L0X_get_info_from_device>
 80069e2:	4603      	mov	r3, r0
 80069e4:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE) {
 80069e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d11c      	bne.n	8006a28 <VL53L0X_check_part_used+0x5e>
		ModuleIdInt = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev, ModuleId);
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	f893 30f1 	ldrb.w	r3, [r3, #241]	; 0xf1
 80069f4:	75bb      	strb	r3, [r7, #22]

	if (ModuleIdInt == 0) {
 80069f6:	7dbb      	ldrb	r3, [r7, #22]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d107      	bne.n	8006a0c <VL53L0X_check_part_used+0x42>
		*Revision = 0;
 80069fc:	68bb      	ldr	r3, [r7, #8]
 80069fe:	2200      	movs	r2, #0
 8006a00:	701a      	strb	r2, [r3, #0]
		VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->ProductId, "");
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	3340      	adds	r3, #64	; 0x40
 8006a06:	2200      	movs	r2, #0
 8006a08:	701a      	strb	r2, [r3, #0]
 8006a0a:	e00d      	b.n	8006a28 <VL53L0X_check_part_used+0x5e>
	} else {
		*Revision = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev, Revision);
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	f893 20f2 	ldrb.w	r2, [r3, #242]	; 0xf2
 8006a12:	68bb      	ldr	r3, [r7, #8]
 8006a14:	701a      	strb	r2, [r3, #0]
		ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	33f3      	adds	r3, #243	; 0xf3
 8006a1a:	613b      	str	r3, [r7, #16]
			ProductId);
		VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->ProductId, ProductId_tmp);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	3340      	adds	r3, #64	; 0x40
 8006a20:	6939      	ldr	r1, [r7, #16]
 8006a22:	4618      	mov	r0, r3
 8006a24:	f003 fe7c 	bl	800a720 <strcpy>
	}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006a28:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	3718      	adds	r7, #24
 8006a30:	46bd      	mov	sp, r7
 8006a32:	bd80      	pop	{r7, pc}

08006a34 <VL53L0X_get_device_info>:


VL53L0X_Error VL53L0X_get_device_info(VL53L0X_DEV Dev,
				VL53L0X_DeviceInfo_t *pVL53L0X_DeviceInfo)
{
 8006a34:	b5b0      	push	{r4, r5, r7, lr}
 8006a36:	b084      	sub	sp, #16
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
 8006a3c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006a3e:	2300      	movs	r3, #0
 8006a40:	73fb      	strb	r3, [r7, #15]
	uint8_t revision_id;
	uint8_t Revision;

	Status = VL53L0X_check_part_used(Dev, &Revision, pVL53L0X_DeviceInfo);
 8006a42:	f107 030d 	add.w	r3, r7, #13
 8006a46:	683a      	ldr	r2, [r7, #0]
 8006a48:	4619      	mov	r1, r3
 8006a4a:	6878      	ldr	r0, [r7, #4]
 8006a4c:	f7ff ffbd 	bl	80069ca <VL53L0X_check_part_used>
 8006a50:	4603      	mov	r3, r0
 8006a52:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE) {
 8006a54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d13b      	bne.n	8006ad4 <VL53L0X_get_device_info+0xa0>
		if (Revision == 0) {
 8006a5c:	7b7b      	ldrb	r3, [r7, #13]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d108      	bne.n	8006a74 <VL53L0X_get_device_info+0x40>
			VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	4a30      	ldr	r2, [pc, #192]	; (8006b28 <VL53L0X_get_device_info+0xf4>)
 8006a66:	461c      	mov	r4, r3
 8006a68:	4613      	mov	r3, r2
 8006a6a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006a6c:	6020      	str	r0, [r4, #0]
 8006a6e:	6061      	str	r1, [r4, #4]
 8006a70:	60a2      	str	r2, [r4, #8]
 8006a72:	e027      	b.n	8006ac4 <VL53L0X_get_device_info+0x90>
					VL53L0X_STRING_DEVICE_INFO_NAME_TS0);
		} else if ((Revision <= 34) && (Revision != 32)) {
 8006a74:	7b7b      	ldrb	r3, [r7, #13]
 8006a76:	2b22      	cmp	r3, #34	; 0x22
 8006a78:	d80b      	bhi.n	8006a92 <VL53L0X_get_device_info+0x5e>
 8006a7a:	7b7b      	ldrb	r3, [r7, #13]
 8006a7c:	2b20      	cmp	r3, #32
 8006a7e:	d008      	beq.n	8006a92 <VL53L0X_get_device_info+0x5e>
			VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	4a2a      	ldr	r2, [pc, #168]	; (8006b2c <VL53L0X_get_device_info+0xf8>)
 8006a84:	461c      	mov	r4, r3
 8006a86:	4613      	mov	r3, r2
 8006a88:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006a8a:	6020      	str	r0, [r4, #0]
 8006a8c:	6061      	str	r1, [r4, #4]
 8006a8e:	60a2      	str	r2, [r4, #8]
 8006a90:	e018      	b.n	8006ac4 <VL53L0X_get_device_info+0x90>
					VL53L0X_STRING_DEVICE_INFO_NAME_TS1);
		} else if (Revision < 39) {
 8006a92:	7b7b      	ldrb	r3, [r7, #13]
 8006a94:	2b26      	cmp	r3, #38	; 0x26
 8006a96:	d808      	bhi.n	8006aaa <VL53L0X_get_device_info+0x76>
			VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	4a25      	ldr	r2, [pc, #148]	; (8006b30 <VL53L0X_get_device_info+0xfc>)
 8006a9c:	461c      	mov	r4, r3
 8006a9e:	4613      	mov	r3, r2
 8006aa0:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006aa2:	6020      	str	r0, [r4, #0]
 8006aa4:	6061      	str	r1, [r4, #4]
 8006aa6:	60a2      	str	r2, [r4, #8]
 8006aa8:	e00c      	b.n	8006ac4 <VL53L0X_get_device_info+0x90>
					VL53L0X_STRING_DEVICE_INFO_NAME_TS2);
		} else {
			VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	4a21      	ldr	r2, [pc, #132]	; (8006b34 <VL53L0X_get_device_info+0x100>)
 8006aae:	461d      	mov	r5, r3
 8006ab0:	4614      	mov	r4, r2
 8006ab2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006ab4:	6028      	str	r0, [r5, #0]
 8006ab6:	6069      	str	r1, [r5, #4]
 8006ab8:	60aa      	str	r2, [r5, #8]
 8006aba:	60eb      	str	r3, [r5, #12]
 8006abc:	6820      	ldr	r0, [r4, #0]
 8006abe:	6128      	str	r0, [r5, #16]
 8006ac0:	7923      	ldrb	r3, [r4, #4]
 8006ac2:	752b      	strb	r3, [r5, #20]
					VL53L0X_STRING_DEVICE_INFO_NAME_ES1);
		}

		VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Type,
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	3320      	adds	r3, #32
 8006ac8:	491b      	ldr	r1, [pc, #108]	; (8006b38 <VL53L0X_get_device_info+0x104>)
 8006aca:	461a      	mov	r2, r3
 8006acc:	460b      	mov	r3, r1
 8006ace:	cb03      	ldmia	r3!, {r0, r1}
 8006ad0:	6010      	str	r0, [r2, #0]
 8006ad2:	6051      	str	r1, [r2, #4]
				VL53L0X_STRING_DEVICE_INFO_TYPE);

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006ad4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d108      	bne.n	8006aee <VL53L0X_get_device_info+0xba>
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_IDENTIFICATION_MODEL_ID,
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	3360      	adds	r3, #96	; 0x60
 8006ae0:	461a      	mov	r2, r3
 8006ae2:	21c0      	movs	r1, #192	; 0xc0
 8006ae4:	6878      	ldr	r0, [r7, #4]
 8006ae6:	f000 f86a 	bl	8006bbe <VL53L0X_RdByte>
 8006aea:	4603      	mov	r3, r0
 8006aec:	73fb      	strb	r3, [r7, #15]
				&pVL53L0X_DeviceInfo->ProductType);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006aee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d112      	bne.n	8006b1c <VL53L0X_get_device_info+0xe8>
		Status = VL53L0X_RdByte(Dev,
 8006af6:	f107 030e 	add.w	r3, r7, #14
 8006afa:	461a      	mov	r2, r3
 8006afc:	21c2      	movs	r1, #194	; 0xc2
 8006afe:	6878      	ldr	r0, [r7, #4]
 8006b00:	f000 f85d 	bl	8006bbe <VL53L0X_RdByte>
 8006b04:	4603      	mov	r3, r0
 8006b06:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_IDENTIFICATION_REVISION_ID,
				&revision_id);
		pVL53L0X_DeviceInfo->ProductRevisionMajor = 1;
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	2201      	movs	r2, #1
 8006b0c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
		pVL53L0X_DeviceInfo->ProductRevisionMinor =
					(revision_id & 0xF0) >> 4;
 8006b10:	7bbb      	ldrb	r3, [r7, #14]
 8006b12:	091b      	lsrs	r3, r3, #4
 8006b14:	b2da      	uxtb	r2, r3
		pVL53L0X_DeviceInfo->ProductRevisionMinor =
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
	}

	return Status;
 8006b1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006b20:	4618      	mov	r0, r3
 8006b22:	3710      	adds	r7, #16
 8006b24:	46bd      	mov	sp, r7
 8006b26:	bdb0      	pop	{r4, r5, r7, pc}
 8006b28:	0800b7c8 	.word	0x0800b7c8
 8006b2c:	0800b7d4 	.word	0x0800b7d4
 8006b30:	0800b7e0 	.word	0x0800b7e0
 8006b34:	0800b7ec 	.word	0x0800b7ec
 8006b38:	0800b804 	.word	0x0800b804

08006b3c <_I2CWrite>:
/* Private macro -------------------------------------------------------------*/
/* Private variables ---------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Exported functions --------------------------------------------------------*/
    
int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b088      	sub	sp, #32
 8006b40:	af02      	add	r7, sp, #8
 8006b42:	60f8      	str	r0, [r7, #12]
 8006b44:	60b9      	str	r1, [r7, #8]
 8006b46:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	330a      	adds	r3, #10
 8006b4c:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 8006b5a:	b299      	uxth	r1, r3
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	b29a      	uxth	r2, r3
 8006b60:	697b      	ldr	r3, [r7, #20]
 8006b62:	9300      	str	r3, [sp, #0]
 8006b64:	4613      	mov	r3, r2
 8006b66:	68ba      	ldr	r2, [r7, #8]
 8006b68:	f000 fe2c 	bl	80077c4 <HAL_I2C_Master_Transmit>
 8006b6c:	4603      	mov	r3, r0
 8006b6e:	613b      	str	r3, [r7, #16]
    
    return status;
 8006b70:	693b      	ldr	r3, [r7, #16]
}
 8006b72:	4618      	mov	r0, r3
 8006b74:	3718      	adds	r7, #24
 8006b76:	46bd      	mov	sp, r7
 8006b78:	bd80      	pop	{r7, pc}

08006b7a <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 8006b7a:	b580      	push	{r7, lr}
 8006b7c:	b088      	sub	sp, #32
 8006b7e:	af02      	add	r7, sp, #8
 8006b80:	60f8      	str	r0, [r7, #12]
 8006b82:	60b9      	str	r1, [r7, #8]
 8006b84:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	330a      	adds	r3, #10
 8006b8a:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 8006b98:	f043 0301 	orr.w	r3, r3, #1
 8006b9c:	b2db      	uxtb	r3, r3
 8006b9e:	b299      	uxth	r1, r3
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	b29a      	uxth	r2, r3
 8006ba4:	697b      	ldr	r3, [r7, #20]
 8006ba6:	9300      	str	r3, [sp, #0]
 8006ba8:	4613      	mov	r3, r2
 8006baa:	68ba      	ldr	r2, [r7, #8]
 8006bac:	f000 fefe 	bl	80079ac <HAL_I2C_Master_Receive>
 8006bb0:	4603      	mov	r3, r0
 8006bb2:	613b      	str	r3, [r7, #16]
    
    return status;
 8006bb4:	693b      	ldr	r3, [r7, #16]
}
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	3718      	adds	r7, #24
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	bd80      	pop	{r7, pc}

08006bbe <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 8006bbe:	b580      	push	{r7, lr}
 8006bc0:	b086      	sub	sp, #24
 8006bc2:	af00      	add	r7, sp, #0
 8006bc4:	60f8      	str	r0, [r7, #12]
 8006bc6:	460b      	mov	r3, r1
 8006bc8:	607a      	str	r2, [r7, #4]
 8006bca:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006bcc:	2300      	movs	r3, #0
 8006bce:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    status_int = _I2CWrite(Dev, &index, 1);
 8006bd0:	f107 030b 	add.w	r3, r7, #11
 8006bd4:	2201      	movs	r2, #1
 8006bd6:	4619      	mov	r1, r3
 8006bd8:	68f8      	ldr	r0, [r7, #12]
 8006bda:	f7ff ffaf 	bl	8006b3c <_I2CWrite>
 8006bde:	6138      	str	r0, [r7, #16]
    
    if( status_int ){
 8006be0:	693b      	ldr	r3, [r7, #16]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d002      	beq.n	8006bec <VL53L0X_RdByte+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8006be6:	23ec      	movs	r3, #236	; 0xec
 8006be8:	75fb      	strb	r3, [r7, #23]
        goto done;
 8006bea:	e00c      	b.n	8006c06 <VL53L0X_RdByte+0x48>
    }
    
    status_int = _I2CRead(Dev, data, 1);
 8006bec:	2201      	movs	r2, #1
 8006bee:	6879      	ldr	r1, [r7, #4]
 8006bf0:	68f8      	ldr	r0, [r7, #12]
 8006bf2:	f7ff ffc2 	bl	8006b7a <_I2CRead>
 8006bf6:	6138      	str	r0, [r7, #16]
    
    if (status_int != 0) {
 8006bf8:	693b      	ldr	r3, [r7, #16]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d002      	beq.n	8006c04 <VL53L0X_RdByte+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8006bfe:	23ec      	movs	r3, #236	; 0xec
 8006c00:	75fb      	strb	r3, [r7, #23]
 8006c02:	e000      	b.n	8006c06 <VL53L0X_RdByte+0x48>
    }
done:
 8006c04:	bf00      	nop
    return Status;
 8006c06:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	3718      	adds	r7, #24
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	bd80      	pop	{r7, pc}
	...

08006c14 <VL53L0X_WriteMulti>:

uint8_t _I2CBuffer[64];


// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b086      	sub	sp, #24
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	60f8      	str	r0, [r7, #12]
 8006c1c:	607a      	str	r2, [r7, #4]
 8006c1e:	603b      	str	r3, [r7, #0]
 8006c20:	460b      	mov	r3, r1
 8006c22:	72fb      	strb	r3, [r7, #11]
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006c24:	2300      	movs	r3, #0
 8006c26:	75fb      	strb	r3, [r7, #23]
    
    if (count > sizeof(_I2CBuffer) - 1) {
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	2b3f      	cmp	r3, #63	; 0x3f
 8006c2c:	d902      	bls.n	8006c34 <VL53L0X_WriteMulti+0x20>
        return VL53L0X_ERROR_INVALID_PARAMS;
 8006c2e:	f06f 0303 	mvn.w	r3, #3
 8006c32:	e016      	b.n	8006c62 <VL53L0X_WriteMulti+0x4e>
    }
    
    _I2CBuffer[0] = index;
 8006c34:	4a0d      	ldr	r2, [pc, #52]	; (8006c6c <VL53L0X_WriteMulti+0x58>)
 8006c36:	7afb      	ldrb	r3, [r7, #11]
 8006c38:	7013      	strb	r3, [r2, #0]
    memcpy(&_I2CBuffer[1], pdata, count);
 8006c3a:	683a      	ldr	r2, [r7, #0]
 8006c3c:	6879      	ldr	r1, [r7, #4]
 8006c3e:	480c      	ldr	r0, [pc, #48]	; (8006c70 <VL53L0X_WriteMulti+0x5c>)
 8006c40:	f003 fcc2 	bl	800a5c8 <memcpy>
    
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	3301      	adds	r3, #1
 8006c48:	461a      	mov	r2, r3
 8006c4a:	4908      	ldr	r1, [pc, #32]	; (8006c6c <VL53L0X_WriteMulti+0x58>)
 8006c4c:	68f8      	ldr	r0, [r7, #12]
 8006c4e:	f7ff ff75 	bl	8006b3c <_I2CWrite>
 8006c52:	6138      	str	r0, [r7, #16]
    
    if (status_int != 0) {
 8006c54:	693b      	ldr	r3, [r7, #16]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d001      	beq.n	8006c5e <VL53L0X_WriteMulti+0x4a>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8006c5a:	23ec      	movs	r3, #236	; 0xec
 8006c5c:	75fb      	strb	r3, [r7, #23]
    }
    
    return Status;
 8006c5e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006c62:	4618      	mov	r0, r3
 8006c64:	3718      	adds	r7, #24
 8006c66:	46bd      	mov	sp, r7
 8006c68:	bd80      	pop	{r7, pc}
 8006c6a:	bf00      	nop
 8006c6c:	20000700 	.word	0x20000700
 8006c70:	20000701 	.word	0x20000701

08006c74 <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b086      	sub	sp, #24
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	60f8      	str	r0, [r7, #12]
 8006c7c:	607a      	str	r2, [r7, #4]
 8006c7e:	603b      	str	r3, [r7, #0]
 8006c80:	460b      	mov	r3, r1
 8006c82:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006c84:	2300      	movs	r3, #0
 8006c86:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    
    status_int = _I2CWrite(Dev, &index, 1);
 8006c88:	f107 030b 	add.w	r3, r7, #11
 8006c8c:	2201      	movs	r2, #1
 8006c8e:	4619      	mov	r1, r3
 8006c90:	68f8      	ldr	r0, [r7, #12]
 8006c92:	f7ff ff53 	bl	8006b3c <_I2CWrite>
 8006c96:	6138      	str	r0, [r7, #16]
    
    if (status_int != 0) {
 8006c98:	693b      	ldr	r3, [r7, #16]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d002      	beq.n	8006ca4 <VL53L0X_ReadMulti+0x30>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8006c9e:	23ec      	movs	r3, #236	; 0xec
 8006ca0:	75fb      	strb	r3, [r7, #23]
        goto done;
 8006ca2:	e00c      	b.n	8006cbe <VL53L0X_ReadMulti+0x4a>
    }
    
    status_int = _I2CRead(Dev, pdata, count);
 8006ca4:	683a      	ldr	r2, [r7, #0]
 8006ca6:	6879      	ldr	r1, [r7, #4]
 8006ca8:	68f8      	ldr	r0, [r7, #12]
 8006caa:	f7ff ff66 	bl	8006b7a <_I2CRead>
 8006cae:	6138      	str	r0, [r7, #16]
    
    if (status_int != 0) {
 8006cb0:	693b      	ldr	r3, [r7, #16]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d002      	beq.n	8006cbc <VL53L0X_ReadMulti+0x48>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8006cb6:	23ec      	movs	r3, #236	; 0xec
 8006cb8:	75fb      	strb	r3, [r7, #23]
 8006cba:	e000      	b.n	8006cbe <VL53L0X_ReadMulti+0x4a>
    }
done:
 8006cbc:	bf00      	nop
    return Status;
 8006cbe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	3718      	adds	r7, #24
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	bd80      	pop	{r7, pc}
	...

08006ccc <VL53L0X_RdWord>:


VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b086      	sub	sp, #24
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	60f8      	str	r0, [r7, #12]
 8006cd4:	460b      	mov	r3, r1
 8006cd6:	607a      	str	r2, [r7, #4]
 8006cd8:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006cda:	2300      	movs	r3, #0
 8006cdc:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    status_int = _I2CWrite(Dev, &index, 1);
 8006cde:	f107 030b 	add.w	r3, r7, #11
 8006ce2:	2201      	movs	r2, #1
 8006ce4:	4619      	mov	r1, r3
 8006ce6:	68f8      	ldr	r0, [r7, #12]
 8006ce8:	f7ff ff28 	bl	8006b3c <_I2CWrite>
 8006cec:	6138      	str	r0, [r7, #16]

    if( status_int ){
 8006cee:	693b      	ldr	r3, [r7, #16]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d002      	beq.n	8006cfa <VL53L0X_RdWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8006cf4:	23ec      	movs	r3, #236	; 0xec
 8006cf6:	75fb      	strb	r3, [r7, #23]
        goto done;
 8006cf8:	e017      	b.n	8006d2a <VL53L0X_RdWord+0x5e>
    }
    
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 8006cfa:	2202      	movs	r2, #2
 8006cfc:	490e      	ldr	r1, [pc, #56]	; (8006d38 <VL53L0X_RdWord+0x6c>)
 8006cfe:	68f8      	ldr	r0, [r7, #12]
 8006d00:	f7ff ff3b 	bl	8006b7a <_I2CRead>
 8006d04:	6138      	str	r0, [r7, #16]
    
    if (status_int != 0) {
 8006d06:	693b      	ldr	r3, [r7, #16]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d002      	beq.n	8006d12 <VL53L0X_RdWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8006d0c:	23ec      	movs	r3, #236	; 0xec
 8006d0e:	75fb      	strb	r3, [r7, #23]
        goto done;
 8006d10:	e00b      	b.n	8006d2a <VL53L0X_RdWord+0x5e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 8006d12:	4b09      	ldr	r3, [pc, #36]	; (8006d38 <VL53L0X_RdWord+0x6c>)
 8006d14:	781b      	ldrb	r3, [r3, #0]
 8006d16:	b29b      	uxth	r3, r3
 8006d18:	021b      	lsls	r3, r3, #8
 8006d1a:	b29a      	uxth	r2, r3
 8006d1c:	4b06      	ldr	r3, [pc, #24]	; (8006d38 <VL53L0X_RdWord+0x6c>)
 8006d1e:	785b      	ldrb	r3, [r3, #1]
 8006d20:	b29b      	uxth	r3, r3
 8006d22:	4413      	add	r3, r2
 8006d24:	b29a      	uxth	r2, r3
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	801a      	strh	r2, [r3, #0]
done:
    return Status;
 8006d2a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006d2e:	4618      	mov	r0, r3
 8006d30:	3718      	adds	r7, #24
 8006d32:	46bd      	mov	sp, r7
 8006d34:	bd80      	pop	{r7, pc}
 8006d36:	bf00      	nop
 8006d38:	20000700 	.word	0x20000700

08006d3c <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b086      	sub	sp, #24
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	60f8      	str	r0, [r7, #12]
 8006d44:	460b      	mov	r3, r1
 8006d46:	607a      	str	r2, [r7, #4]
 8006d48:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    status_int = _I2CWrite(Dev, &index, 1);
 8006d4e:	f107 030b 	add.w	r3, r7, #11
 8006d52:	2201      	movs	r2, #1
 8006d54:	4619      	mov	r1, r3
 8006d56:	68f8      	ldr	r0, [r7, #12]
 8006d58:	f7ff fef0 	bl	8006b3c <_I2CWrite>
 8006d5c:	6138      	str	r0, [r7, #16]
    
    if (status_int != 0) {
 8006d5e:	693b      	ldr	r3, [r7, #16]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d002      	beq.n	8006d6a <VL53L0X_RdDWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8006d64:	23ec      	movs	r3, #236	; 0xec
 8006d66:	75fb      	strb	r3, [r7, #23]
        goto done;
 8006d68:	e01b      	b.n	8006da2 <VL53L0X_RdDWord+0x66>
    }
    
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 8006d6a:	2204      	movs	r2, #4
 8006d6c:	4910      	ldr	r1, [pc, #64]	; (8006db0 <VL53L0X_RdDWord+0x74>)
 8006d6e:	68f8      	ldr	r0, [r7, #12]
 8006d70:	f7ff ff03 	bl	8006b7a <_I2CRead>
 8006d74:	6138      	str	r0, [r7, #16]
    
    if (status_int != 0) {
 8006d76:	693b      	ldr	r3, [r7, #16]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d002      	beq.n	8006d82 <VL53L0X_RdDWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8006d7c:	23ec      	movs	r3, #236	; 0xec
 8006d7e:	75fb      	strb	r3, [r7, #23]
        goto done;
 8006d80:	e00f      	b.n	8006da2 <VL53L0X_RdDWord+0x66>
    }

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 8006d82:	4b0b      	ldr	r3, [pc, #44]	; (8006db0 <VL53L0X_RdDWord+0x74>)
 8006d84:	781b      	ldrb	r3, [r3, #0]
 8006d86:	061a      	lsls	r2, r3, #24
 8006d88:	4b09      	ldr	r3, [pc, #36]	; (8006db0 <VL53L0X_RdDWord+0x74>)
 8006d8a:	785b      	ldrb	r3, [r3, #1]
 8006d8c:	041b      	lsls	r3, r3, #16
 8006d8e:	441a      	add	r2, r3
 8006d90:	4b07      	ldr	r3, [pc, #28]	; (8006db0 <VL53L0X_RdDWord+0x74>)
 8006d92:	789b      	ldrb	r3, [r3, #2]
 8006d94:	021b      	lsls	r3, r3, #8
 8006d96:	4413      	add	r3, r2
 8006d98:	4a05      	ldr	r2, [pc, #20]	; (8006db0 <VL53L0X_RdDWord+0x74>)
 8006d9a:	78d2      	ldrb	r2, [r2, #3]
 8006d9c:	441a      	add	r2, r3
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	601a      	str	r2, [r3, #0]

done:
    return Status;
 8006da2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006da6:	4618      	mov	r0, r3
 8006da8:	3718      	adds	r7, #24
 8006daa:	46bd      	mov	sp, r7
 8006dac:	bd80      	pop	{r7, pc}
 8006dae:	bf00      	nop
 8006db0:	20000700 	.word	0x20000700

08006db4 <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b084      	sub	sp, #16
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
 8006dbc:	460b      	mov	r3, r1
 8006dbe:	70fb      	strb	r3, [r7, #3]
 8006dc0:	4613      	mov	r3, r2
 8006dc2:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 8006dc8:	4a0b      	ldr	r2, [pc, #44]	; (8006df8 <VL53L0X_WrByte+0x44>)
 8006dca:	78fb      	ldrb	r3, [r7, #3]
 8006dcc:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data;
 8006dce:	4a0a      	ldr	r2, [pc, #40]	; (8006df8 <VL53L0X_WrByte+0x44>)
 8006dd0:	78bb      	ldrb	r3, [r7, #2]
 8006dd2:	7053      	strb	r3, [r2, #1]

    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8006dd4:	2202      	movs	r2, #2
 8006dd6:	4908      	ldr	r1, [pc, #32]	; (8006df8 <VL53L0X_WrByte+0x44>)
 8006dd8:	6878      	ldr	r0, [r7, #4]
 8006dda:	f7ff feaf 	bl	8006b3c <_I2CWrite>
 8006dde:	60b8      	str	r0, [r7, #8]
    
    if (status_int != 0) {
 8006de0:	68bb      	ldr	r3, [r7, #8]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d001      	beq.n	8006dea <VL53L0X_WrByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8006de6:	23ec      	movs	r3, #236	; 0xec
 8006de8:	73fb      	strb	r3, [r7, #15]
    }
    
    return Status;
 8006dea:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006dee:	4618      	mov	r0, r3
 8006df0:	3710      	adds	r7, #16
 8006df2:	46bd      	mov	sp, r7
 8006df4:	bd80      	pop	{r7, pc}
 8006df6:	bf00      	nop
 8006df8:	20000700 	.word	0x20000700

08006dfc <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b084      	sub	sp, #16
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
 8006e04:	460b      	mov	r3, r1
 8006e06:	70fb      	strb	r3, [r7, #3]
 8006e08:	4613      	mov	r3, r2
 8006e0a:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 8006e10:	4a0e      	ldr	r2, [pc, #56]	; (8006e4c <VL53L0X_WrWord+0x50>)
 8006e12:	78fb      	ldrb	r3, [r7, #3]
 8006e14:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data >> 8;
 8006e16:	883b      	ldrh	r3, [r7, #0]
 8006e18:	0a1b      	lsrs	r3, r3, #8
 8006e1a:	b29b      	uxth	r3, r3
 8006e1c:	b2da      	uxtb	r2, r3
 8006e1e:	4b0b      	ldr	r3, [pc, #44]	; (8006e4c <VL53L0X_WrWord+0x50>)
 8006e20:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 8006e22:	883b      	ldrh	r3, [r7, #0]
 8006e24:	b2da      	uxtb	r2, r3
 8006e26:	4b09      	ldr	r3, [pc, #36]	; (8006e4c <VL53L0X_WrWord+0x50>)
 8006e28:	709a      	strb	r2, [r3, #2]

    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 8006e2a:	2203      	movs	r2, #3
 8006e2c:	4907      	ldr	r1, [pc, #28]	; (8006e4c <VL53L0X_WrWord+0x50>)
 8006e2e:	6878      	ldr	r0, [r7, #4]
 8006e30:	f7ff fe84 	bl	8006b3c <_I2CWrite>
 8006e34:	60b8      	str	r0, [r7, #8]
    
    if (status_int != 0) {
 8006e36:	68bb      	ldr	r3, [r7, #8]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d001      	beq.n	8006e40 <VL53L0X_WrWord+0x44>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8006e3c:	23ec      	movs	r3, #236	; 0xec
 8006e3e:	73fb      	strb	r3, [r7, #15]
    }
    
    return Status;
 8006e40:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006e44:	4618      	mov	r0, r3
 8006e46:	3710      	adds	r7, #16
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	bd80      	pop	{r7, pc}
 8006e4c:	20000700 	.word	0x20000700

08006e50 <VL53L0X_UpdateByte>:

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b084      	sub	sp, #16
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
 8006e58:	4608      	mov	r0, r1
 8006e5a:	4611      	mov	r1, r2
 8006e5c:	461a      	mov	r2, r3
 8006e5e:	4603      	mov	r3, r0
 8006e60:	70fb      	strb	r3, [r7, #3]
 8006e62:	460b      	mov	r3, r1
 8006e64:	70bb      	strb	r3, [r7, #2]
 8006e66:	4613      	mov	r3, r2
 8006e68:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	73fb      	strb	r3, [r7, #15]
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 8006e6e:	f107 020e 	add.w	r2, r7, #14
 8006e72:	78fb      	ldrb	r3, [r7, #3]
 8006e74:	4619      	mov	r1, r3
 8006e76:	6878      	ldr	r0, [r7, #4]
 8006e78:	f7ff fea1 	bl	8006bbe <VL53L0X_RdByte>
 8006e7c:	4603      	mov	r3, r0
 8006e7e:	73fb      	strb	r3, [r7, #15]
    
    if (Status) {
 8006e80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d110      	bne.n	8006eaa <VL53L0X_UpdateByte+0x5a>
        goto done;
    }
    
    data = (data & AndData) | OrData;
 8006e88:	7bba      	ldrb	r2, [r7, #14]
 8006e8a:	78bb      	ldrb	r3, [r7, #2]
 8006e8c:	4013      	ands	r3, r2
 8006e8e:	b2da      	uxtb	r2, r3
 8006e90:	787b      	ldrb	r3, [r7, #1]
 8006e92:	4313      	orrs	r3, r2
 8006e94:	b2db      	uxtb	r3, r3
 8006e96:	73bb      	strb	r3, [r7, #14]
    Status = VL53L0X_WrByte(Dev, index, data);
 8006e98:	7bba      	ldrb	r2, [r7, #14]
 8006e9a:	78fb      	ldrb	r3, [r7, #3]
 8006e9c:	4619      	mov	r1, r3
 8006e9e:	6878      	ldr	r0, [r7, #4]
 8006ea0:	f7ff ff88 	bl	8006db4 <VL53L0X_WrByte>
 8006ea4:	4603      	mov	r3, r0
 8006ea6:	73fb      	strb	r3, [r7, #15]
 8006ea8:	e000      	b.n	8006eac <VL53L0X_UpdateByte+0x5c>
        goto done;
 8006eaa:	bf00      	nop
done:
    return Status;
 8006eac:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	3710      	adds	r7, #16
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	bd80      	pop	{r7, pc}

08006eb8 <VL53L0X_PollingDelay>:
    }

    return Status;
}

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b084      	sub	sp, #16
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	73fb      	strb	r3, [r7, #15]

    // do nothing
    VL53L0X_OsDelay();
 8006ec4:	2002      	movs	r0, #2
 8006ec6:	f000 f87b 	bl	8006fc0 <HAL_Delay>
    return status;
 8006eca:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006ece:	4618      	mov	r0, r3
 8006ed0:	3710      	adds	r7, #16
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	bd80      	pop	{r7, pc}

08006ed6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006ed6:	b580      	push	{r7, lr}
 8006ed8:	b082      	sub	sp, #8
 8006eda:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8006edc:	2300      	movs	r3, #0
 8006ede:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006ee0:	2003      	movs	r0, #3
 8006ee2:	f000 f95f 	bl	80071a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006ee6:	2000      	movs	r0, #0
 8006ee8:	f000 f80e 	bl	8006f08 <HAL_InitTick>
 8006eec:	4603      	mov	r3, r0
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d002      	beq.n	8006ef8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8006ef2:	2301      	movs	r3, #1
 8006ef4:	71fb      	strb	r3, [r7, #7]
 8006ef6:	e001      	b.n	8006efc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8006ef8:	f7fa f8e0 	bl	80010bc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8006efc:	79fb      	ldrb	r3, [r7, #7]
}
 8006efe:	4618      	mov	r0, r3
 8006f00:	3708      	adds	r7, #8
 8006f02:	46bd      	mov	sp, r7
 8006f04:	bd80      	pop	{r7, pc}
	...

08006f08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b084      	sub	sp, #16
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8006f10:	2300      	movs	r3, #0
 8006f12:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8006f14:	4b17      	ldr	r3, [pc, #92]	; (8006f74 <HAL_InitTick+0x6c>)
 8006f16:	781b      	ldrb	r3, [r3, #0]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d023      	beq.n	8006f64 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8006f1c:	4b16      	ldr	r3, [pc, #88]	; (8006f78 <HAL_InitTick+0x70>)
 8006f1e:	681a      	ldr	r2, [r3, #0]
 8006f20:	4b14      	ldr	r3, [pc, #80]	; (8006f74 <HAL_InitTick+0x6c>)
 8006f22:	781b      	ldrb	r3, [r3, #0]
 8006f24:	4619      	mov	r1, r3
 8006f26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006f2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8006f2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f32:	4618      	mov	r0, r3
 8006f34:	f000 f96b 	bl	800720e <HAL_SYSTICK_Config>
 8006f38:	4603      	mov	r3, r0
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d10f      	bne.n	8006f5e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2b0f      	cmp	r3, #15
 8006f42:	d809      	bhi.n	8006f58 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006f44:	2200      	movs	r2, #0
 8006f46:	6879      	ldr	r1, [r7, #4]
 8006f48:	f04f 30ff 	mov.w	r0, #4294967295
 8006f4c:	f000 f935 	bl	80071ba <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8006f50:	4a0a      	ldr	r2, [pc, #40]	; (8006f7c <HAL_InitTick+0x74>)
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6013      	str	r3, [r2, #0]
 8006f56:	e007      	b.n	8006f68 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8006f58:	2301      	movs	r3, #1
 8006f5a:	73fb      	strb	r3, [r7, #15]
 8006f5c:	e004      	b.n	8006f68 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8006f5e:	2301      	movs	r3, #1
 8006f60:	73fb      	strb	r3, [r7, #15]
 8006f62:	e001      	b.n	8006f68 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8006f64:	2301      	movs	r3, #1
 8006f66:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8006f68:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	3710      	adds	r7, #16
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	bd80      	pop	{r7, pc}
 8006f72:	bf00      	nop
 8006f74:	20000490 	.word	0x20000490
 8006f78:	20000000 	.word	0x20000000
 8006f7c:	2000048c 	.word	0x2000048c

08006f80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006f80:	b480      	push	{r7}
 8006f82:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8006f84:	4b06      	ldr	r3, [pc, #24]	; (8006fa0 <HAL_IncTick+0x20>)
 8006f86:	781b      	ldrb	r3, [r3, #0]
 8006f88:	461a      	mov	r2, r3
 8006f8a:	4b06      	ldr	r3, [pc, #24]	; (8006fa4 <HAL_IncTick+0x24>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	4413      	add	r3, r2
 8006f90:	4a04      	ldr	r2, [pc, #16]	; (8006fa4 <HAL_IncTick+0x24>)
 8006f92:	6013      	str	r3, [r2, #0]
}
 8006f94:	bf00      	nop
 8006f96:	46bd      	mov	sp, r7
 8006f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9c:	4770      	bx	lr
 8006f9e:	bf00      	nop
 8006fa0:	20000490 	.word	0x20000490
 8006fa4:	20000740 	.word	0x20000740

08006fa8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006fa8:	b480      	push	{r7}
 8006faa:	af00      	add	r7, sp, #0
  return uwTick;
 8006fac:	4b03      	ldr	r3, [pc, #12]	; (8006fbc <HAL_GetTick+0x14>)
 8006fae:	681b      	ldr	r3, [r3, #0]
}
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb8:	4770      	bx	lr
 8006fba:	bf00      	nop
 8006fbc:	20000740 	.word	0x20000740

08006fc0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b084      	sub	sp, #16
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006fc8:	f7ff ffee 	bl	8006fa8 <HAL_GetTick>
 8006fcc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fd8:	d005      	beq.n	8006fe6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8006fda:	4b09      	ldr	r3, [pc, #36]	; (8007000 <HAL_Delay+0x40>)
 8006fdc:	781b      	ldrb	r3, [r3, #0]
 8006fde:	461a      	mov	r2, r3
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	4413      	add	r3, r2
 8006fe4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006fe6:	bf00      	nop
 8006fe8:	f7ff ffde 	bl	8006fa8 <HAL_GetTick>
 8006fec:	4602      	mov	r2, r0
 8006fee:	68bb      	ldr	r3, [r7, #8]
 8006ff0:	1ad3      	subs	r3, r2, r3
 8006ff2:	68fa      	ldr	r2, [r7, #12]
 8006ff4:	429a      	cmp	r2, r3
 8006ff6:	d8f7      	bhi.n	8006fe8 <HAL_Delay+0x28>
  {
  }
}
 8006ff8:	bf00      	nop
 8006ffa:	3710      	adds	r7, #16
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	bd80      	pop	{r7, pc}
 8007000:	20000490 	.word	0x20000490

08007004 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007004:	b480      	push	{r7}
 8007006:	b085      	sub	sp, #20
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	f003 0307 	and.w	r3, r3, #7
 8007012:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007014:	4b0c      	ldr	r3, [pc, #48]	; (8007048 <__NVIC_SetPriorityGrouping+0x44>)
 8007016:	68db      	ldr	r3, [r3, #12]
 8007018:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800701a:	68ba      	ldr	r2, [r7, #8]
 800701c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007020:	4013      	ands	r3, r2
 8007022:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007028:	68bb      	ldr	r3, [r7, #8]
 800702a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800702c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007030:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007034:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007036:	4a04      	ldr	r2, [pc, #16]	; (8007048 <__NVIC_SetPriorityGrouping+0x44>)
 8007038:	68bb      	ldr	r3, [r7, #8]
 800703a:	60d3      	str	r3, [r2, #12]
}
 800703c:	bf00      	nop
 800703e:	3714      	adds	r7, #20
 8007040:	46bd      	mov	sp, r7
 8007042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007046:	4770      	bx	lr
 8007048:	e000ed00 	.word	0xe000ed00

0800704c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800704c:	b480      	push	{r7}
 800704e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007050:	4b04      	ldr	r3, [pc, #16]	; (8007064 <__NVIC_GetPriorityGrouping+0x18>)
 8007052:	68db      	ldr	r3, [r3, #12]
 8007054:	0a1b      	lsrs	r3, r3, #8
 8007056:	f003 0307 	and.w	r3, r3, #7
}
 800705a:	4618      	mov	r0, r3
 800705c:	46bd      	mov	sp, r7
 800705e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007062:	4770      	bx	lr
 8007064:	e000ed00 	.word	0xe000ed00

08007068 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007068:	b480      	push	{r7}
 800706a:	b083      	sub	sp, #12
 800706c:	af00      	add	r7, sp, #0
 800706e:	4603      	mov	r3, r0
 8007070:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007072:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007076:	2b00      	cmp	r3, #0
 8007078:	db0b      	blt.n	8007092 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800707a:	79fb      	ldrb	r3, [r7, #7]
 800707c:	f003 021f 	and.w	r2, r3, #31
 8007080:	4907      	ldr	r1, [pc, #28]	; (80070a0 <__NVIC_EnableIRQ+0x38>)
 8007082:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007086:	095b      	lsrs	r3, r3, #5
 8007088:	2001      	movs	r0, #1
 800708a:	fa00 f202 	lsl.w	r2, r0, r2
 800708e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8007092:	bf00      	nop
 8007094:	370c      	adds	r7, #12
 8007096:	46bd      	mov	sp, r7
 8007098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709c:	4770      	bx	lr
 800709e:	bf00      	nop
 80070a0:	e000e100 	.word	0xe000e100

080070a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80070a4:	b480      	push	{r7}
 80070a6:	b083      	sub	sp, #12
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	4603      	mov	r3, r0
 80070ac:	6039      	str	r1, [r7, #0]
 80070ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80070b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	db0a      	blt.n	80070ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	b2da      	uxtb	r2, r3
 80070bc:	490c      	ldr	r1, [pc, #48]	; (80070f0 <__NVIC_SetPriority+0x4c>)
 80070be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80070c2:	0112      	lsls	r2, r2, #4
 80070c4:	b2d2      	uxtb	r2, r2
 80070c6:	440b      	add	r3, r1
 80070c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80070cc:	e00a      	b.n	80070e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	b2da      	uxtb	r2, r3
 80070d2:	4908      	ldr	r1, [pc, #32]	; (80070f4 <__NVIC_SetPriority+0x50>)
 80070d4:	79fb      	ldrb	r3, [r7, #7]
 80070d6:	f003 030f 	and.w	r3, r3, #15
 80070da:	3b04      	subs	r3, #4
 80070dc:	0112      	lsls	r2, r2, #4
 80070de:	b2d2      	uxtb	r2, r2
 80070e0:	440b      	add	r3, r1
 80070e2:	761a      	strb	r2, [r3, #24]
}
 80070e4:	bf00      	nop
 80070e6:	370c      	adds	r7, #12
 80070e8:	46bd      	mov	sp, r7
 80070ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ee:	4770      	bx	lr
 80070f0:	e000e100 	.word	0xe000e100
 80070f4:	e000ed00 	.word	0xe000ed00

080070f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80070f8:	b480      	push	{r7}
 80070fa:	b089      	sub	sp, #36	; 0x24
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	60f8      	str	r0, [r7, #12]
 8007100:	60b9      	str	r1, [r7, #8]
 8007102:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	f003 0307 	and.w	r3, r3, #7
 800710a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800710c:	69fb      	ldr	r3, [r7, #28]
 800710e:	f1c3 0307 	rsb	r3, r3, #7
 8007112:	2b04      	cmp	r3, #4
 8007114:	bf28      	it	cs
 8007116:	2304      	movcs	r3, #4
 8007118:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800711a:	69fb      	ldr	r3, [r7, #28]
 800711c:	3304      	adds	r3, #4
 800711e:	2b06      	cmp	r3, #6
 8007120:	d902      	bls.n	8007128 <NVIC_EncodePriority+0x30>
 8007122:	69fb      	ldr	r3, [r7, #28]
 8007124:	3b03      	subs	r3, #3
 8007126:	e000      	b.n	800712a <NVIC_EncodePriority+0x32>
 8007128:	2300      	movs	r3, #0
 800712a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800712c:	f04f 32ff 	mov.w	r2, #4294967295
 8007130:	69bb      	ldr	r3, [r7, #24]
 8007132:	fa02 f303 	lsl.w	r3, r2, r3
 8007136:	43da      	mvns	r2, r3
 8007138:	68bb      	ldr	r3, [r7, #8]
 800713a:	401a      	ands	r2, r3
 800713c:	697b      	ldr	r3, [r7, #20]
 800713e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007140:	f04f 31ff 	mov.w	r1, #4294967295
 8007144:	697b      	ldr	r3, [r7, #20]
 8007146:	fa01 f303 	lsl.w	r3, r1, r3
 800714a:	43d9      	mvns	r1, r3
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007150:	4313      	orrs	r3, r2
         );
}
 8007152:	4618      	mov	r0, r3
 8007154:	3724      	adds	r7, #36	; 0x24
 8007156:	46bd      	mov	sp, r7
 8007158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715c:	4770      	bx	lr
	...

08007160 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007160:	b580      	push	{r7, lr}
 8007162:	b082      	sub	sp, #8
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	3b01      	subs	r3, #1
 800716c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007170:	d301      	bcc.n	8007176 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007172:	2301      	movs	r3, #1
 8007174:	e00f      	b.n	8007196 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007176:	4a0a      	ldr	r2, [pc, #40]	; (80071a0 <SysTick_Config+0x40>)
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	3b01      	subs	r3, #1
 800717c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800717e:	210f      	movs	r1, #15
 8007180:	f04f 30ff 	mov.w	r0, #4294967295
 8007184:	f7ff ff8e 	bl	80070a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007188:	4b05      	ldr	r3, [pc, #20]	; (80071a0 <SysTick_Config+0x40>)
 800718a:	2200      	movs	r2, #0
 800718c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800718e:	4b04      	ldr	r3, [pc, #16]	; (80071a0 <SysTick_Config+0x40>)
 8007190:	2207      	movs	r2, #7
 8007192:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007194:	2300      	movs	r3, #0
}
 8007196:	4618      	mov	r0, r3
 8007198:	3708      	adds	r7, #8
 800719a:	46bd      	mov	sp, r7
 800719c:	bd80      	pop	{r7, pc}
 800719e:	bf00      	nop
 80071a0:	e000e010 	.word	0xe000e010

080071a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b082      	sub	sp, #8
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80071ac:	6878      	ldr	r0, [r7, #4]
 80071ae:	f7ff ff29 	bl	8007004 <__NVIC_SetPriorityGrouping>
}
 80071b2:	bf00      	nop
 80071b4:	3708      	adds	r7, #8
 80071b6:	46bd      	mov	sp, r7
 80071b8:	bd80      	pop	{r7, pc}

080071ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80071ba:	b580      	push	{r7, lr}
 80071bc:	b086      	sub	sp, #24
 80071be:	af00      	add	r7, sp, #0
 80071c0:	4603      	mov	r3, r0
 80071c2:	60b9      	str	r1, [r7, #8]
 80071c4:	607a      	str	r2, [r7, #4]
 80071c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80071c8:	2300      	movs	r3, #0
 80071ca:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80071cc:	f7ff ff3e 	bl	800704c <__NVIC_GetPriorityGrouping>
 80071d0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80071d2:	687a      	ldr	r2, [r7, #4]
 80071d4:	68b9      	ldr	r1, [r7, #8]
 80071d6:	6978      	ldr	r0, [r7, #20]
 80071d8:	f7ff ff8e 	bl	80070f8 <NVIC_EncodePriority>
 80071dc:	4602      	mov	r2, r0
 80071de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80071e2:	4611      	mov	r1, r2
 80071e4:	4618      	mov	r0, r3
 80071e6:	f7ff ff5d 	bl	80070a4 <__NVIC_SetPriority>
}
 80071ea:	bf00      	nop
 80071ec:	3718      	adds	r7, #24
 80071ee:	46bd      	mov	sp, r7
 80071f0:	bd80      	pop	{r7, pc}

080071f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80071f2:	b580      	push	{r7, lr}
 80071f4:	b082      	sub	sp, #8
 80071f6:	af00      	add	r7, sp, #0
 80071f8:	4603      	mov	r3, r0
 80071fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80071fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007200:	4618      	mov	r0, r3
 8007202:	f7ff ff31 	bl	8007068 <__NVIC_EnableIRQ>
}
 8007206:	bf00      	nop
 8007208:	3708      	adds	r7, #8
 800720a:	46bd      	mov	sp, r7
 800720c:	bd80      	pop	{r7, pc}

0800720e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800720e:	b580      	push	{r7, lr}
 8007210:	b082      	sub	sp, #8
 8007212:	af00      	add	r7, sp, #0
 8007214:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007216:	6878      	ldr	r0, [r7, #4]
 8007218:	f7ff ffa2 	bl	8007160 <SysTick_Config>
 800721c:	4603      	mov	r3, r0
}
 800721e:	4618      	mov	r0, r3
 8007220:	3708      	adds	r7, #8
 8007222:	46bd      	mov	sp, r7
 8007224:	bd80      	pop	{r7, pc}
	...

08007228 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007228:	b480      	push	{r7}
 800722a:	b087      	sub	sp, #28
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
 8007230:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8007232:	2300      	movs	r3, #0
 8007234:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007236:	e17f      	b.n	8007538 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	681a      	ldr	r2, [r3, #0]
 800723c:	2101      	movs	r1, #1
 800723e:	697b      	ldr	r3, [r7, #20]
 8007240:	fa01 f303 	lsl.w	r3, r1, r3
 8007244:	4013      	ands	r3, r2
 8007246:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	2b00      	cmp	r3, #0
 800724c:	f000 8171 	beq.w	8007532 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	685b      	ldr	r3, [r3, #4]
 8007254:	2b01      	cmp	r3, #1
 8007256:	d00b      	beq.n	8007270 <HAL_GPIO_Init+0x48>
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	685b      	ldr	r3, [r3, #4]
 800725c:	2b02      	cmp	r3, #2
 800725e:	d007      	beq.n	8007270 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007264:	2b11      	cmp	r3, #17
 8007266:	d003      	beq.n	8007270 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	685b      	ldr	r3, [r3, #4]
 800726c:	2b12      	cmp	r3, #18
 800726e:	d130      	bne.n	80072d2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	689b      	ldr	r3, [r3, #8]
 8007274:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8007276:	697b      	ldr	r3, [r7, #20]
 8007278:	005b      	lsls	r3, r3, #1
 800727a:	2203      	movs	r2, #3
 800727c:	fa02 f303 	lsl.w	r3, r2, r3
 8007280:	43db      	mvns	r3, r3
 8007282:	693a      	ldr	r2, [r7, #16]
 8007284:	4013      	ands	r3, r2
 8007286:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	68da      	ldr	r2, [r3, #12]
 800728c:	697b      	ldr	r3, [r7, #20]
 800728e:	005b      	lsls	r3, r3, #1
 8007290:	fa02 f303 	lsl.w	r3, r2, r3
 8007294:	693a      	ldr	r2, [r7, #16]
 8007296:	4313      	orrs	r3, r2
 8007298:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	693a      	ldr	r2, [r7, #16]
 800729e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	685b      	ldr	r3, [r3, #4]
 80072a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80072a6:	2201      	movs	r2, #1
 80072a8:	697b      	ldr	r3, [r7, #20]
 80072aa:	fa02 f303 	lsl.w	r3, r2, r3
 80072ae:	43db      	mvns	r3, r3
 80072b0:	693a      	ldr	r2, [r7, #16]
 80072b2:	4013      	ands	r3, r2
 80072b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	685b      	ldr	r3, [r3, #4]
 80072ba:	091b      	lsrs	r3, r3, #4
 80072bc:	f003 0201 	and.w	r2, r3, #1
 80072c0:	697b      	ldr	r3, [r7, #20]
 80072c2:	fa02 f303 	lsl.w	r3, r2, r3
 80072c6:	693a      	ldr	r2, [r7, #16]
 80072c8:	4313      	orrs	r3, r2
 80072ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	693a      	ldr	r2, [r7, #16]
 80072d0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	685b      	ldr	r3, [r3, #4]
 80072d6:	f003 0303 	and.w	r3, r3, #3
 80072da:	2b03      	cmp	r3, #3
 80072dc:	d118      	bne.n	8007310 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072e2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80072e4:	2201      	movs	r2, #1
 80072e6:	697b      	ldr	r3, [r7, #20]
 80072e8:	fa02 f303 	lsl.w	r3, r2, r3
 80072ec:	43db      	mvns	r3, r3
 80072ee:	693a      	ldr	r2, [r7, #16]
 80072f0:	4013      	ands	r3, r2
 80072f2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	685b      	ldr	r3, [r3, #4]
 80072f8:	08db      	lsrs	r3, r3, #3
 80072fa:	f003 0201 	and.w	r2, r3, #1
 80072fe:	697b      	ldr	r3, [r7, #20]
 8007300:	fa02 f303 	lsl.w	r3, r2, r3
 8007304:	693a      	ldr	r2, [r7, #16]
 8007306:	4313      	orrs	r3, r2
 8007308:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	693a      	ldr	r2, [r7, #16]
 800730e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	68db      	ldr	r3, [r3, #12]
 8007314:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8007316:	697b      	ldr	r3, [r7, #20]
 8007318:	005b      	lsls	r3, r3, #1
 800731a:	2203      	movs	r2, #3
 800731c:	fa02 f303 	lsl.w	r3, r2, r3
 8007320:	43db      	mvns	r3, r3
 8007322:	693a      	ldr	r2, [r7, #16]
 8007324:	4013      	ands	r3, r2
 8007326:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	689a      	ldr	r2, [r3, #8]
 800732c:	697b      	ldr	r3, [r7, #20]
 800732e:	005b      	lsls	r3, r3, #1
 8007330:	fa02 f303 	lsl.w	r3, r2, r3
 8007334:	693a      	ldr	r2, [r7, #16]
 8007336:	4313      	orrs	r3, r2
 8007338:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	693a      	ldr	r2, [r7, #16]
 800733e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	685b      	ldr	r3, [r3, #4]
 8007344:	2b02      	cmp	r3, #2
 8007346:	d003      	beq.n	8007350 <HAL_GPIO_Init+0x128>
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	685b      	ldr	r3, [r3, #4]
 800734c:	2b12      	cmp	r3, #18
 800734e:	d123      	bne.n	8007398 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8007350:	697b      	ldr	r3, [r7, #20]
 8007352:	08da      	lsrs	r2, r3, #3
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	3208      	adds	r2, #8
 8007358:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800735c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800735e:	697b      	ldr	r3, [r7, #20]
 8007360:	f003 0307 	and.w	r3, r3, #7
 8007364:	009b      	lsls	r3, r3, #2
 8007366:	220f      	movs	r2, #15
 8007368:	fa02 f303 	lsl.w	r3, r2, r3
 800736c:	43db      	mvns	r3, r3
 800736e:	693a      	ldr	r2, [r7, #16]
 8007370:	4013      	ands	r3, r2
 8007372:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	691a      	ldr	r2, [r3, #16]
 8007378:	697b      	ldr	r3, [r7, #20]
 800737a:	f003 0307 	and.w	r3, r3, #7
 800737e:	009b      	lsls	r3, r3, #2
 8007380:	fa02 f303 	lsl.w	r3, r2, r3
 8007384:	693a      	ldr	r2, [r7, #16]
 8007386:	4313      	orrs	r3, r2
 8007388:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800738a:	697b      	ldr	r3, [r7, #20]
 800738c:	08da      	lsrs	r2, r3, #3
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	3208      	adds	r2, #8
 8007392:	6939      	ldr	r1, [r7, #16]
 8007394:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800739e:	697b      	ldr	r3, [r7, #20]
 80073a0:	005b      	lsls	r3, r3, #1
 80073a2:	2203      	movs	r2, #3
 80073a4:	fa02 f303 	lsl.w	r3, r2, r3
 80073a8:	43db      	mvns	r3, r3
 80073aa:	693a      	ldr	r2, [r7, #16]
 80073ac:	4013      	ands	r3, r2
 80073ae:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	685b      	ldr	r3, [r3, #4]
 80073b4:	f003 0203 	and.w	r2, r3, #3
 80073b8:	697b      	ldr	r3, [r7, #20]
 80073ba:	005b      	lsls	r3, r3, #1
 80073bc:	fa02 f303 	lsl.w	r3, r2, r3
 80073c0:	693a      	ldr	r2, [r7, #16]
 80073c2:	4313      	orrs	r3, r2
 80073c4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	693a      	ldr	r2, [r7, #16]
 80073ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	685b      	ldr	r3, [r3, #4]
 80073d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	f000 80ac 	beq.w	8007532 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80073da:	4b5e      	ldr	r3, [pc, #376]	; (8007554 <HAL_GPIO_Init+0x32c>)
 80073dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80073de:	4a5d      	ldr	r2, [pc, #372]	; (8007554 <HAL_GPIO_Init+0x32c>)
 80073e0:	f043 0301 	orr.w	r3, r3, #1
 80073e4:	6613      	str	r3, [r2, #96]	; 0x60
 80073e6:	4b5b      	ldr	r3, [pc, #364]	; (8007554 <HAL_GPIO_Init+0x32c>)
 80073e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80073ea:	f003 0301 	and.w	r3, r3, #1
 80073ee:	60bb      	str	r3, [r7, #8]
 80073f0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80073f2:	4a59      	ldr	r2, [pc, #356]	; (8007558 <HAL_GPIO_Init+0x330>)
 80073f4:	697b      	ldr	r3, [r7, #20]
 80073f6:	089b      	lsrs	r3, r3, #2
 80073f8:	3302      	adds	r3, #2
 80073fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80073fe:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8007400:	697b      	ldr	r3, [r7, #20]
 8007402:	f003 0303 	and.w	r3, r3, #3
 8007406:	009b      	lsls	r3, r3, #2
 8007408:	220f      	movs	r2, #15
 800740a:	fa02 f303 	lsl.w	r3, r2, r3
 800740e:	43db      	mvns	r3, r3
 8007410:	693a      	ldr	r2, [r7, #16]
 8007412:	4013      	ands	r3, r2
 8007414:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800741c:	d025      	beq.n	800746a <HAL_GPIO_Init+0x242>
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	4a4e      	ldr	r2, [pc, #312]	; (800755c <HAL_GPIO_Init+0x334>)
 8007422:	4293      	cmp	r3, r2
 8007424:	d01f      	beq.n	8007466 <HAL_GPIO_Init+0x23e>
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	4a4d      	ldr	r2, [pc, #308]	; (8007560 <HAL_GPIO_Init+0x338>)
 800742a:	4293      	cmp	r3, r2
 800742c:	d019      	beq.n	8007462 <HAL_GPIO_Init+0x23a>
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	4a4c      	ldr	r2, [pc, #304]	; (8007564 <HAL_GPIO_Init+0x33c>)
 8007432:	4293      	cmp	r3, r2
 8007434:	d013      	beq.n	800745e <HAL_GPIO_Init+0x236>
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	4a4b      	ldr	r2, [pc, #300]	; (8007568 <HAL_GPIO_Init+0x340>)
 800743a:	4293      	cmp	r3, r2
 800743c:	d00d      	beq.n	800745a <HAL_GPIO_Init+0x232>
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	4a4a      	ldr	r2, [pc, #296]	; (800756c <HAL_GPIO_Init+0x344>)
 8007442:	4293      	cmp	r3, r2
 8007444:	d007      	beq.n	8007456 <HAL_GPIO_Init+0x22e>
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	4a49      	ldr	r2, [pc, #292]	; (8007570 <HAL_GPIO_Init+0x348>)
 800744a:	4293      	cmp	r3, r2
 800744c:	d101      	bne.n	8007452 <HAL_GPIO_Init+0x22a>
 800744e:	2306      	movs	r3, #6
 8007450:	e00c      	b.n	800746c <HAL_GPIO_Init+0x244>
 8007452:	2307      	movs	r3, #7
 8007454:	e00a      	b.n	800746c <HAL_GPIO_Init+0x244>
 8007456:	2305      	movs	r3, #5
 8007458:	e008      	b.n	800746c <HAL_GPIO_Init+0x244>
 800745a:	2304      	movs	r3, #4
 800745c:	e006      	b.n	800746c <HAL_GPIO_Init+0x244>
 800745e:	2303      	movs	r3, #3
 8007460:	e004      	b.n	800746c <HAL_GPIO_Init+0x244>
 8007462:	2302      	movs	r3, #2
 8007464:	e002      	b.n	800746c <HAL_GPIO_Init+0x244>
 8007466:	2301      	movs	r3, #1
 8007468:	e000      	b.n	800746c <HAL_GPIO_Init+0x244>
 800746a:	2300      	movs	r3, #0
 800746c:	697a      	ldr	r2, [r7, #20]
 800746e:	f002 0203 	and.w	r2, r2, #3
 8007472:	0092      	lsls	r2, r2, #2
 8007474:	4093      	lsls	r3, r2
 8007476:	693a      	ldr	r2, [r7, #16]
 8007478:	4313      	orrs	r3, r2
 800747a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800747c:	4936      	ldr	r1, [pc, #216]	; (8007558 <HAL_GPIO_Init+0x330>)
 800747e:	697b      	ldr	r3, [r7, #20]
 8007480:	089b      	lsrs	r3, r3, #2
 8007482:	3302      	adds	r3, #2
 8007484:	693a      	ldr	r2, [r7, #16]
 8007486:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800748a:	4b3a      	ldr	r3, [pc, #232]	; (8007574 <HAL_GPIO_Init+0x34c>)
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	43db      	mvns	r3, r3
 8007494:	693a      	ldr	r2, [r7, #16]
 8007496:	4013      	ands	r3, r2
 8007498:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	685b      	ldr	r3, [r3, #4]
 800749e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d003      	beq.n	80074ae <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80074a6:	693a      	ldr	r2, [r7, #16]
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	4313      	orrs	r3, r2
 80074ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80074ae:	4a31      	ldr	r2, [pc, #196]	; (8007574 <HAL_GPIO_Init+0x34c>)
 80074b0:	693b      	ldr	r3, [r7, #16]
 80074b2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80074b4:	4b2f      	ldr	r3, [pc, #188]	; (8007574 <HAL_GPIO_Init+0x34c>)
 80074b6:	685b      	ldr	r3, [r3, #4]
 80074b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	43db      	mvns	r3, r3
 80074be:	693a      	ldr	r2, [r7, #16]
 80074c0:	4013      	ands	r3, r2
 80074c2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80074c4:	683b      	ldr	r3, [r7, #0]
 80074c6:	685b      	ldr	r3, [r3, #4]
 80074c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d003      	beq.n	80074d8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80074d0:	693a      	ldr	r2, [r7, #16]
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	4313      	orrs	r3, r2
 80074d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80074d8:	4a26      	ldr	r2, [pc, #152]	; (8007574 <HAL_GPIO_Init+0x34c>)
 80074da:	693b      	ldr	r3, [r7, #16]
 80074dc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80074de:	4b25      	ldr	r3, [pc, #148]	; (8007574 <HAL_GPIO_Init+0x34c>)
 80074e0:	689b      	ldr	r3, [r3, #8]
 80074e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	43db      	mvns	r3, r3
 80074e8:	693a      	ldr	r2, [r7, #16]
 80074ea:	4013      	ands	r3, r2
 80074ec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80074ee:	683b      	ldr	r3, [r7, #0]
 80074f0:	685b      	ldr	r3, [r3, #4]
 80074f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d003      	beq.n	8007502 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80074fa:	693a      	ldr	r2, [r7, #16]
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	4313      	orrs	r3, r2
 8007500:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8007502:	4a1c      	ldr	r2, [pc, #112]	; (8007574 <HAL_GPIO_Init+0x34c>)
 8007504:	693b      	ldr	r3, [r7, #16]
 8007506:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8007508:	4b1a      	ldr	r3, [pc, #104]	; (8007574 <HAL_GPIO_Init+0x34c>)
 800750a:	68db      	ldr	r3, [r3, #12]
 800750c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	43db      	mvns	r3, r3
 8007512:	693a      	ldr	r2, [r7, #16]
 8007514:	4013      	ands	r3, r2
 8007516:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	685b      	ldr	r3, [r3, #4]
 800751c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007520:	2b00      	cmp	r3, #0
 8007522:	d003      	beq.n	800752c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8007524:	693a      	ldr	r2, [r7, #16]
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	4313      	orrs	r3, r2
 800752a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800752c:	4a11      	ldr	r2, [pc, #68]	; (8007574 <HAL_GPIO_Init+0x34c>)
 800752e:	693b      	ldr	r3, [r7, #16]
 8007530:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8007532:	697b      	ldr	r3, [r7, #20]
 8007534:	3301      	adds	r3, #1
 8007536:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	681a      	ldr	r2, [r3, #0]
 800753c:	697b      	ldr	r3, [r7, #20]
 800753e:	fa22 f303 	lsr.w	r3, r2, r3
 8007542:	2b00      	cmp	r3, #0
 8007544:	f47f ae78 	bne.w	8007238 <HAL_GPIO_Init+0x10>
  }
}
 8007548:	bf00      	nop
 800754a:	371c      	adds	r7, #28
 800754c:	46bd      	mov	sp, r7
 800754e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007552:	4770      	bx	lr
 8007554:	40021000 	.word	0x40021000
 8007558:	40010000 	.word	0x40010000
 800755c:	48000400 	.word	0x48000400
 8007560:	48000800 	.word	0x48000800
 8007564:	48000c00 	.word	0x48000c00
 8007568:	48001000 	.word	0x48001000
 800756c:	48001400 	.word	0x48001400
 8007570:	48001800 	.word	0x48001800
 8007574:	40010400 	.word	0x40010400

08007578 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007578:	b480      	push	{r7}
 800757a:	b085      	sub	sp, #20
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
 8007580:	460b      	mov	r3, r1
 8007582:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	691a      	ldr	r2, [r3, #16]
 8007588:	887b      	ldrh	r3, [r7, #2]
 800758a:	4013      	ands	r3, r2
 800758c:	2b00      	cmp	r3, #0
 800758e:	d002      	beq.n	8007596 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007590:	2301      	movs	r3, #1
 8007592:	73fb      	strb	r3, [r7, #15]
 8007594:	e001      	b.n	800759a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007596:	2300      	movs	r3, #0
 8007598:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800759a:	7bfb      	ldrb	r3, [r7, #15]
}
 800759c:	4618      	mov	r0, r3
 800759e:	3714      	adds	r7, #20
 80075a0:	46bd      	mov	sp, r7
 80075a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a6:	4770      	bx	lr

080075a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80075a8:	b480      	push	{r7}
 80075aa:	b083      	sub	sp, #12
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
 80075b0:	460b      	mov	r3, r1
 80075b2:	807b      	strh	r3, [r7, #2]
 80075b4:	4613      	mov	r3, r2
 80075b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80075b8:	787b      	ldrb	r3, [r7, #1]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d003      	beq.n	80075c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80075be:	887a      	ldrh	r2, [r7, #2]
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80075c4:	e002      	b.n	80075cc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80075c6:	887a      	ldrh	r2, [r7, #2]
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	629a      	str	r2, [r3, #40]	; 0x28
}
 80075cc:	bf00      	nop
 80075ce:	370c      	adds	r7, #12
 80075d0:	46bd      	mov	sp, r7
 80075d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d6:	4770      	bx	lr

080075d8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b082      	sub	sp, #8
 80075dc:	af00      	add	r7, sp, #0
 80075de:	4603      	mov	r3, r0
 80075e0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80075e2:	4b08      	ldr	r3, [pc, #32]	; (8007604 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80075e4:	695a      	ldr	r2, [r3, #20]
 80075e6:	88fb      	ldrh	r3, [r7, #6]
 80075e8:	4013      	ands	r3, r2
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d006      	beq.n	80075fc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80075ee:	4a05      	ldr	r2, [pc, #20]	; (8007604 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80075f0:	88fb      	ldrh	r3, [r7, #6]
 80075f2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80075f4:	88fb      	ldrh	r3, [r7, #6]
 80075f6:	4618      	mov	r0, r3
 80075f8:	f000 f806 	bl	8007608 <HAL_GPIO_EXTI_Callback>
  }
}
 80075fc:	bf00      	nop
 80075fe:	3708      	adds	r7, #8
 8007600:	46bd      	mov	sp, r7
 8007602:	bd80      	pop	{r7, pc}
 8007604:	40010400 	.word	0x40010400

08007608 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8007608:	b480      	push	{r7}
 800760a:	b083      	sub	sp, #12
 800760c:	af00      	add	r7, sp, #0
 800760e:	4603      	mov	r3, r0
 8007610:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8007612:	bf00      	nop
 8007614:	370c      	adds	r7, #12
 8007616:	46bd      	mov	sp, r7
 8007618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761c:	4770      	bx	lr

0800761e <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800761e:	b580      	push	{r7, lr}
 8007620:	b082      	sub	sp, #8
 8007622:	af00      	add	r7, sp, #0
 8007624:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d101      	bne.n	8007630 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800762c:	2301      	movs	r3, #1
 800762e:	e081      	b.n	8007734 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007636:	b2db      	uxtb	r3, r3
 8007638:	2b00      	cmp	r3, #0
 800763a:	d106      	bne.n	800764a <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2200      	movs	r2, #0
 8007640:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007644:	6878      	ldr	r0, [r7, #4]
 8007646:	f000 f8a8 	bl	800779a <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	2224      	movs	r2, #36	; 0x24
 800764e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	681a      	ldr	r2, [r3, #0]
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f022 0201 	bic.w	r2, r2, #1
 8007660:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	685a      	ldr	r2, [r3, #4]
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800766e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	689a      	ldr	r2, [r3, #8]
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800767e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	68db      	ldr	r3, [r3, #12]
 8007684:	2b01      	cmp	r3, #1
 8007686:	d107      	bne.n	8007698 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	689a      	ldr	r2, [r3, #8]
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007694:	609a      	str	r2, [r3, #8]
 8007696:	e006      	b.n	80076a6 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	689a      	ldr	r2, [r3, #8]
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80076a4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	68db      	ldr	r3, [r3, #12]
 80076aa:	2b02      	cmp	r3, #2
 80076ac:	d104      	bne.n	80076b8 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80076b6:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	685b      	ldr	r3, [r3, #4]
 80076be:	687a      	ldr	r2, [r7, #4]
 80076c0:	6812      	ldr	r2, [r2, #0]
 80076c2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80076c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80076ca:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	68da      	ldr	r2, [r3, #12]
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80076da:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	691a      	ldr	r2, [r3, #16]
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	695b      	ldr	r3, [r3, #20]
 80076e4:	ea42 0103 	orr.w	r1, r2, r3
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	699b      	ldr	r3, [r3, #24]
 80076ec:	021a      	lsls	r2, r3, #8
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	430a      	orrs	r2, r1
 80076f4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	69d9      	ldr	r1, [r3, #28]
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	6a1a      	ldr	r2, [r3, #32]
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	430a      	orrs	r2, r1
 8007704:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	681a      	ldr	r2, [r3, #0]
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f042 0201 	orr.w	r2, r2, #1
 8007714:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2200      	movs	r2, #0
 800771a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2220      	movs	r2, #32
 8007720:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2200      	movs	r2, #0
 8007728:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2200      	movs	r2, #0
 800772e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8007732:	2300      	movs	r3, #0
}
 8007734:	4618      	mov	r0, r3
 8007736:	3708      	adds	r7, #8
 8007738:	46bd      	mov	sp, r7
 800773a:	bd80      	pop	{r7, pc}

0800773c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800773c:	b580      	push	{r7, lr}
 800773e:	b082      	sub	sp, #8
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d101      	bne.n	800774e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800774a:	2301      	movs	r3, #1
 800774c:	e021      	b.n	8007792 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	2224      	movs	r2, #36	; 0x24
 8007752:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	681a      	ldr	r2, [r3, #0]
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f022 0201 	bic.w	r2, r2, #1
 8007764:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8007766:	6878      	ldr	r0, [r7, #4]
 8007768:	f000 f821 	bl	80077ae <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2200      	movs	r2, #0
 8007770:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	2200      	movs	r2, #0
 8007776:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	2200      	movs	r2, #0
 800777e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2200      	movs	r2, #0
 8007784:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2200      	movs	r2, #0
 800778c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007790:	2300      	movs	r3, #0
}
 8007792:	4618      	mov	r0, r3
 8007794:	3708      	adds	r7, #8
 8007796:	46bd      	mov	sp, r7
 8007798:	bd80      	pop	{r7, pc}

0800779a <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 800779a:	b480      	push	{r7}
 800779c:	b083      	sub	sp, #12
 800779e:	af00      	add	r7, sp, #0
 80077a0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 80077a2:	bf00      	nop
 80077a4:	370c      	adds	r7, #12
 80077a6:	46bd      	mov	sp, r7
 80077a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ac:	4770      	bx	lr

080077ae <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 80077ae:	b480      	push	{r7}
 80077b0:	b083      	sub	sp, #12
 80077b2:	af00      	add	r7, sp, #0
 80077b4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 80077b6:	bf00      	nop
 80077b8:	370c      	adds	r7, #12
 80077ba:	46bd      	mov	sp, r7
 80077bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c0:	4770      	bx	lr
	...

080077c4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b088      	sub	sp, #32
 80077c8:	af02      	add	r7, sp, #8
 80077ca:	60f8      	str	r0, [r7, #12]
 80077cc:	607a      	str	r2, [r7, #4]
 80077ce:	461a      	mov	r2, r3
 80077d0:	460b      	mov	r3, r1
 80077d2:	817b      	strh	r3, [r7, #10]
 80077d4:	4613      	mov	r3, r2
 80077d6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80077de:	b2db      	uxtb	r3, r3
 80077e0:	2b20      	cmp	r3, #32
 80077e2:	f040 80da 	bne.w	800799a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80077ec:	2b01      	cmp	r3, #1
 80077ee:	d101      	bne.n	80077f4 <HAL_I2C_Master_Transmit+0x30>
 80077f0:	2302      	movs	r3, #2
 80077f2:	e0d3      	b.n	800799c <HAL_I2C_Master_Transmit+0x1d8>
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	2201      	movs	r2, #1
 80077f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80077fc:	f7ff fbd4 	bl	8006fa8 <HAL_GetTick>
 8007800:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007802:	697b      	ldr	r3, [r7, #20]
 8007804:	9300      	str	r3, [sp, #0]
 8007806:	2319      	movs	r3, #25
 8007808:	2201      	movs	r2, #1
 800780a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800780e:	68f8      	ldr	r0, [r7, #12]
 8007810:	f000 fcbc 	bl	800818c <I2C_WaitOnFlagUntilTimeout>
 8007814:	4603      	mov	r3, r0
 8007816:	2b00      	cmp	r3, #0
 8007818:	d001      	beq.n	800781e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800781a:	2301      	movs	r3, #1
 800781c:	e0be      	b.n	800799c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	2221      	movs	r2, #33	; 0x21
 8007822:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	2210      	movs	r2, #16
 800782a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	2200      	movs	r2, #0
 8007832:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	687a      	ldr	r2, [r7, #4]
 8007838:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	893a      	ldrh	r2, [r7, #8]
 800783e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	2200      	movs	r2, #0
 8007844:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800784a:	b29b      	uxth	r3, r3
 800784c:	2bff      	cmp	r3, #255	; 0xff
 800784e:	d90e      	bls.n	800786e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	22ff      	movs	r2, #255	; 0xff
 8007854:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800785a:	b2da      	uxtb	r2, r3
 800785c:	8979      	ldrh	r1, [r7, #10]
 800785e:	4b51      	ldr	r3, [pc, #324]	; (80079a4 <HAL_I2C_Master_Transmit+0x1e0>)
 8007860:	9300      	str	r3, [sp, #0]
 8007862:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007866:	68f8      	ldr	r0, [r7, #12]
 8007868:	f000 fe1e 	bl	80084a8 <I2C_TransferConfig>
 800786c:	e06c      	b.n	8007948 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007872:	b29a      	uxth	r2, r3
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800787c:	b2da      	uxtb	r2, r3
 800787e:	8979      	ldrh	r1, [r7, #10]
 8007880:	4b48      	ldr	r3, [pc, #288]	; (80079a4 <HAL_I2C_Master_Transmit+0x1e0>)
 8007882:	9300      	str	r3, [sp, #0]
 8007884:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007888:	68f8      	ldr	r0, [r7, #12]
 800788a:	f000 fe0d 	bl	80084a8 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800788e:	e05b      	b.n	8007948 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007890:	697a      	ldr	r2, [r7, #20]
 8007892:	6a39      	ldr	r1, [r7, #32]
 8007894:	68f8      	ldr	r0, [r7, #12]
 8007896:	f000 fcb9 	bl	800820c <I2C_WaitOnTXISFlagUntilTimeout>
 800789a:	4603      	mov	r3, r0
 800789c:	2b00      	cmp	r3, #0
 800789e:	d001      	beq.n	80078a4 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80078a0:	2301      	movs	r3, #1
 80078a2:	e07b      	b.n	800799c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078a8:	781a      	ldrb	r2, [r3, #0]
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078b4:	1c5a      	adds	r2, r3, #1
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078be:	b29b      	uxth	r3, r3
 80078c0:	3b01      	subs	r3, #1
 80078c2:	b29a      	uxth	r2, r3
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80078cc:	3b01      	subs	r3, #1
 80078ce:	b29a      	uxth	r2, r3
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078d8:	b29b      	uxth	r3, r3
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d034      	beq.n	8007948 <HAL_I2C_Master_Transmit+0x184>
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d130      	bne.n	8007948 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80078e6:	697b      	ldr	r3, [r7, #20]
 80078e8:	9300      	str	r3, [sp, #0]
 80078ea:	6a3b      	ldr	r3, [r7, #32]
 80078ec:	2200      	movs	r2, #0
 80078ee:	2180      	movs	r1, #128	; 0x80
 80078f0:	68f8      	ldr	r0, [r7, #12]
 80078f2:	f000 fc4b 	bl	800818c <I2C_WaitOnFlagUntilTimeout>
 80078f6:	4603      	mov	r3, r0
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d001      	beq.n	8007900 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80078fc:	2301      	movs	r3, #1
 80078fe:	e04d      	b.n	800799c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007904:	b29b      	uxth	r3, r3
 8007906:	2bff      	cmp	r3, #255	; 0xff
 8007908:	d90e      	bls.n	8007928 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	22ff      	movs	r2, #255	; 0xff
 800790e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007914:	b2da      	uxtb	r2, r3
 8007916:	8979      	ldrh	r1, [r7, #10]
 8007918:	2300      	movs	r3, #0
 800791a:	9300      	str	r3, [sp, #0]
 800791c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007920:	68f8      	ldr	r0, [r7, #12]
 8007922:	f000 fdc1 	bl	80084a8 <I2C_TransferConfig>
 8007926:	e00f      	b.n	8007948 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800792c:	b29a      	uxth	r2, r3
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007936:	b2da      	uxtb	r2, r3
 8007938:	8979      	ldrh	r1, [r7, #10]
 800793a:	2300      	movs	r3, #0
 800793c:	9300      	str	r3, [sp, #0]
 800793e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007942:	68f8      	ldr	r0, [r7, #12]
 8007944:	f000 fdb0 	bl	80084a8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800794c:	b29b      	uxth	r3, r3
 800794e:	2b00      	cmp	r3, #0
 8007950:	d19e      	bne.n	8007890 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007952:	697a      	ldr	r2, [r7, #20]
 8007954:	6a39      	ldr	r1, [r7, #32]
 8007956:	68f8      	ldr	r0, [r7, #12]
 8007958:	f000 fc98 	bl	800828c <I2C_WaitOnSTOPFlagUntilTimeout>
 800795c:	4603      	mov	r3, r0
 800795e:	2b00      	cmp	r3, #0
 8007960:	d001      	beq.n	8007966 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8007962:	2301      	movs	r3, #1
 8007964:	e01a      	b.n	800799c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	2220      	movs	r2, #32
 800796c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	6859      	ldr	r1, [r3, #4]
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	681a      	ldr	r2, [r3, #0]
 8007978:	4b0b      	ldr	r3, [pc, #44]	; (80079a8 <HAL_I2C_Master_Transmit+0x1e4>)
 800797a:	400b      	ands	r3, r1
 800797c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	2220      	movs	r2, #32
 8007982:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	2200      	movs	r2, #0
 800798a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	2200      	movs	r2, #0
 8007992:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007996:	2300      	movs	r3, #0
 8007998:	e000      	b.n	800799c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800799a:	2302      	movs	r3, #2
  }
}
 800799c:	4618      	mov	r0, r3
 800799e:	3718      	adds	r7, #24
 80079a0:	46bd      	mov	sp, r7
 80079a2:	bd80      	pop	{r7, pc}
 80079a4:	80002000 	.word	0x80002000
 80079a8:	fe00e800 	.word	0xfe00e800

080079ac <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b088      	sub	sp, #32
 80079b0:	af02      	add	r7, sp, #8
 80079b2:	60f8      	str	r0, [r7, #12]
 80079b4:	607a      	str	r2, [r7, #4]
 80079b6:	461a      	mov	r2, r3
 80079b8:	460b      	mov	r3, r1
 80079ba:	817b      	strh	r3, [r7, #10]
 80079bc:	4613      	mov	r3, r2
 80079be:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80079c6:	b2db      	uxtb	r3, r3
 80079c8:	2b20      	cmp	r3, #32
 80079ca:	f040 80db 	bne.w	8007b84 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80079d4:	2b01      	cmp	r3, #1
 80079d6:	d101      	bne.n	80079dc <HAL_I2C_Master_Receive+0x30>
 80079d8:	2302      	movs	r3, #2
 80079da:	e0d4      	b.n	8007b86 <HAL_I2C_Master_Receive+0x1da>
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	2201      	movs	r2, #1
 80079e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80079e4:	f7ff fae0 	bl	8006fa8 <HAL_GetTick>
 80079e8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80079ea:	697b      	ldr	r3, [r7, #20]
 80079ec:	9300      	str	r3, [sp, #0]
 80079ee:	2319      	movs	r3, #25
 80079f0:	2201      	movs	r2, #1
 80079f2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80079f6:	68f8      	ldr	r0, [r7, #12]
 80079f8:	f000 fbc8 	bl	800818c <I2C_WaitOnFlagUntilTimeout>
 80079fc:	4603      	mov	r3, r0
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d001      	beq.n	8007a06 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8007a02:	2301      	movs	r3, #1
 8007a04:	e0bf      	b.n	8007b86 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	2222      	movs	r2, #34	; 0x22
 8007a0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	2210      	movs	r2, #16
 8007a12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	2200      	movs	r2, #0
 8007a1a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	687a      	ldr	r2, [r7, #4]
 8007a20:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	893a      	ldrh	r2, [r7, #8]
 8007a26:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a32:	b29b      	uxth	r3, r3
 8007a34:	2bff      	cmp	r3, #255	; 0xff
 8007a36:	d90e      	bls.n	8007a56 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	22ff      	movs	r2, #255	; 0xff
 8007a3c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a42:	b2da      	uxtb	r2, r3
 8007a44:	8979      	ldrh	r1, [r7, #10]
 8007a46:	4b52      	ldr	r3, [pc, #328]	; (8007b90 <HAL_I2C_Master_Receive+0x1e4>)
 8007a48:	9300      	str	r3, [sp, #0]
 8007a4a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007a4e:	68f8      	ldr	r0, [r7, #12]
 8007a50:	f000 fd2a 	bl	80084a8 <I2C_TransferConfig>
 8007a54:	e06d      	b.n	8007b32 <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a5a:	b29a      	uxth	r2, r3
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a64:	b2da      	uxtb	r2, r3
 8007a66:	8979      	ldrh	r1, [r7, #10]
 8007a68:	4b49      	ldr	r3, [pc, #292]	; (8007b90 <HAL_I2C_Master_Receive+0x1e4>)
 8007a6a:	9300      	str	r3, [sp, #0]
 8007a6c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007a70:	68f8      	ldr	r0, [r7, #12]
 8007a72:	f000 fd19 	bl	80084a8 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8007a76:	e05c      	b.n	8007b32 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007a78:	697a      	ldr	r2, [r7, #20]
 8007a7a:	6a39      	ldr	r1, [r7, #32]
 8007a7c:	68f8      	ldr	r0, [r7, #12]
 8007a7e:	f000 fc41 	bl	8008304 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007a82:	4603      	mov	r3, r0
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d001      	beq.n	8007a8c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8007a88:	2301      	movs	r3, #1
 8007a8a:	e07c      	b.n	8007b86 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a96:	b2d2      	uxtb	r2, r2
 8007a98:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a9e:	1c5a      	adds	r2, r3, #1
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007aa8:	3b01      	subs	r3, #1
 8007aaa:	b29a      	uxth	r2, r3
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ab4:	b29b      	uxth	r3, r3
 8007ab6:	3b01      	subs	r3, #1
 8007ab8:	b29a      	uxth	r2, r3
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ac2:	b29b      	uxth	r3, r3
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d034      	beq.n	8007b32 <HAL_I2C_Master_Receive+0x186>
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d130      	bne.n	8007b32 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007ad0:	697b      	ldr	r3, [r7, #20]
 8007ad2:	9300      	str	r3, [sp, #0]
 8007ad4:	6a3b      	ldr	r3, [r7, #32]
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	2180      	movs	r1, #128	; 0x80
 8007ada:	68f8      	ldr	r0, [r7, #12]
 8007adc:	f000 fb56 	bl	800818c <I2C_WaitOnFlagUntilTimeout>
 8007ae0:	4603      	mov	r3, r0
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d001      	beq.n	8007aea <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8007ae6:	2301      	movs	r3, #1
 8007ae8:	e04d      	b.n	8007b86 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007aee:	b29b      	uxth	r3, r3
 8007af0:	2bff      	cmp	r3, #255	; 0xff
 8007af2:	d90e      	bls.n	8007b12 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	22ff      	movs	r2, #255	; 0xff
 8007af8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007afe:	b2da      	uxtb	r2, r3
 8007b00:	8979      	ldrh	r1, [r7, #10]
 8007b02:	2300      	movs	r3, #0
 8007b04:	9300      	str	r3, [sp, #0]
 8007b06:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007b0a:	68f8      	ldr	r0, [r7, #12]
 8007b0c:	f000 fccc 	bl	80084a8 <I2C_TransferConfig>
 8007b10:	e00f      	b.n	8007b32 <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b16:	b29a      	uxth	r2, r3
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b20:	b2da      	uxtb	r2, r3
 8007b22:	8979      	ldrh	r1, [r7, #10]
 8007b24:	2300      	movs	r3, #0
 8007b26:	9300      	str	r3, [sp, #0]
 8007b28:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007b2c:	68f8      	ldr	r0, [r7, #12]
 8007b2e:	f000 fcbb 	bl	80084a8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b36:	b29b      	uxth	r3, r3
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d19d      	bne.n	8007a78 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007b3c:	697a      	ldr	r2, [r7, #20]
 8007b3e:	6a39      	ldr	r1, [r7, #32]
 8007b40:	68f8      	ldr	r0, [r7, #12]
 8007b42:	f000 fba3 	bl	800828c <I2C_WaitOnSTOPFlagUntilTimeout>
 8007b46:	4603      	mov	r3, r0
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d001      	beq.n	8007b50 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8007b4c:	2301      	movs	r3, #1
 8007b4e:	e01a      	b.n	8007b86 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	2220      	movs	r2, #32
 8007b56:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	6859      	ldr	r1, [r3, #4]
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	681a      	ldr	r2, [r3, #0]
 8007b62:	4b0c      	ldr	r3, [pc, #48]	; (8007b94 <HAL_I2C_Master_Receive+0x1e8>)
 8007b64:	400b      	ands	r3, r1
 8007b66:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	2220      	movs	r2, #32
 8007b6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	2200      	movs	r2, #0
 8007b74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007b80:	2300      	movs	r3, #0
 8007b82:	e000      	b.n	8007b86 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8007b84:	2302      	movs	r3, #2
  }
}
 8007b86:	4618      	mov	r0, r3
 8007b88:	3718      	adds	r7, #24
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	bd80      	pop	{r7, pc}
 8007b8e:	bf00      	nop
 8007b90:	80002400 	.word	0x80002400
 8007b94:	fe00e800 	.word	0xfe00e800

08007b98 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b088      	sub	sp, #32
 8007b9c:	af02      	add	r7, sp, #8
 8007b9e:	60f8      	str	r0, [r7, #12]
 8007ba0:	4608      	mov	r0, r1
 8007ba2:	4611      	mov	r1, r2
 8007ba4:	461a      	mov	r2, r3
 8007ba6:	4603      	mov	r3, r0
 8007ba8:	817b      	strh	r3, [r7, #10]
 8007baa:	460b      	mov	r3, r1
 8007bac:	813b      	strh	r3, [r7, #8]
 8007bae:	4613      	mov	r3, r2
 8007bb0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007bb8:	b2db      	uxtb	r3, r3
 8007bba:	2b20      	cmp	r3, #32
 8007bbc:	f040 80f9 	bne.w	8007db2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007bc0:	6a3b      	ldr	r3, [r7, #32]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d002      	beq.n	8007bcc <HAL_I2C_Mem_Write+0x34>
 8007bc6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d105      	bne.n	8007bd8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007bd2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8007bd4:	2301      	movs	r3, #1
 8007bd6:	e0ed      	b.n	8007db4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007bde:	2b01      	cmp	r3, #1
 8007be0:	d101      	bne.n	8007be6 <HAL_I2C_Mem_Write+0x4e>
 8007be2:	2302      	movs	r3, #2
 8007be4:	e0e6      	b.n	8007db4 <HAL_I2C_Mem_Write+0x21c>
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	2201      	movs	r2, #1
 8007bea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007bee:	f7ff f9db 	bl	8006fa8 <HAL_GetTick>
 8007bf2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007bf4:	697b      	ldr	r3, [r7, #20]
 8007bf6:	9300      	str	r3, [sp, #0]
 8007bf8:	2319      	movs	r3, #25
 8007bfa:	2201      	movs	r2, #1
 8007bfc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007c00:	68f8      	ldr	r0, [r7, #12]
 8007c02:	f000 fac3 	bl	800818c <I2C_WaitOnFlagUntilTimeout>
 8007c06:	4603      	mov	r3, r0
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d001      	beq.n	8007c10 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8007c0c:	2301      	movs	r3, #1
 8007c0e:	e0d1      	b.n	8007db4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	2221      	movs	r2, #33	; 0x21
 8007c14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	2240      	movs	r2, #64	; 0x40
 8007c1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	2200      	movs	r2, #0
 8007c24:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	6a3a      	ldr	r2, [r7, #32]
 8007c2a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007c30:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	2200      	movs	r2, #0
 8007c36:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007c38:	88f8      	ldrh	r0, [r7, #6]
 8007c3a:	893a      	ldrh	r2, [r7, #8]
 8007c3c:	8979      	ldrh	r1, [r7, #10]
 8007c3e:	697b      	ldr	r3, [r7, #20]
 8007c40:	9301      	str	r3, [sp, #4]
 8007c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c44:	9300      	str	r3, [sp, #0]
 8007c46:	4603      	mov	r3, r0
 8007c48:	68f8      	ldr	r0, [r7, #12]
 8007c4a:	f000 f9d3 	bl	8007ff4 <I2C_RequestMemoryWrite>
 8007c4e:	4603      	mov	r3, r0
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d005      	beq.n	8007c60 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	2200      	movs	r2, #0
 8007c58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8007c5c:	2301      	movs	r3, #1
 8007c5e:	e0a9      	b.n	8007db4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c64:	b29b      	uxth	r3, r3
 8007c66:	2bff      	cmp	r3, #255	; 0xff
 8007c68:	d90e      	bls.n	8007c88 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	22ff      	movs	r2, #255	; 0xff
 8007c6e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c74:	b2da      	uxtb	r2, r3
 8007c76:	8979      	ldrh	r1, [r7, #10]
 8007c78:	2300      	movs	r3, #0
 8007c7a:	9300      	str	r3, [sp, #0]
 8007c7c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007c80:	68f8      	ldr	r0, [r7, #12]
 8007c82:	f000 fc11 	bl	80084a8 <I2C_TransferConfig>
 8007c86:	e00f      	b.n	8007ca8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c8c:	b29a      	uxth	r2, r3
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c96:	b2da      	uxtb	r2, r3
 8007c98:	8979      	ldrh	r1, [r7, #10]
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	9300      	str	r3, [sp, #0]
 8007c9e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007ca2:	68f8      	ldr	r0, [r7, #12]
 8007ca4:	f000 fc00 	bl	80084a8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007ca8:	697a      	ldr	r2, [r7, #20]
 8007caa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007cac:	68f8      	ldr	r0, [r7, #12]
 8007cae:	f000 faad 	bl	800820c <I2C_WaitOnTXISFlagUntilTimeout>
 8007cb2:	4603      	mov	r3, r0
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d001      	beq.n	8007cbc <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8007cb8:	2301      	movs	r3, #1
 8007cba:	e07b      	b.n	8007db4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cc0:	781a      	ldrb	r2, [r3, #0]
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ccc:	1c5a      	adds	r2, r3, #1
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007cd6:	b29b      	uxth	r3, r3
 8007cd8:	3b01      	subs	r3, #1
 8007cda:	b29a      	uxth	r2, r3
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ce4:	3b01      	subs	r3, #1
 8007ce6:	b29a      	uxth	r2, r3
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007cf0:	b29b      	uxth	r3, r3
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d034      	beq.n	8007d60 <HAL_I2C_Mem_Write+0x1c8>
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d130      	bne.n	8007d60 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007cfe:	697b      	ldr	r3, [r7, #20]
 8007d00:	9300      	str	r3, [sp, #0]
 8007d02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d04:	2200      	movs	r2, #0
 8007d06:	2180      	movs	r1, #128	; 0x80
 8007d08:	68f8      	ldr	r0, [r7, #12]
 8007d0a:	f000 fa3f 	bl	800818c <I2C_WaitOnFlagUntilTimeout>
 8007d0e:	4603      	mov	r3, r0
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d001      	beq.n	8007d18 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8007d14:	2301      	movs	r3, #1
 8007d16:	e04d      	b.n	8007db4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d1c:	b29b      	uxth	r3, r3
 8007d1e:	2bff      	cmp	r3, #255	; 0xff
 8007d20:	d90e      	bls.n	8007d40 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	22ff      	movs	r2, #255	; 0xff
 8007d26:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d2c:	b2da      	uxtb	r2, r3
 8007d2e:	8979      	ldrh	r1, [r7, #10]
 8007d30:	2300      	movs	r3, #0
 8007d32:	9300      	str	r3, [sp, #0]
 8007d34:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007d38:	68f8      	ldr	r0, [r7, #12]
 8007d3a:	f000 fbb5 	bl	80084a8 <I2C_TransferConfig>
 8007d3e:	e00f      	b.n	8007d60 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d44:	b29a      	uxth	r2, r3
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d4e:	b2da      	uxtb	r2, r3
 8007d50:	8979      	ldrh	r1, [r7, #10]
 8007d52:	2300      	movs	r3, #0
 8007d54:	9300      	str	r3, [sp, #0]
 8007d56:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007d5a:	68f8      	ldr	r0, [r7, #12]
 8007d5c:	f000 fba4 	bl	80084a8 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d64:	b29b      	uxth	r3, r3
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d19e      	bne.n	8007ca8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007d6a:	697a      	ldr	r2, [r7, #20]
 8007d6c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007d6e:	68f8      	ldr	r0, [r7, #12]
 8007d70:	f000 fa8c 	bl	800828c <I2C_WaitOnSTOPFlagUntilTimeout>
 8007d74:	4603      	mov	r3, r0
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d001      	beq.n	8007d7e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8007d7a:	2301      	movs	r3, #1
 8007d7c:	e01a      	b.n	8007db4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	2220      	movs	r2, #32
 8007d84:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	6859      	ldr	r1, [r3, #4]
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	681a      	ldr	r2, [r3, #0]
 8007d90:	4b0a      	ldr	r3, [pc, #40]	; (8007dbc <HAL_I2C_Mem_Write+0x224>)
 8007d92:	400b      	ands	r3, r1
 8007d94:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	2220      	movs	r2, #32
 8007d9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	2200      	movs	r2, #0
 8007da2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	2200      	movs	r2, #0
 8007daa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007dae:	2300      	movs	r3, #0
 8007db0:	e000      	b.n	8007db4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8007db2:	2302      	movs	r3, #2
  }
}
 8007db4:	4618      	mov	r0, r3
 8007db6:	3718      	adds	r7, #24
 8007db8:	46bd      	mov	sp, r7
 8007dba:	bd80      	pop	{r7, pc}
 8007dbc:	fe00e800 	.word	0xfe00e800

08007dc0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b088      	sub	sp, #32
 8007dc4:	af02      	add	r7, sp, #8
 8007dc6:	60f8      	str	r0, [r7, #12]
 8007dc8:	4608      	mov	r0, r1
 8007dca:	4611      	mov	r1, r2
 8007dcc:	461a      	mov	r2, r3
 8007dce:	4603      	mov	r3, r0
 8007dd0:	817b      	strh	r3, [r7, #10]
 8007dd2:	460b      	mov	r3, r1
 8007dd4:	813b      	strh	r3, [r7, #8]
 8007dd6:	4613      	mov	r3, r2
 8007dd8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007de0:	b2db      	uxtb	r3, r3
 8007de2:	2b20      	cmp	r3, #32
 8007de4:	f040 80fd 	bne.w	8007fe2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8007de8:	6a3b      	ldr	r3, [r7, #32]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d002      	beq.n	8007df4 <HAL_I2C_Mem_Read+0x34>
 8007dee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d105      	bne.n	8007e00 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007dfa:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8007dfc:	2301      	movs	r3, #1
 8007dfe:	e0f1      	b.n	8007fe4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007e06:	2b01      	cmp	r3, #1
 8007e08:	d101      	bne.n	8007e0e <HAL_I2C_Mem_Read+0x4e>
 8007e0a:	2302      	movs	r3, #2
 8007e0c:	e0ea      	b.n	8007fe4 <HAL_I2C_Mem_Read+0x224>
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	2201      	movs	r2, #1
 8007e12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007e16:	f7ff f8c7 	bl	8006fa8 <HAL_GetTick>
 8007e1a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007e1c:	697b      	ldr	r3, [r7, #20]
 8007e1e:	9300      	str	r3, [sp, #0]
 8007e20:	2319      	movs	r3, #25
 8007e22:	2201      	movs	r2, #1
 8007e24:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007e28:	68f8      	ldr	r0, [r7, #12]
 8007e2a:	f000 f9af 	bl	800818c <I2C_WaitOnFlagUntilTimeout>
 8007e2e:	4603      	mov	r3, r0
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d001      	beq.n	8007e38 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8007e34:	2301      	movs	r3, #1
 8007e36:	e0d5      	b.n	8007fe4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	2222      	movs	r2, #34	; 0x22
 8007e3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	2240      	movs	r2, #64	; 0x40
 8007e44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	6a3a      	ldr	r2, [r7, #32]
 8007e52:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007e58:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007e60:	88f8      	ldrh	r0, [r7, #6]
 8007e62:	893a      	ldrh	r2, [r7, #8]
 8007e64:	8979      	ldrh	r1, [r7, #10]
 8007e66:	697b      	ldr	r3, [r7, #20]
 8007e68:	9301      	str	r3, [sp, #4]
 8007e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e6c:	9300      	str	r3, [sp, #0]
 8007e6e:	4603      	mov	r3, r0
 8007e70:	68f8      	ldr	r0, [r7, #12]
 8007e72:	f000 f913 	bl	800809c <I2C_RequestMemoryRead>
 8007e76:	4603      	mov	r3, r0
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d005      	beq.n	8007e88 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	2200      	movs	r2, #0
 8007e80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8007e84:	2301      	movs	r3, #1
 8007e86:	e0ad      	b.n	8007fe4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e8c:	b29b      	uxth	r3, r3
 8007e8e:	2bff      	cmp	r3, #255	; 0xff
 8007e90:	d90e      	bls.n	8007eb0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	22ff      	movs	r2, #255	; 0xff
 8007e96:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e9c:	b2da      	uxtb	r2, r3
 8007e9e:	8979      	ldrh	r1, [r7, #10]
 8007ea0:	4b52      	ldr	r3, [pc, #328]	; (8007fec <HAL_I2C_Mem_Read+0x22c>)
 8007ea2:	9300      	str	r3, [sp, #0]
 8007ea4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007ea8:	68f8      	ldr	r0, [r7, #12]
 8007eaa:	f000 fafd 	bl	80084a8 <I2C_TransferConfig>
 8007eae:	e00f      	b.n	8007ed0 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007eb4:	b29a      	uxth	r2, r3
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ebe:	b2da      	uxtb	r2, r3
 8007ec0:	8979      	ldrh	r1, [r7, #10]
 8007ec2:	4b4a      	ldr	r3, [pc, #296]	; (8007fec <HAL_I2C_Mem_Read+0x22c>)
 8007ec4:	9300      	str	r3, [sp, #0]
 8007ec6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007eca:	68f8      	ldr	r0, [r7, #12]
 8007ecc:	f000 faec 	bl	80084a8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8007ed0:	697b      	ldr	r3, [r7, #20]
 8007ed2:	9300      	str	r3, [sp, #0]
 8007ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	2104      	movs	r1, #4
 8007eda:	68f8      	ldr	r0, [r7, #12]
 8007edc:	f000 f956 	bl	800818c <I2C_WaitOnFlagUntilTimeout>
 8007ee0:	4603      	mov	r3, r0
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d001      	beq.n	8007eea <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8007ee6:	2301      	movs	r3, #1
 8007ee8:	e07c      	b.n	8007fe4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ef4:	b2d2      	uxtb	r2, r2
 8007ef6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007efc:	1c5a      	adds	r2, r3, #1
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f06:	3b01      	subs	r3, #1
 8007f08:	b29a      	uxth	r2, r3
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f12:	b29b      	uxth	r3, r3
 8007f14:	3b01      	subs	r3, #1
 8007f16:	b29a      	uxth	r2, r3
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f20:	b29b      	uxth	r3, r3
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d034      	beq.n	8007f90 <HAL_I2C_Mem_Read+0x1d0>
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d130      	bne.n	8007f90 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007f2e:	697b      	ldr	r3, [r7, #20]
 8007f30:	9300      	str	r3, [sp, #0]
 8007f32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f34:	2200      	movs	r2, #0
 8007f36:	2180      	movs	r1, #128	; 0x80
 8007f38:	68f8      	ldr	r0, [r7, #12]
 8007f3a:	f000 f927 	bl	800818c <I2C_WaitOnFlagUntilTimeout>
 8007f3e:	4603      	mov	r3, r0
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d001      	beq.n	8007f48 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8007f44:	2301      	movs	r3, #1
 8007f46:	e04d      	b.n	8007fe4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f4c:	b29b      	uxth	r3, r3
 8007f4e:	2bff      	cmp	r3, #255	; 0xff
 8007f50:	d90e      	bls.n	8007f70 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	22ff      	movs	r2, #255	; 0xff
 8007f56:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f5c:	b2da      	uxtb	r2, r3
 8007f5e:	8979      	ldrh	r1, [r7, #10]
 8007f60:	2300      	movs	r3, #0
 8007f62:	9300      	str	r3, [sp, #0]
 8007f64:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007f68:	68f8      	ldr	r0, [r7, #12]
 8007f6a:	f000 fa9d 	bl	80084a8 <I2C_TransferConfig>
 8007f6e:	e00f      	b.n	8007f90 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f74:	b29a      	uxth	r2, r3
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f7e:	b2da      	uxtb	r2, r3
 8007f80:	8979      	ldrh	r1, [r7, #10]
 8007f82:	2300      	movs	r3, #0
 8007f84:	9300      	str	r3, [sp, #0]
 8007f86:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007f8a:	68f8      	ldr	r0, [r7, #12]
 8007f8c:	f000 fa8c 	bl	80084a8 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f94:	b29b      	uxth	r3, r3
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d19a      	bne.n	8007ed0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007f9a:	697a      	ldr	r2, [r7, #20]
 8007f9c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007f9e:	68f8      	ldr	r0, [r7, #12]
 8007fa0:	f000 f974 	bl	800828c <I2C_WaitOnSTOPFlagUntilTimeout>
 8007fa4:	4603      	mov	r3, r0
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d001      	beq.n	8007fae <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8007faa:	2301      	movs	r3, #1
 8007fac:	e01a      	b.n	8007fe4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	2220      	movs	r2, #32
 8007fb4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	6859      	ldr	r1, [r3, #4]
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	681a      	ldr	r2, [r3, #0]
 8007fc0:	4b0b      	ldr	r3, [pc, #44]	; (8007ff0 <HAL_I2C_Mem_Read+0x230>)
 8007fc2:	400b      	ands	r3, r1
 8007fc4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	2220      	movs	r2, #32
 8007fca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	2200      	movs	r2, #0
 8007fda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007fde:	2300      	movs	r3, #0
 8007fe0:	e000      	b.n	8007fe4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8007fe2:	2302      	movs	r3, #2
  }
}
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	3718      	adds	r7, #24
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	bd80      	pop	{r7, pc}
 8007fec:	80002400 	.word	0x80002400
 8007ff0:	fe00e800 	.word	0xfe00e800

08007ff4 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b086      	sub	sp, #24
 8007ff8:	af02      	add	r7, sp, #8
 8007ffa:	60f8      	str	r0, [r7, #12]
 8007ffc:	4608      	mov	r0, r1
 8007ffe:	4611      	mov	r1, r2
 8008000:	461a      	mov	r2, r3
 8008002:	4603      	mov	r3, r0
 8008004:	817b      	strh	r3, [r7, #10]
 8008006:	460b      	mov	r3, r1
 8008008:	813b      	strh	r3, [r7, #8]
 800800a:	4613      	mov	r3, r2
 800800c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800800e:	88fb      	ldrh	r3, [r7, #6]
 8008010:	b2da      	uxtb	r2, r3
 8008012:	8979      	ldrh	r1, [r7, #10]
 8008014:	4b20      	ldr	r3, [pc, #128]	; (8008098 <I2C_RequestMemoryWrite+0xa4>)
 8008016:	9300      	str	r3, [sp, #0]
 8008018:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800801c:	68f8      	ldr	r0, [r7, #12]
 800801e:	f000 fa43 	bl	80084a8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008022:	69fa      	ldr	r2, [r7, #28]
 8008024:	69b9      	ldr	r1, [r7, #24]
 8008026:	68f8      	ldr	r0, [r7, #12]
 8008028:	f000 f8f0 	bl	800820c <I2C_WaitOnTXISFlagUntilTimeout>
 800802c:	4603      	mov	r3, r0
 800802e:	2b00      	cmp	r3, #0
 8008030:	d001      	beq.n	8008036 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8008032:	2301      	movs	r3, #1
 8008034:	e02c      	b.n	8008090 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008036:	88fb      	ldrh	r3, [r7, #6]
 8008038:	2b01      	cmp	r3, #1
 800803a:	d105      	bne.n	8008048 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800803c:	893b      	ldrh	r3, [r7, #8]
 800803e:	b2da      	uxtb	r2, r3
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	629a      	str	r2, [r3, #40]	; 0x28
 8008046:	e015      	b.n	8008074 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008048:	893b      	ldrh	r3, [r7, #8]
 800804a:	0a1b      	lsrs	r3, r3, #8
 800804c:	b29b      	uxth	r3, r3
 800804e:	b2da      	uxtb	r2, r3
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008056:	69fa      	ldr	r2, [r7, #28]
 8008058:	69b9      	ldr	r1, [r7, #24]
 800805a:	68f8      	ldr	r0, [r7, #12]
 800805c:	f000 f8d6 	bl	800820c <I2C_WaitOnTXISFlagUntilTimeout>
 8008060:	4603      	mov	r3, r0
 8008062:	2b00      	cmp	r3, #0
 8008064:	d001      	beq.n	800806a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8008066:	2301      	movs	r3, #1
 8008068:	e012      	b.n	8008090 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800806a:	893b      	ldrh	r3, [r7, #8]
 800806c:	b2da      	uxtb	r2, r3
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8008074:	69fb      	ldr	r3, [r7, #28]
 8008076:	9300      	str	r3, [sp, #0]
 8008078:	69bb      	ldr	r3, [r7, #24]
 800807a:	2200      	movs	r2, #0
 800807c:	2180      	movs	r1, #128	; 0x80
 800807e:	68f8      	ldr	r0, [r7, #12]
 8008080:	f000 f884 	bl	800818c <I2C_WaitOnFlagUntilTimeout>
 8008084:	4603      	mov	r3, r0
 8008086:	2b00      	cmp	r3, #0
 8008088:	d001      	beq.n	800808e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800808a:	2301      	movs	r3, #1
 800808c:	e000      	b.n	8008090 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800808e:	2300      	movs	r3, #0
}
 8008090:	4618      	mov	r0, r3
 8008092:	3710      	adds	r7, #16
 8008094:	46bd      	mov	sp, r7
 8008096:	bd80      	pop	{r7, pc}
 8008098:	80002000 	.word	0x80002000

0800809c <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800809c:	b580      	push	{r7, lr}
 800809e:	b086      	sub	sp, #24
 80080a0:	af02      	add	r7, sp, #8
 80080a2:	60f8      	str	r0, [r7, #12]
 80080a4:	4608      	mov	r0, r1
 80080a6:	4611      	mov	r1, r2
 80080a8:	461a      	mov	r2, r3
 80080aa:	4603      	mov	r3, r0
 80080ac:	817b      	strh	r3, [r7, #10]
 80080ae:	460b      	mov	r3, r1
 80080b0:	813b      	strh	r3, [r7, #8]
 80080b2:	4613      	mov	r3, r2
 80080b4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80080b6:	88fb      	ldrh	r3, [r7, #6]
 80080b8:	b2da      	uxtb	r2, r3
 80080ba:	8979      	ldrh	r1, [r7, #10]
 80080bc:	4b20      	ldr	r3, [pc, #128]	; (8008140 <I2C_RequestMemoryRead+0xa4>)
 80080be:	9300      	str	r3, [sp, #0]
 80080c0:	2300      	movs	r3, #0
 80080c2:	68f8      	ldr	r0, [r7, #12]
 80080c4:	f000 f9f0 	bl	80084a8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80080c8:	69fa      	ldr	r2, [r7, #28]
 80080ca:	69b9      	ldr	r1, [r7, #24]
 80080cc:	68f8      	ldr	r0, [r7, #12]
 80080ce:	f000 f89d 	bl	800820c <I2C_WaitOnTXISFlagUntilTimeout>
 80080d2:	4603      	mov	r3, r0
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d001      	beq.n	80080dc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80080d8:	2301      	movs	r3, #1
 80080da:	e02c      	b.n	8008136 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80080dc:	88fb      	ldrh	r3, [r7, #6]
 80080de:	2b01      	cmp	r3, #1
 80080e0:	d105      	bne.n	80080ee <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80080e2:	893b      	ldrh	r3, [r7, #8]
 80080e4:	b2da      	uxtb	r2, r3
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	629a      	str	r2, [r3, #40]	; 0x28
 80080ec:	e015      	b.n	800811a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80080ee:	893b      	ldrh	r3, [r7, #8]
 80080f0:	0a1b      	lsrs	r3, r3, #8
 80080f2:	b29b      	uxth	r3, r3
 80080f4:	b2da      	uxtb	r2, r3
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80080fc:	69fa      	ldr	r2, [r7, #28]
 80080fe:	69b9      	ldr	r1, [r7, #24]
 8008100:	68f8      	ldr	r0, [r7, #12]
 8008102:	f000 f883 	bl	800820c <I2C_WaitOnTXISFlagUntilTimeout>
 8008106:	4603      	mov	r3, r0
 8008108:	2b00      	cmp	r3, #0
 800810a:	d001      	beq.n	8008110 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800810c:	2301      	movs	r3, #1
 800810e:	e012      	b.n	8008136 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008110:	893b      	ldrh	r3, [r7, #8]
 8008112:	b2da      	uxtb	r2, r3
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800811a:	69fb      	ldr	r3, [r7, #28]
 800811c:	9300      	str	r3, [sp, #0]
 800811e:	69bb      	ldr	r3, [r7, #24]
 8008120:	2200      	movs	r2, #0
 8008122:	2140      	movs	r1, #64	; 0x40
 8008124:	68f8      	ldr	r0, [r7, #12]
 8008126:	f000 f831 	bl	800818c <I2C_WaitOnFlagUntilTimeout>
 800812a:	4603      	mov	r3, r0
 800812c:	2b00      	cmp	r3, #0
 800812e:	d001      	beq.n	8008134 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8008130:	2301      	movs	r3, #1
 8008132:	e000      	b.n	8008136 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8008134:	2300      	movs	r3, #0
}
 8008136:	4618      	mov	r0, r3
 8008138:	3710      	adds	r7, #16
 800813a:	46bd      	mov	sp, r7
 800813c:	bd80      	pop	{r7, pc}
 800813e:	bf00      	nop
 8008140:	80002000 	.word	0x80002000

08008144 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8008144:	b480      	push	{r7}
 8008146:	b083      	sub	sp, #12
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	699b      	ldr	r3, [r3, #24]
 8008152:	f003 0302 	and.w	r3, r3, #2
 8008156:	2b02      	cmp	r3, #2
 8008158:	d103      	bne.n	8008162 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	2200      	movs	r2, #0
 8008160:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	699b      	ldr	r3, [r3, #24]
 8008168:	f003 0301 	and.w	r3, r3, #1
 800816c:	2b01      	cmp	r3, #1
 800816e:	d007      	beq.n	8008180 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	699a      	ldr	r2, [r3, #24]
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	f042 0201 	orr.w	r2, r2, #1
 800817e:	619a      	str	r2, [r3, #24]
  }
}
 8008180:	bf00      	nop
 8008182:	370c      	adds	r7, #12
 8008184:	46bd      	mov	sp, r7
 8008186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818a:	4770      	bx	lr

0800818c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800818c:	b580      	push	{r7, lr}
 800818e:	b084      	sub	sp, #16
 8008190:	af00      	add	r7, sp, #0
 8008192:	60f8      	str	r0, [r7, #12]
 8008194:	60b9      	str	r1, [r7, #8]
 8008196:	603b      	str	r3, [r7, #0]
 8008198:	4613      	mov	r3, r2
 800819a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800819c:	e022      	b.n	80081e4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800819e:	683b      	ldr	r3, [r7, #0]
 80081a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081a4:	d01e      	beq.n	80081e4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80081a6:	f7fe feff 	bl	8006fa8 <HAL_GetTick>
 80081aa:	4602      	mov	r2, r0
 80081ac:	69bb      	ldr	r3, [r7, #24]
 80081ae:	1ad3      	subs	r3, r2, r3
 80081b0:	683a      	ldr	r2, [r7, #0]
 80081b2:	429a      	cmp	r2, r3
 80081b4:	d302      	bcc.n	80081bc <I2C_WaitOnFlagUntilTimeout+0x30>
 80081b6:	683b      	ldr	r3, [r7, #0]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d113      	bne.n	80081e4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081c0:	f043 0220 	orr.w	r2, r3, #32
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	2220      	movs	r2, #32
 80081cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	2200      	movs	r2, #0
 80081d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	2200      	movs	r2, #0
 80081dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80081e0:	2301      	movs	r3, #1
 80081e2:	e00f      	b.n	8008204 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	699a      	ldr	r2, [r3, #24]
 80081ea:	68bb      	ldr	r3, [r7, #8]
 80081ec:	4013      	ands	r3, r2
 80081ee:	68ba      	ldr	r2, [r7, #8]
 80081f0:	429a      	cmp	r2, r3
 80081f2:	bf0c      	ite	eq
 80081f4:	2301      	moveq	r3, #1
 80081f6:	2300      	movne	r3, #0
 80081f8:	b2db      	uxtb	r3, r3
 80081fa:	461a      	mov	r2, r3
 80081fc:	79fb      	ldrb	r3, [r7, #7]
 80081fe:	429a      	cmp	r2, r3
 8008200:	d0cd      	beq.n	800819e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008202:	2300      	movs	r3, #0
}
 8008204:	4618      	mov	r0, r3
 8008206:	3710      	adds	r7, #16
 8008208:	46bd      	mov	sp, r7
 800820a:	bd80      	pop	{r7, pc}

0800820c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800820c:	b580      	push	{r7, lr}
 800820e:	b084      	sub	sp, #16
 8008210:	af00      	add	r7, sp, #0
 8008212:	60f8      	str	r0, [r7, #12]
 8008214:	60b9      	str	r1, [r7, #8]
 8008216:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008218:	e02c      	b.n	8008274 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800821a:	687a      	ldr	r2, [r7, #4]
 800821c:	68b9      	ldr	r1, [r7, #8]
 800821e:	68f8      	ldr	r0, [r7, #12]
 8008220:	f000 f8dc 	bl	80083dc <I2C_IsAcknowledgeFailed>
 8008224:	4603      	mov	r3, r0
 8008226:	2b00      	cmp	r3, #0
 8008228:	d001      	beq.n	800822e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800822a:	2301      	movs	r3, #1
 800822c:	e02a      	b.n	8008284 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800822e:	68bb      	ldr	r3, [r7, #8]
 8008230:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008234:	d01e      	beq.n	8008274 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008236:	f7fe feb7 	bl	8006fa8 <HAL_GetTick>
 800823a:	4602      	mov	r2, r0
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	1ad3      	subs	r3, r2, r3
 8008240:	68ba      	ldr	r2, [r7, #8]
 8008242:	429a      	cmp	r2, r3
 8008244:	d302      	bcc.n	800824c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8008246:	68bb      	ldr	r3, [r7, #8]
 8008248:	2b00      	cmp	r3, #0
 800824a:	d113      	bne.n	8008274 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008250:	f043 0220 	orr.w	r2, r3, #32
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	2220      	movs	r2, #32
 800825c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	2200      	movs	r2, #0
 8008264:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	2200      	movs	r2, #0
 800826c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8008270:	2301      	movs	r3, #1
 8008272:	e007      	b.n	8008284 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	699b      	ldr	r3, [r3, #24]
 800827a:	f003 0302 	and.w	r3, r3, #2
 800827e:	2b02      	cmp	r3, #2
 8008280:	d1cb      	bne.n	800821a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008282:	2300      	movs	r3, #0
}
 8008284:	4618      	mov	r0, r3
 8008286:	3710      	adds	r7, #16
 8008288:	46bd      	mov	sp, r7
 800828a:	bd80      	pop	{r7, pc}

0800828c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800828c:	b580      	push	{r7, lr}
 800828e:	b084      	sub	sp, #16
 8008290:	af00      	add	r7, sp, #0
 8008292:	60f8      	str	r0, [r7, #12]
 8008294:	60b9      	str	r1, [r7, #8]
 8008296:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008298:	e028      	b.n	80082ec <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800829a:	687a      	ldr	r2, [r7, #4]
 800829c:	68b9      	ldr	r1, [r7, #8]
 800829e:	68f8      	ldr	r0, [r7, #12]
 80082a0:	f000 f89c 	bl	80083dc <I2C_IsAcknowledgeFailed>
 80082a4:	4603      	mov	r3, r0
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d001      	beq.n	80082ae <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80082aa:	2301      	movs	r3, #1
 80082ac:	e026      	b.n	80082fc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80082ae:	f7fe fe7b 	bl	8006fa8 <HAL_GetTick>
 80082b2:	4602      	mov	r2, r0
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	1ad3      	subs	r3, r2, r3
 80082b8:	68ba      	ldr	r2, [r7, #8]
 80082ba:	429a      	cmp	r2, r3
 80082bc:	d302      	bcc.n	80082c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80082be:	68bb      	ldr	r3, [r7, #8]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d113      	bne.n	80082ec <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082c8:	f043 0220 	orr.w	r2, r3, #32
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	2220      	movs	r2, #32
 80082d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	2200      	movs	r2, #0
 80082dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	2200      	movs	r2, #0
 80082e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80082e8:	2301      	movs	r3, #1
 80082ea:	e007      	b.n	80082fc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	699b      	ldr	r3, [r3, #24]
 80082f2:	f003 0320 	and.w	r3, r3, #32
 80082f6:	2b20      	cmp	r3, #32
 80082f8:	d1cf      	bne.n	800829a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80082fa:	2300      	movs	r3, #0
}
 80082fc:	4618      	mov	r0, r3
 80082fe:	3710      	adds	r7, #16
 8008300:	46bd      	mov	sp, r7
 8008302:	bd80      	pop	{r7, pc}

08008304 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008304:	b580      	push	{r7, lr}
 8008306:	b084      	sub	sp, #16
 8008308:	af00      	add	r7, sp, #0
 800830a:	60f8      	str	r0, [r7, #12]
 800830c:	60b9      	str	r1, [r7, #8]
 800830e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008310:	e055      	b.n	80083be <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8008312:	687a      	ldr	r2, [r7, #4]
 8008314:	68b9      	ldr	r1, [r7, #8]
 8008316:	68f8      	ldr	r0, [r7, #12]
 8008318:	f000 f860 	bl	80083dc <I2C_IsAcknowledgeFailed>
 800831c:	4603      	mov	r3, r0
 800831e:	2b00      	cmp	r3, #0
 8008320:	d001      	beq.n	8008326 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008322:	2301      	movs	r3, #1
 8008324:	e053      	b.n	80083ce <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	699b      	ldr	r3, [r3, #24]
 800832c:	f003 0320 	and.w	r3, r3, #32
 8008330:	2b20      	cmp	r3, #32
 8008332:	d129      	bne.n	8008388 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	699b      	ldr	r3, [r3, #24]
 800833a:	f003 0304 	and.w	r3, r3, #4
 800833e:	2b04      	cmp	r3, #4
 8008340:	d105      	bne.n	800834e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008346:	2b00      	cmp	r3, #0
 8008348:	d001      	beq.n	800834e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800834a:	2300      	movs	r3, #0
 800834c:	e03f      	b.n	80083ce <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	2220      	movs	r2, #32
 8008354:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	6859      	ldr	r1, [r3, #4]
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	681a      	ldr	r2, [r3, #0]
 8008360:	4b1d      	ldr	r3, [pc, #116]	; (80083d8 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8008362:	400b      	ands	r3, r1
 8008364:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	2200      	movs	r2, #0
 800836a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	2220      	movs	r2, #32
 8008370:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	2200      	movs	r2, #0
 8008378:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	2200      	movs	r2, #0
 8008380:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8008384:	2301      	movs	r3, #1
 8008386:	e022      	b.n	80083ce <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008388:	f7fe fe0e 	bl	8006fa8 <HAL_GetTick>
 800838c:	4602      	mov	r2, r0
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	1ad3      	subs	r3, r2, r3
 8008392:	68ba      	ldr	r2, [r7, #8]
 8008394:	429a      	cmp	r2, r3
 8008396:	d302      	bcc.n	800839e <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8008398:	68bb      	ldr	r3, [r7, #8]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d10f      	bne.n	80083be <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083a2:	f043 0220 	orr.w	r2, r3, #32
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	2220      	movs	r2, #32
 80083ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	2200      	movs	r2, #0
 80083b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80083ba:	2301      	movs	r3, #1
 80083bc:	e007      	b.n	80083ce <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	699b      	ldr	r3, [r3, #24]
 80083c4:	f003 0304 	and.w	r3, r3, #4
 80083c8:	2b04      	cmp	r3, #4
 80083ca:	d1a2      	bne.n	8008312 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80083cc:	2300      	movs	r3, #0
}
 80083ce:	4618      	mov	r0, r3
 80083d0:	3710      	adds	r7, #16
 80083d2:	46bd      	mov	sp, r7
 80083d4:	bd80      	pop	{r7, pc}
 80083d6:	bf00      	nop
 80083d8:	fe00e800 	.word	0xfe00e800

080083dc <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80083dc:	b580      	push	{r7, lr}
 80083de:	b084      	sub	sp, #16
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	60f8      	str	r0, [r7, #12]
 80083e4:	60b9      	str	r1, [r7, #8]
 80083e6:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	699b      	ldr	r3, [r3, #24]
 80083ee:	f003 0310 	and.w	r3, r3, #16
 80083f2:	2b10      	cmp	r3, #16
 80083f4:	d151      	bne.n	800849a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80083f6:	e022      	b.n	800843e <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80083f8:	68bb      	ldr	r3, [r7, #8]
 80083fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083fe:	d01e      	beq.n	800843e <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008400:	f7fe fdd2 	bl	8006fa8 <HAL_GetTick>
 8008404:	4602      	mov	r2, r0
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	1ad3      	subs	r3, r2, r3
 800840a:	68ba      	ldr	r2, [r7, #8]
 800840c:	429a      	cmp	r2, r3
 800840e:	d302      	bcc.n	8008416 <I2C_IsAcknowledgeFailed+0x3a>
 8008410:	68bb      	ldr	r3, [r7, #8]
 8008412:	2b00      	cmp	r3, #0
 8008414:	d113      	bne.n	800843e <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800841a:	f043 0220 	orr.w	r2, r3, #32
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	2220      	movs	r2, #32
 8008426:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	2200      	movs	r2, #0
 800842e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	2200      	movs	r2, #0
 8008436:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800843a:	2301      	movs	r3, #1
 800843c:	e02e      	b.n	800849c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	699b      	ldr	r3, [r3, #24]
 8008444:	f003 0320 	and.w	r3, r3, #32
 8008448:	2b20      	cmp	r3, #32
 800844a:	d1d5      	bne.n	80083f8 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	2210      	movs	r2, #16
 8008452:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	2220      	movs	r2, #32
 800845a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800845c:	68f8      	ldr	r0, [r7, #12]
 800845e:	f7ff fe71 	bl	8008144 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	6859      	ldr	r1, [r3, #4]
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	681a      	ldr	r2, [r3, #0]
 800846c:	4b0d      	ldr	r3, [pc, #52]	; (80084a4 <I2C_IsAcknowledgeFailed+0xc8>)
 800846e:	400b      	ands	r3, r1
 8008470:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008476:	f043 0204 	orr.w	r2, r3, #4
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	2220      	movs	r2, #32
 8008482:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	2200      	movs	r2, #0
 800848a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	2200      	movs	r2, #0
 8008492:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8008496:	2301      	movs	r3, #1
 8008498:	e000      	b.n	800849c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800849a:	2300      	movs	r3, #0
}
 800849c:	4618      	mov	r0, r3
 800849e:	3710      	adds	r7, #16
 80084a0:	46bd      	mov	sp, r7
 80084a2:	bd80      	pop	{r7, pc}
 80084a4:	fe00e800 	.word	0xfe00e800

080084a8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80084a8:	b480      	push	{r7}
 80084aa:	b085      	sub	sp, #20
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	60f8      	str	r0, [r7, #12]
 80084b0:	607b      	str	r3, [r7, #4]
 80084b2:	460b      	mov	r3, r1
 80084b4:	817b      	strh	r3, [r7, #10]
 80084b6:	4613      	mov	r3, r2
 80084b8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	685a      	ldr	r2, [r3, #4]
 80084c0:	69bb      	ldr	r3, [r7, #24]
 80084c2:	0d5b      	lsrs	r3, r3, #21
 80084c4:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80084c8:	4b0d      	ldr	r3, [pc, #52]	; (8008500 <I2C_TransferConfig+0x58>)
 80084ca:	430b      	orrs	r3, r1
 80084cc:	43db      	mvns	r3, r3
 80084ce:	ea02 0103 	and.w	r1, r2, r3
 80084d2:	897b      	ldrh	r3, [r7, #10]
 80084d4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80084d8:	7a7b      	ldrb	r3, [r7, #9]
 80084da:	041b      	lsls	r3, r3, #16
 80084dc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80084e0:	431a      	orrs	r2, r3
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	431a      	orrs	r2, r3
 80084e6:	69bb      	ldr	r3, [r7, #24]
 80084e8:	431a      	orrs	r2, r3
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	430a      	orrs	r2, r1
 80084f0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80084f2:	bf00      	nop
 80084f4:	3714      	adds	r7, #20
 80084f6:	46bd      	mov	sp, r7
 80084f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fc:	4770      	bx	lr
 80084fe:	bf00      	nop
 8008500:	03ff63ff 	.word	0x03ff63ff

08008504 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008504:	b480      	push	{r7}
 8008506:	b083      	sub	sp, #12
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
 800850c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008514:	b2db      	uxtb	r3, r3
 8008516:	2b20      	cmp	r3, #32
 8008518:	d138      	bne.n	800858c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008520:	2b01      	cmp	r3, #1
 8008522:	d101      	bne.n	8008528 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008524:	2302      	movs	r3, #2
 8008526:	e032      	b.n	800858e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	2201      	movs	r2, #1
 800852c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	2224      	movs	r2, #36	; 0x24
 8008534:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	681a      	ldr	r2, [r3, #0]
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	f022 0201 	bic.w	r2, r2, #1
 8008546:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	681a      	ldr	r2, [r3, #0]
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008556:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	6819      	ldr	r1, [r3, #0]
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	683a      	ldr	r2, [r7, #0]
 8008564:	430a      	orrs	r2, r1
 8008566:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	681a      	ldr	r2, [r3, #0]
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	f042 0201 	orr.w	r2, r2, #1
 8008576:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	2220      	movs	r2, #32
 800857c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	2200      	movs	r2, #0
 8008584:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008588:	2300      	movs	r3, #0
 800858a:	e000      	b.n	800858e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800858c:	2302      	movs	r3, #2
  }
}
 800858e:	4618      	mov	r0, r3
 8008590:	370c      	adds	r7, #12
 8008592:	46bd      	mov	sp, r7
 8008594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008598:	4770      	bx	lr
	...

0800859c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800859c:	b480      	push	{r7}
 800859e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80085a0:	4b05      	ldr	r3, [pc, #20]	; (80085b8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	4a04      	ldr	r2, [pc, #16]	; (80085b8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80085a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80085aa:	6013      	str	r3, [r2, #0]
}
 80085ac:	bf00      	nop
 80085ae:	46bd      	mov	sp, r7
 80085b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b4:	4770      	bx	lr
 80085b6:	bf00      	nop
 80085b8:	40007000 	.word	0x40007000

080085bc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80085bc:	b480      	push	{r7}
 80085be:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80085c0:	4b04      	ldr	r3, [pc, #16]	; (80085d4 <HAL_PWREx_GetVoltageRange+0x18>)
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80085c8:	4618      	mov	r0, r3
 80085ca:	46bd      	mov	sp, r7
 80085cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d0:	4770      	bx	lr
 80085d2:	bf00      	nop
 80085d4:	40007000 	.word	0x40007000

080085d8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80085d8:	b480      	push	{r7}
 80085da:	b085      	sub	sp, #20
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80085e6:	d130      	bne.n	800864a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80085e8:	4b23      	ldr	r3, [pc, #140]	; (8008678 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80085f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80085f4:	d038      	beq.n	8008668 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80085f6:	4b20      	ldr	r3, [pc, #128]	; (8008678 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80085fe:	4a1e      	ldr	r2, [pc, #120]	; (8008678 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008600:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008604:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008606:	4b1d      	ldr	r3, [pc, #116]	; (800867c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	2232      	movs	r2, #50	; 0x32
 800860c:	fb02 f303 	mul.w	r3, r2, r3
 8008610:	4a1b      	ldr	r2, [pc, #108]	; (8008680 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8008612:	fba2 2303 	umull	r2, r3, r2, r3
 8008616:	0c9b      	lsrs	r3, r3, #18
 8008618:	3301      	adds	r3, #1
 800861a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800861c:	e002      	b.n	8008624 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	3b01      	subs	r3, #1
 8008622:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008624:	4b14      	ldr	r3, [pc, #80]	; (8008678 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008626:	695b      	ldr	r3, [r3, #20]
 8008628:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800862c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008630:	d102      	bne.n	8008638 <HAL_PWREx_ControlVoltageScaling+0x60>
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	2b00      	cmp	r3, #0
 8008636:	d1f2      	bne.n	800861e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008638:	4b0f      	ldr	r3, [pc, #60]	; (8008678 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800863a:	695b      	ldr	r3, [r3, #20]
 800863c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008640:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008644:	d110      	bne.n	8008668 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8008646:	2303      	movs	r3, #3
 8008648:	e00f      	b.n	800866a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800864a:	4b0b      	ldr	r3, [pc, #44]	; (8008678 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008652:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008656:	d007      	beq.n	8008668 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8008658:	4b07      	ldr	r3, [pc, #28]	; (8008678 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8008660:	4a05      	ldr	r2, [pc, #20]	; (8008678 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008662:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008666:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8008668:	2300      	movs	r3, #0
}
 800866a:	4618      	mov	r0, r3
 800866c:	3714      	adds	r7, #20
 800866e:	46bd      	mov	sp, r7
 8008670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008674:	4770      	bx	lr
 8008676:	bf00      	nop
 8008678:	40007000 	.word	0x40007000
 800867c:	20000000 	.word	0x20000000
 8008680:	431bde83 	.word	0x431bde83

08008684 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008684:	b580      	push	{r7, lr}
 8008686:	b088      	sub	sp, #32
 8008688:	af00      	add	r7, sp, #0
 800868a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d101      	bne.n	8008696 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008692:	2301      	movs	r3, #1
 8008694:	e3d4      	b.n	8008e40 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008696:	4ba1      	ldr	r3, [pc, #644]	; (800891c <HAL_RCC_OscConfig+0x298>)
 8008698:	689b      	ldr	r3, [r3, #8]
 800869a:	f003 030c 	and.w	r3, r3, #12
 800869e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80086a0:	4b9e      	ldr	r3, [pc, #632]	; (800891c <HAL_RCC_OscConfig+0x298>)
 80086a2:	68db      	ldr	r3, [r3, #12]
 80086a4:	f003 0303 	and.w	r3, r3, #3
 80086a8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	f003 0310 	and.w	r3, r3, #16
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	f000 80e4 	beq.w	8008880 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80086b8:	69bb      	ldr	r3, [r7, #24]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d007      	beq.n	80086ce <HAL_RCC_OscConfig+0x4a>
 80086be:	69bb      	ldr	r3, [r7, #24]
 80086c0:	2b0c      	cmp	r3, #12
 80086c2:	f040 808b 	bne.w	80087dc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80086c6:	697b      	ldr	r3, [r7, #20]
 80086c8:	2b01      	cmp	r3, #1
 80086ca:	f040 8087 	bne.w	80087dc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80086ce:	4b93      	ldr	r3, [pc, #588]	; (800891c <HAL_RCC_OscConfig+0x298>)
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	f003 0302 	and.w	r3, r3, #2
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d005      	beq.n	80086e6 <HAL_RCC_OscConfig+0x62>
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	699b      	ldr	r3, [r3, #24]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d101      	bne.n	80086e6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80086e2:	2301      	movs	r3, #1
 80086e4:	e3ac      	b.n	8008e40 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	6a1a      	ldr	r2, [r3, #32]
 80086ea:	4b8c      	ldr	r3, [pc, #560]	; (800891c <HAL_RCC_OscConfig+0x298>)
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	f003 0308 	and.w	r3, r3, #8
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d004      	beq.n	8008700 <HAL_RCC_OscConfig+0x7c>
 80086f6:	4b89      	ldr	r3, [pc, #548]	; (800891c <HAL_RCC_OscConfig+0x298>)
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80086fe:	e005      	b.n	800870c <HAL_RCC_OscConfig+0x88>
 8008700:	4b86      	ldr	r3, [pc, #536]	; (800891c <HAL_RCC_OscConfig+0x298>)
 8008702:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008706:	091b      	lsrs	r3, r3, #4
 8008708:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800870c:	4293      	cmp	r3, r2
 800870e:	d223      	bcs.n	8008758 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	6a1b      	ldr	r3, [r3, #32]
 8008714:	4618      	mov	r0, r3
 8008716:	f000 fd3f 	bl	8009198 <RCC_SetFlashLatencyFromMSIRange>
 800871a:	4603      	mov	r3, r0
 800871c:	2b00      	cmp	r3, #0
 800871e:	d001      	beq.n	8008724 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8008720:	2301      	movs	r3, #1
 8008722:	e38d      	b.n	8008e40 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008724:	4b7d      	ldr	r3, [pc, #500]	; (800891c <HAL_RCC_OscConfig+0x298>)
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	4a7c      	ldr	r2, [pc, #496]	; (800891c <HAL_RCC_OscConfig+0x298>)
 800872a:	f043 0308 	orr.w	r3, r3, #8
 800872e:	6013      	str	r3, [r2, #0]
 8008730:	4b7a      	ldr	r3, [pc, #488]	; (800891c <HAL_RCC_OscConfig+0x298>)
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	6a1b      	ldr	r3, [r3, #32]
 800873c:	4977      	ldr	r1, [pc, #476]	; (800891c <HAL_RCC_OscConfig+0x298>)
 800873e:	4313      	orrs	r3, r2
 8008740:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008742:	4b76      	ldr	r3, [pc, #472]	; (800891c <HAL_RCC_OscConfig+0x298>)
 8008744:	685b      	ldr	r3, [r3, #4]
 8008746:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	69db      	ldr	r3, [r3, #28]
 800874e:	021b      	lsls	r3, r3, #8
 8008750:	4972      	ldr	r1, [pc, #456]	; (800891c <HAL_RCC_OscConfig+0x298>)
 8008752:	4313      	orrs	r3, r2
 8008754:	604b      	str	r3, [r1, #4]
 8008756:	e025      	b.n	80087a4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008758:	4b70      	ldr	r3, [pc, #448]	; (800891c <HAL_RCC_OscConfig+0x298>)
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	4a6f      	ldr	r2, [pc, #444]	; (800891c <HAL_RCC_OscConfig+0x298>)
 800875e:	f043 0308 	orr.w	r3, r3, #8
 8008762:	6013      	str	r3, [r2, #0]
 8008764:	4b6d      	ldr	r3, [pc, #436]	; (800891c <HAL_RCC_OscConfig+0x298>)
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	6a1b      	ldr	r3, [r3, #32]
 8008770:	496a      	ldr	r1, [pc, #424]	; (800891c <HAL_RCC_OscConfig+0x298>)
 8008772:	4313      	orrs	r3, r2
 8008774:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008776:	4b69      	ldr	r3, [pc, #420]	; (800891c <HAL_RCC_OscConfig+0x298>)
 8008778:	685b      	ldr	r3, [r3, #4]
 800877a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	69db      	ldr	r3, [r3, #28]
 8008782:	021b      	lsls	r3, r3, #8
 8008784:	4965      	ldr	r1, [pc, #404]	; (800891c <HAL_RCC_OscConfig+0x298>)
 8008786:	4313      	orrs	r3, r2
 8008788:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800878a:	69bb      	ldr	r3, [r7, #24]
 800878c:	2b00      	cmp	r3, #0
 800878e:	d109      	bne.n	80087a4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	6a1b      	ldr	r3, [r3, #32]
 8008794:	4618      	mov	r0, r3
 8008796:	f000 fcff 	bl	8009198 <RCC_SetFlashLatencyFromMSIRange>
 800879a:	4603      	mov	r3, r0
 800879c:	2b00      	cmp	r3, #0
 800879e:	d001      	beq.n	80087a4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80087a0:	2301      	movs	r3, #1
 80087a2:	e34d      	b.n	8008e40 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80087a4:	f000 fc36 	bl	8009014 <HAL_RCC_GetSysClockFreq>
 80087a8:	4601      	mov	r1, r0
 80087aa:	4b5c      	ldr	r3, [pc, #368]	; (800891c <HAL_RCC_OscConfig+0x298>)
 80087ac:	689b      	ldr	r3, [r3, #8]
 80087ae:	091b      	lsrs	r3, r3, #4
 80087b0:	f003 030f 	and.w	r3, r3, #15
 80087b4:	4a5a      	ldr	r2, [pc, #360]	; (8008920 <HAL_RCC_OscConfig+0x29c>)
 80087b6:	5cd3      	ldrb	r3, [r2, r3]
 80087b8:	f003 031f 	and.w	r3, r3, #31
 80087bc:	fa21 f303 	lsr.w	r3, r1, r3
 80087c0:	4a58      	ldr	r2, [pc, #352]	; (8008924 <HAL_RCC_OscConfig+0x2a0>)
 80087c2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80087c4:	4b58      	ldr	r3, [pc, #352]	; (8008928 <HAL_RCC_OscConfig+0x2a4>)
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	4618      	mov	r0, r3
 80087ca:	f7fe fb9d 	bl	8006f08 <HAL_InitTick>
 80087ce:	4603      	mov	r3, r0
 80087d0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80087d2:	7bfb      	ldrb	r3, [r7, #15]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d052      	beq.n	800887e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80087d8:	7bfb      	ldrb	r3, [r7, #15]
 80087da:	e331      	b.n	8008e40 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	699b      	ldr	r3, [r3, #24]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d032      	beq.n	800884a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80087e4:	4b4d      	ldr	r3, [pc, #308]	; (800891c <HAL_RCC_OscConfig+0x298>)
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	4a4c      	ldr	r2, [pc, #304]	; (800891c <HAL_RCC_OscConfig+0x298>)
 80087ea:	f043 0301 	orr.w	r3, r3, #1
 80087ee:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80087f0:	f7fe fbda 	bl	8006fa8 <HAL_GetTick>
 80087f4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80087f6:	e008      	b.n	800880a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80087f8:	f7fe fbd6 	bl	8006fa8 <HAL_GetTick>
 80087fc:	4602      	mov	r2, r0
 80087fe:	693b      	ldr	r3, [r7, #16]
 8008800:	1ad3      	subs	r3, r2, r3
 8008802:	2b02      	cmp	r3, #2
 8008804:	d901      	bls.n	800880a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8008806:	2303      	movs	r3, #3
 8008808:	e31a      	b.n	8008e40 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800880a:	4b44      	ldr	r3, [pc, #272]	; (800891c <HAL_RCC_OscConfig+0x298>)
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	f003 0302 	and.w	r3, r3, #2
 8008812:	2b00      	cmp	r3, #0
 8008814:	d0f0      	beq.n	80087f8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008816:	4b41      	ldr	r3, [pc, #260]	; (800891c <HAL_RCC_OscConfig+0x298>)
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	4a40      	ldr	r2, [pc, #256]	; (800891c <HAL_RCC_OscConfig+0x298>)
 800881c:	f043 0308 	orr.w	r3, r3, #8
 8008820:	6013      	str	r3, [r2, #0]
 8008822:	4b3e      	ldr	r3, [pc, #248]	; (800891c <HAL_RCC_OscConfig+0x298>)
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	6a1b      	ldr	r3, [r3, #32]
 800882e:	493b      	ldr	r1, [pc, #236]	; (800891c <HAL_RCC_OscConfig+0x298>)
 8008830:	4313      	orrs	r3, r2
 8008832:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008834:	4b39      	ldr	r3, [pc, #228]	; (800891c <HAL_RCC_OscConfig+0x298>)
 8008836:	685b      	ldr	r3, [r3, #4]
 8008838:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	69db      	ldr	r3, [r3, #28]
 8008840:	021b      	lsls	r3, r3, #8
 8008842:	4936      	ldr	r1, [pc, #216]	; (800891c <HAL_RCC_OscConfig+0x298>)
 8008844:	4313      	orrs	r3, r2
 8008846:	604b      	str	r3, [r1, #4]
 8008848:	e01a      	b.n	8008880 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800884a:	4b34      	ldr	r3, [pc, #208]	; (800891c <HAL_RCC_OscConfig+0x298>)
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	4a33      	ldr	r2, [pc, #204]	; (800891c <HAL_RCC_OscConfig+0x298>)
 8008850:	f023 0301 	bic.w	r3, r3, #1
 8008854:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8008856:	f7fe fba7 	bl	8006fa8 <HAL_GetTick>
 800885a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800885c:	e008      	b.n	8008870 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800885e:	f7fe fba3 	bl	8006fa8 <HAL_GetTick>
 8008862:	4602      	mov	r2, r0
 8008864:	693b      	ldr	r3, [r7, #16]
 8008866:	1ad3      	subs	r3, r2, r3
 8008868:	2b02      	cmp	r3, #2
 800886a:	d901      	bls.n	8008870 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800886c:	2303      	movs	r3, #3
 800886e:	e2e7      	b.n	8008e40 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8008870:	4b2a      	ldr	r3, [pc, #168]	; (800891c <HAL_RCC_OscConfig+0x298>)
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	f003 0302 	and.w	r3, r3, #2
 8008878:	2b00      	cmp	r3, #0
 800887a:	d1f0      	bne.n	800885e <HAL_RCC_OscConfig+0x1da>
 800887c:	e000      	b.n	8008880 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800887e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	f003 0301 	and.w	r3, r3, #1
 8008888:	2b00      	cmp	r3, #0
 800888a:	d074      	beq.n	8008976 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800888c:	69bb      	ldr	r3, [r7, #24]
 800888e:	2b08      	cmp	r3, #8
 8008890:	d005      	beq.n	800889e <HAL_RCC_OscConfig+0x21a>
 8008892:	69bb      	ldr	r3, [r7, #24]
 8008894:	2b0c      	cmp	r3, #12
 8008896:	d10e      	bne.n	80088b6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8008898:	697b      	ldr	r3, [r7, #20]
 800889a:	2b03      	cmp	r3, #3
 800889c:	d10b      	bne.n	80088b6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800889e:	4b1f      	ldr	r3, [pc, #124]	; (800891c <HAL_RCC_OscConfig+0x298>)
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d064      	beq.n	8008974 <HAL_RCC_OscConfig+0x2f0>
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	685b      	ldr	r3, [r3, #4]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d160      	bne.n	8008974 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80088b2:	2301      	movs	r3, #1
 80088b4:	e2c4      	b.n	8008e40 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	685b      	ldr	r3, [r3, #4]
 80088ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80088be:	d106      	bne.n	80088ce <HAL_RCC_OscConfig+0x24a>
 80088c0:	4b16      	ldr	r3, [pc, #88]	; (800891c <HAL_RCC_OscConfig+0x298>)
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	4a15      	ldr	r2, [pc, #84]	; (800891c <HAL_RCC_OscConfig+0x298>)
 80088c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80088ca:	6013      	str	r3, [r2, #0]
 80088cc:	e01d      	b.n	800890a <HAL_RCC_OscConfig+0x286>
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	685b      	ldr	r3, [r3, #4]
 80088d2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80088d6:	d10c      	bne.n	80088f2 <HAL_RCC_OscConfig+0x26e>
 80088d8:	4b10      	ldr	r3, [pc, #64]	; (800891c <HAL_RCC_OscConfig+0x298>)
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	4a0f      	ldr	r2, [pc, #60]	; (800891c <HAL_RCC_OscConfig+0x298>)
 80088de:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80088e2:	6013      	str	r3, [r2, #0]
 80088e4:	4b0d      	ldr	r3, [pc, #52]	; (800891c <HAL_RCC_OscConfig+0x298>)
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	4a0c      	ldr	r2, [pc, #48]	; (800891c <HAL_RCC_OscConfig+0x298>)
 80088ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80088ee:	6013      	str	r3, [r2, #0]
 80088f0:	e00b      	b.n	800890a <HAL_RCC_OscConfig+0x286>
 80088f2:	4b0a      	ldr	r3, [pc, #40]	; (800891c <HAL_RCC_OscConfig+0x298>)
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	4a09      	ldr	r2, [pc, #36]	; (800891c <HAL_RCC_OscConfig+0x298>)
 80088f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80088fc:	6013      	str	r3, [r2, #0]
 80088fe:	4b07      	ldr	r3, [pc, #28]	; (800891c <HAL_RCC_OscConfig+0x298>)
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	4a06      	ldr	r2, [pc, #24]	; (800891c <HAL_RCC_OscConfig+0x298>)
 8008904:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008908:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	685b      	ldr	r3, [r3, #4]
 800890e:	2b00      	cmp	r3, #0
 8008910:	d01c      	beq.n	800894c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008912:	f7fe fb49 	bl	8006fa8 <HAL_GetTick>
 8008916:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008918:	e011      	b.n	800893e <HAL_RCC_OscConfig+0x2ba>
 800891a:	bf00      	nop
 800891c:	40021000 	.word	0x40021000
 8008920:	0800bc6c 	.word	0x0800bc6c
 8008924:	20000000 	.word	0x20000000
 8008928:	2000048c 	.word	0x2000048c
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800892c:	f7fe fb3c 	bl	8006fa8 <HAL_GetTick>
 8008930:	4602      	mov	r2, r0
 8008932:	693b      	ldr	r3, [r7, #16]
 8008934:	1ad3      	subs	r3, r2, r3
 8008936:	2b64      	cmp	r3, #100	; 0x64
 8008938:	d901      	bls.n	800893e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800893a:	2303      	movs	r3, #3
 800893c:	e280      	b.n	8008e40 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800893e:	4baf      	ldr	r3, [pc, #700]	; (8008bfc <HAL_RCC_OscConfig+0x578>)
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008946:	2b00      	cmp	r3, #0
 8008948:	d0f0      	beq.n	800892c <HAL_RCC_OscConfig+0x2a8>
 800894a:	e014      	b.n	8008976 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800894c:	f7fe fb2c 	bl	8006fa8 <HAL_GetTick>
 8008950:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008952:	e008      	b.n	8008966 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008954:	f7fe fb28 	bl	8006fa8 <HAL_GetTick>
 8008958:	4602      	mov	r2, r0
 800895a:	693b      	ldr	r3, [r7, #16]
 800895c:	1ad3      	subs	r3, r2, r3
 800895e:	2b64      	cmp	r3, #100	; 0x64
 8008960:	d901      	bls.n	8008966 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8008962:	2303      	movs	r3, #3
 8008964:	e26c      	b.n	8008e40 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008966:	4ba5      	ldr	r3, [pc, #660]	; (8008bfc <HAL_RCC_OscConfig+0x578>)
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800896e:	2b00      	cmp	r3, #0
 8008970:	d1f0      	bne.n	8008954 <HAL_RCC_OscConfig+0x2d0>
 8008972:	e000      	b.n	8008976 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008974:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	f003 0302 	and.w	r3, r3, #2
 800897e:	2b00      	cmp	r3, #0
 8008980:	d060      	beq.n	8008a44 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8008982:	69bb      	ldr	r3, [r7, #24]
 8008984:	2b04      	cmp	r3, #4
 8008986:	d005      	beq.n	8008994 <HAL_RCC_OscConfig+0x310>
 8008988:	69bb      	ldr	r3, [r7, #24]
 800898a:	2b0c      	cmp	r3, #12
 800898c:	d119      	bne.n	80089c2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800898e:	697b      	ldr	r3, [r7, #20]
 8008990:	2b02      	cmp	r3, #2
 8008992:	d116      	bne.n	80089c2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008994:	4b99      	ldr	r3, [pc, #612]	; (8008bfc <HAL_RCC_OscConfig+0x578>)
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800899c:	2b00      	cmp	r3, #0
 800899e:	d005      	beq.n	80089ac <HAL_RCC_OscConfig+0x328>
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	68db      	ldr	r3, [r3, #12]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d101      	bne.n	80089ac <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80089a8:	2301      	movs	r3, #1
 80089aa:	e249      	b.n	8008e40 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80089ac:	4b93      	ldr	r3, [pc, #588]	; (8008bfc <HAL_RCC_OscConfig+0x578>)
 80089ae:	685b      	ldr	r3, [r3, #4]
 80089b0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	691b      	ldr	r3, [r3, #16]
 80089b8:	061b      	lsls	r3, r3, #24
 80089ba:	4990      	ldr	r1, [pc, #576]	; (8008bfc <HAL_RCC_OscConfig+0x578>)
 80089bc:	4313      	orrs	r3, r2
 80089be:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80089c0:	e040      	b.n	8008a44 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	68db      	ldr	r3, [r3, #12]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d023      	beq.n	8008a12 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80089ca:	4b8c      	ldr	r3, [pc, #560]	; (8008bfc <HAL_RCC_OscConfig+0x578>)
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	4a8b      	ldr	r2, [pc, #556]	; (8008bfc <HAL_RCC_OscConfig+0x578>)
 80089d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80089d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089d6:	f7fe fae7 	bl	8006fa8 <HAL_GetTick>
 80089da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80089dc:	e008      	b.n	80089f0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80089de:	f7fe fae3 	bl	8006fa8 <HAL_GetTick>
 80089e2:	4602      	mov	r2, r0
 80089e4:	693b      	ldr	r3, [r7, #16]
 80089e6:	1ad3      	subs	r3, r2, r3
 80089e8:	2b02      	cmp	r3, #2
 80089ea:	d901      	bls.n	80089f0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80089ec:	2303      	movs	r3, #3
 80089ee:	e227      	b.n	8008e40 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80089f0:	4b82      	ldr	r3, [pc, #520]	; (8008bfc <HAL_RCC_OscConfig+0x578>)
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d0f0      	beq.n	80089de <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80089fc:	4b7f      	ldr	r3, [pc, #508]	; (8008bfc <HAL_RCC_OscConfig+0x578>)
 80089fe:	685b      	ldr	r3, [r3, #4]
 8008a00:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	691b      	ldr	r3, [r3, #16]
 8008a08:	061b      	lsls	r3, r3, #24
 8008a0a:	497c      	ldr	r1, [pc, #496]	; (8008bfc <HAL_RCC_OscConfig+0x578>)
 8008a0c:	4313      	orrs	r3, r2
 8008a0e:	604b      	str	r3, [r1, #4]
 8008a10:	e018      	b.n	8008a44 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008a12:	4b7a      	ldr	r3, [pc, #488]	; (8008bfc <HAL_RCC_OscConfig+0x578>)
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	4a79      	ldr	r2, [pc, #484]	; (8008bfc <HAL_RCC_OscConfig+0x578>)
 8008a18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008a1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a1e:	f7fe fac3 	bl	8006fa8 <HAL_GetTick>
 8008a22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008a24:	e008      	b.n	8008a38 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008a26:	f7fe fabf 	bl	8006fa8 <HAL_GetTick>
 8008a2a:	4602      	mov	r2, r0
 8008a2c:	693b      	ldr	r3, [r7, #16]
 8008a2e:	1ad3      	subs	r3, r2, r3
 8008a30:	2b02      	cmp	r3, #2
 8008a32:	d901      	bls.n	8008a38 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8008a34:	2303      	movs	r3, #3
 8008a36:	e203      	b.n	8008e40 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008a38:	4b70      	ldr	r3, [pc, #448]	; (8008bfc <HAL_RCC_OscConfig+0x578>)
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d1f0      	bne.n	8008a26 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	f003 0308 	and.w	r3, r3, #8
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d03c      	beq.n	8008aca <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	695b      	ldr	r3, [r3, #20]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d01c      	beq.n	8008a92 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008a58:	4b68      	ldr	r3, [pc, #416]	; (8008bfc <HAL_RCC_OscConfig+0x578>)
 8008a5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008a5e:	4a67      	ldr	r2, [pc, #412]	; (8008bfc <HAL_RCC_OscConfig+0x578>)
 8008a60:	f043 0301 	orr.w	r3, r3, #1
 8008a64:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008a68:	f7fe fa9e 	bl	8006fa8 <HAL_GetTick>
 8008a6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008a6e:	e008      	b.n	8008a82 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008a70:	f7fe fa9a 	bl	8006fa8 <HAL_GetTick>
 8008a74:	4602      	mov	r2, r0
 8008a76:	693b      	ldr	r3, [r7, #16]
 8008a78:	1ad3      	subs	r3, r2, r3
 8008a7a:	2b02      	cmp	r3, #2
 8008a7c:	d901      	bls.n	8008a82 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8008a7e:	2303      	movs	r3, #3
 8008a80:	e1de      	b.n	8008e40 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008a82:	4b5e      	ldr	r3, [pc, #376]	; (8008bfc <HAL_RCC_OscConfig+0x578>)
 8008a84:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008a88:	f003 0302 	and.w	r3, r3, #2
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d0ef      	beq.n	8008a70 <HAL_RCC_OscConfig+0x3ec>
 8008a90:	e01b      	b.n	8008aca <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008a92:	4b5a      	ldr	r3, [pc, #360]	; (8008bfc <HAL_RCC_OscConfig+0x578>)
 8008a94:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008a98:	4a58      	ldr	r2, [pc, #352]	; (8008bfc <HAL_RCC_OscConfig+0x578>)
 8008a9a:	f023 0301 	bic.w	r3, r3, #1
 8008a9e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008aa2:	f7fe fa81 	bl	8006fa8 <HAL_GetTick>
 8008aa6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008aa8:	e008      	b.n	8008abc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008aaa:	f7fe fa7d 	bl	8006fa8 <HAL_GetTick>
 8008aae:	4602      	mov	r2, r0
 8008ab0:	693b      	ldr	r3, [r7, #16]
 8008ab2:	1ad3      	subs	r3, r2, r3
 8008ab4:	2b02      	cmp	r3, #2
 8008ab6:	d901      	bls.n	8008abc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8008ab8:	2303      	movs	r3, #3
 8008aba:	e1c1      	b.n	8008e40 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008abc:	4b4f      	ldr	r3, [pc, #316]	; (8008bfc <HAL_RCC_OscConfig+0x578>)
 8008abe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008ac2:	f003 0302 	and.w	r3, r3, #2
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d1ef      	bne.n	8008aaa <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	f003 0304 	and.w	r3, r3, #4
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	f000 80a6 	beq.w	8008c24 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008ad8:	2300      	movs	r3, #0
 8008ada:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8008adc:	4b47      	ldr	r3, [pc, #284]	; (8008bfc <HAL_RCC_OscConfig+0x578>)
 8008ade:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ae0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d10d      	bne.n	8008b04 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008ae8:	4b44      	ldr	r3, [pc, #272]	; (8008bfc <HAL_RCC_OscConfig+0x578>)
 8008aea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008aec:	4a43      	ldr	r2, [pc, #268]	; (8008bfc <HAL_RCC_OscConfig+0x578>)
 8008aee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008af2:	6593      	str	r3, [r2, #88]	; 0x58
 8008af4:	4b41      	ldr	r3, [pc, #260]	; (8008bfc <HAL_RCC_OscConfig+0x578>)
 8008af6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008af8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008afc:	60bb      	str	r3, [r7, #8]
 8008afe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008b00:	2301      	movs	r3, #1
 8008b02:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008b04:	4b3e      	ldr	r3, [pc, #248]	; (8008c00 <HAL_RCC_OscConfig+0x57c>)
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d118      	bne.n	8008b42 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008b10:	4b3b      	ldr	r3, [pc, #236]	; (8008c00 <HAL_RCC_OscConfig+0x57c>)
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	4a3a      	ldr	r2, [pc, #232]	; (8008c00 <HAL_RCC_OscConfig+0x57c>)
 8008b16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008b1a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008b1c:	f7fe fa44 	bl	8006fa8 <HAL_GetTick>
 8008b20:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008b22:	e008      	b.n	8008b36 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008b24:	f7fe fa40 	bl	8006fa8 <HAL_GetTick>
 8008b28:	4602      	mov	r2, r0
 8008b2a:	693b      	ldr	r3, [r7, #16]
 8008b2c:	1ad3      	subs	r3, r2, r3
 8008b2e:	2b02      	cmp	r3, #2
 8008b30:	d901      	bls.n	8008b36 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8008b32:	2303      	movs	r3, #3
 8008b34:	e184      	b.n	8008e40 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008b36:	4b32      	ldr	r3, [pc, #200]	; (8008c00 <HAL_RCC_OscConfig+0x57c>)
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d0f0      	beq.n	8008b24 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	689b      	ldr	r3, [r3, #8]
 8008b46:	2b01      	cmp	r3, #1
 8008b48:	d108      	bne.n	8008b5c <HAL_RCC_OscConfig+0x4d8>
 8008b4a:	4b2c      	ldr	r3, [pc, #176]	; (8008bfc <HAL_RCC_OscConfig+0x578>)
 8008b4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b50:	4a2a      	ldr	r2, [pc, #168]	; (8008bfc <HAL_RCC_OscConfig+0x578>)
 8008b52:	f043 0301 	orr.w	r3, r3, #1
 8008b56:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008b5a:	e024      	b.n	8008ba6 <HAL_RCC_OscConfig+0x522>
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	689b      	ldr	r3, [r3, #8]
 8008b60:	2b05      	cmp	r3, #5
 8008b62:	d110      	bne.n	8008b86 <HAL_RCC_OscConfig+0x502>
 8008b64:	4b25      	ldr	r3, [pc, #148]	; (8008bfc <HAL_RCC_OscConfig+0x578>)
 8008b66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b6a:	4a24      	ldr	r2, [pc, #144]	; (8008bfc <HAL_RCC_OscConfig+0x578>)
 8008b6c:	f043 0304 	orr.w	r3, r3, #4
 8008b70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008b74:	4b21      	ldr	r3, [pc, #132]	; (8008bfc <HAL_RCC_OscConfig+0x578>)
 8008b76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b7a:	4a20      	ldr	r2, [pc, #128]	; (8008bfc <HAL_RCC_OscConfig+0x578>)
 8008b7c:	f043 0301 	orr.w	r3, r3, #1
 8008b80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008b84:	e00f      	b.n	8008ba6 <HAL_RCC_OscConfig+0x522>
 8008b86:	4b1d      	ldr	r3, [pc, #116]	; (8008bfc <HAL_RCC_OscConfig+0x578>)
 8008b88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b8c:	4a1b      	ldr	r2, [pc, #108]	; (8008bfc <HAL_RCC_OscConfig+0x578>)
 8008b8e:	f023 0301 	bic.w	r3, r3, #1
 8008b92:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008b96:	4b19      	ldr	r3, [pc, #100]	; (8008bfc <HAL_RCC_OscConfig+0x578>)
 8008b98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b9c:	4a17      	ldr	r2, [pc, #92]	; (8008bfc <HAL_RCC_OscConfig+0x578>)
 8008b9e:	f023 0304 	bic.w	r3, r3, #4
 8008ba2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	689b      	ldr	r3, [r3, #8]
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d016      	beq.n	8008bdc <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008bae:	f7fe f9fb 	bl	8006fa8 <HAL_GetTick>
 8008bb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008bb4:	e00a      	b.n	8008bcc <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008bb6:	f7fe f9f7 	bl	8006fa8 <HAL_GetTick>
 8008bba:	4602      	mov	r2, r0
 8008bbc:	693b      	ldr	r3, [r7, #16]
 8008bbe:	1ad3      	subs	r3, r2, r3
 8008bc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8008bc4:	4293      	cmp	r3, r2
 8008bc6:	d901      	bls.n	8008bcc <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8008bc8:	2303      	movs	r3, #3
 8008bca:	e139      	b.n	8008e40 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008bcc:	4b0b      	ldr	r3, [pc, #44]	; (8008bfc <HAL_RCC_OscConfig+0x578>)
 8008bce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008bd2:	f003 0302 	and.w	r3, r3, #2
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d0ed      	beq.n	8008bb6 <HAL_RCC_OscConfig+0x532>
 8008bda:	e01a      	b.n	8008c12 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008bdc:	f7fe f9e4 	bl	8006fa8 <HAL_GetTick>
 8008be0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008be2:	e00f      	b.n	8008c04 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008be4:	f7fe f9e0 	bl	8006fa8 <HAL_GetTick>
 8008be8:	4602      	mov	r2, r0
 8008bea:	693b      	ldr	r3, [r7, #16]
 8008bec:	1ad3      	subs	r3, r2, r3
 8008bee:	f241 3288 	movw	r2, #5000	; 0x1388
 8008bf2:	4293      	cmp	r3, r2
 8008bf4:	d906      	bls.n	8008c04 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8008bf6:	2303      	movs	r3, #3
 8008bf8:	e122      	b.n	8008e40 <HAL_RCC_OscConfig+0x7bc>
 8008bfa:	bf00      	nop
 8008bfc:	40021000 	.word	0x40021000
 8008c00:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008c04:	4b90      	ldr	r3, [pc, #576]	; (8008e48 <HAL_RCC_OscConfig+0x7c4>)
 8008c06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c0a:	f003 0302 	and.w	r3, r3, #2
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d1e8      	bne.n	8008be4 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008c12:	7ffb      	ldrb	r3, [r7, #31]
 8008c14:	2b01      	cmp	r3, #1
 8008c16:	d105      	bne.n	8008c24 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008c18:	4b8b      	ldr	r3, [pc, #556]	; (8008e48 <HAL_RCC_OscConfig+0x7c4>)
 8008c1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c1c:	4a8a      	ldr	r2, [pc, #552]	; (8008e48 <HAL_RCC_OscConfig+0x7c4>)
 8008c1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008c22:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	f000 8108 	beq.w	8008e3e <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c32:	2b02      	cmp	r3, #2
 8008c34:	f040 80d0 	bne.w	8008dd8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8008c38:	4b83      	ldr	r3, [pc, #524]	; (8008e48 <HAL_RCC_OscConfig+0x7c4>)
 8008c3a:	68db      	ldr	r3, [r3, #12]
 8008c3c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8008c3e:	697b      	ldr	r3, [r7, #20]
 8008c40:	f003 0203 	and.w	r2, r3, #3
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c48:	429a      	cmp	r2, r3
 8008c4a:	d130      	bne.n	8008cae <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008c4c:	697b      	ldr	r3, [r7, #20]
 8008c4e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c56:	3b01      	subs	r3, #1
 8008c58:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8008c5a:	429a      	cmp	r2, r3
 8008c5c:	d127      	bne.n	8008cae <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008c5e:	697b      	ldr	r3, [r7, #20]
 8008c60:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c68:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008c6a:	429a      	cmp	r2, r3
 8008c6c:	d11f      	bne.n	8008cae <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8008c6e:	697b      	ldr	r3, [r7, #20]
 8008c70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c74:	687a      	ldr	r2, [r7, #4]
 8008c76:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008c78:	2a07      	cmp	r2, #7
 8008c7a:	bf14      	ite	ne
 8008c7c:	2201      	movne	r2, #1
 8008c7e:	2200      	moveq	r2, #0
 8008c80:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008c82:	4293      	cmp	r3, r2
 8008c84:	d113      	bne.n	8008cae <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008c86:	697b      	ldr	r3, [r7, #20]
 8008c88:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c90:	085b      	lsrs	r3, r3, #1
 8008c92:	3b01      	subs	r3, #1
 8008c94:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8008c96:	429a      	cmp	r2, r3
 8008c98:	d109      	bne.n	8008cae <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8008c9a:	697b      	ldr	r3, [r7, #20]
 8008c9c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ca4:	085b      	lsrs	r3, r3, #1
 8008ca6:	3b01      	subs	r3, #1
 8008ca8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008caa:	429a      	cmp	r2, r3
 8008cac:	d06e      	beq.n	8008d8c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8008cae:	69bb      	ldr	r3, [r7, #24]
 8008cb0:	2b0c      	cmp	r3, #12
 8008cb2:	d069      	beq.n	8008d88 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8008cb4:	4b64      	ldr	r3, [pc, #400]	; (8008e48 <HAL_RCC_OscConfig+0x7c4>)
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d105      	bne.n	8008ccc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8008cc0:	4b61      	ldr	r3, [pc, #388]	; (8008e48 <HAL_RCC_OscConfig+0x7c4>)
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d001      	beq.n	8008cd0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8008ccc:	2301      	movs	r3, #1
 8008cce:	e0b7      	b.n	8008e40 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8008cd0:	4b5d      	ldr	r3, [pc, #372]	; (8008e48 <HAL_RCC_OscConfig+0x7c4>)
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	4a5c      	ldr	r2, [pc, #368]	; (8008e48 <HAL_RCC_OscConfig+0x7c4>)
 8008cd6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008cda:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8008cdc:	f7fe f964 	bl	8006fa8 <HAL_GetTick>
 8008ce0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008ce2:	e008      	b.n	8008cf6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008ce4:	f7fe f960 	bl	8006fa8 <HAL_GetTick>
 8008ce8:	4602      	mov	r2, r0
 8008cea:	693b      	ldr	r3, [r7, #16]
 8008cec:	1ad3      	subs	r3, r2, r3
 8008cee:	2b02      	cmp	r3, #2
 8008cf0:	d901      	bls.n	8008cf6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8008cf2:	2303      	movs	r3, #3
 8008cf4:	e0a4      	b.n	8008e40 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008cf6:	4b54      	ldr	r3, [pc, #336]	; (8008e48 <HAL_RCC_OscConfig+0x7c4>)
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d1f0      	bne.n	8008ce4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008d02:	4b51      	ldr	r3, [pc, #324]	; (8008e48 <HAL_RCC_OscConfig+0x7c4>)
 8008d04:	68da      	ldr	r2, [r3, #12]
 8008d06:	4b51      	ldr	r3, [pc, #324]	; (8008e4c <HAL_RCC_OscConfig+0x7c8>)
 8008d08:	4013      	ands	r3, r2
 8008d0a:	687a      	ldr	r2, [r7, #4]
 8008d0c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8008d0e:	687a      	ldr	r2, [r7, #4]
 8008d10:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008d12:	3a01      	subs	r2, #1
 8008d14:	0112      	lsls	r2, r2, #4
 8008d16:	4311      	orrs	r1, r2
 8008d18:	687a      	ldr	r2, [r7, #4]
 8008d1a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008d1c:	0212      	lsls	r2, r2, #8
 8008d1e:	4311      	orrs	r1, r2
 8008d20:	687a      	ldr	r2, [r7, #4]
 8008d22:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8008d24:	0852      	lsrs	r2, r2, #1
 8008d26:	3a01      	subs	r2, #1
 8008d28:	0552      	lsls	r2, r2, #21
 8008d2a:	4311      	orrs	r1, r2
 8008d2c:	687a      	ldr	r2, [r7, #4]
 8008d2e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8008d30:	0852      	lsrs	r2, r2, #1
 8008d32:	3a01      	subs	r2, #1
 8008d34:	0652      	lsls	r2, r2, #25
 8008d36:	4311      	orrs	r1, r2
 8008d38:	687a      	ldr	r2, [r7, #4]
 8008d3a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008d3c:	0912      	lsrs	r2, r2, #4
 8008d3e:	0452      	lsls	r2, r2, #17
 8008d40:	430a      	orrs	r2, r1
 8008d42:	4941      	ldr	r1, [pc, #260]	; (8008e48 <HAL_RCC_OscConfig+0x7c4>)
 8008d44:	4313      	orrs	r3, r2
 8008d46:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8008d48:	4b3f      	ldr	r3, [pc, #252]	; (8008e48 <HAL_RCC_OscConfig+0x7c4>)
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	4a3e      	ldr	r2, [pc, #248]	; (8008e48 <HAL_RCC_OscConfig+0x7c4>)
 8008d4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008d52:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008d54:	4b3c      	ldr	r3, [pc, #240]	; (8008e48 <HAL_RCC_OscConfig+0x7c4>)
 8008d56:	68db      	ldr	r3, [r3, #12]
 8008d58:	4a3b      	ldr	r2, [pc, #236]	; (8008e48 <HAL_RCC_OscConfig+0x7c4>)
 8008d5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008d5e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8008d60:	f7fe f922 	bl	8006fa8 <HAL_GetTick>
 8008d64:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008d66:	e008      	b.n	8008d7a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008d68:	f7fe f91e 	bl	8006fa8 <HAL_GetTick>
 8008d6c:	4602      	mov	r2, r0
 8008d6e:	693b      	ldr	r3, [r7, #16]
 8008d70:	1ad3      	subs	r3, r2, r3
 8008d72:	2b02      	cmp	r3, #2
 8008d74:	d901      	bls.n	8008d7a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8008d76:	2303      	movs	r3, #3
 8008d78:	e062      	b.n	8008e40 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008d7a:	4b33      	ldr	r3, [pc, #204]	; (8008e48 <HAL_RCC_OscConfig+0x7c4>)
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d0f0      	beq.n	8008d68 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8008d86:	e05a      	b.n	8008e3e <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8008d88:	2301      	movs	r3, #1
 8008d8a:	e059      	b.n	8008e40 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008d8c:	4b2e      	ldr	r3, [pc, #184]	; (8008e48 <HAL_RCC_OscConfig+0x7c4>)
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d152      	bne.n	8008e3e <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8008d98:	4b2b      	ldr	r3, [pc, #172]	; (8008e48 <HAL_RCC_OscConfig+0x7c4>)
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	4a2a      	ldr	r2, [pc, #168]	; (8008e48 <HAL_RCC_OscConfig+0x7c4>)
 8008d9e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008da2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008da4:	4b28      	ldr	r3, [pc, #160]	; (8008e48 <HAL_RCC_OscConfig+0x7c4>)
 8008da6:	68db      	ldr	r3, [r3, #12]
 8008da8:	4a27      	ldr	r2, [pc, #156]	; (8008e48 <HAL_RCC_OscConfig+0x7c4>)
 8008daa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008dae:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008db0:	f7fe f8fa 	bl	8006fa8 <HAL_GetTick>
 8008db4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008db6:	e008      	b.n	8008dca <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008db8:	f7fe f8f6 	bl	8006fa8 <HAL_GetTick>
 8008dbc:	4602      	mov	r2, r0
 8008dbe:	693b      	ldr	r3, [r7, #16]
 8008dc0:	1ad3      	subs	r3, r2, r3
 8008dc2:	2b02      	cmp	r3, #2
 8008dc4:	d901      	bls.n	8008dca <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8008dc6:	2303      	movs	r3, #3
 8008dc8:	e03a      	b.n	8008e40 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008dca:	4b1f      	ldr	r3, [pc, #124]	; (8008e48 <HAL_RCC_OscConfig+0x7c4>)
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d0f0      	beq.n	8008db8 <HAL_RCC_OscConfig+0x734>
 8008dd6:	e032      	b.n	8008e3e <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8008dd8:	69bb      	ldr	r3, [r7, #24]
 8008dda:	2b0c      	cmp	r3, #12
 8008ddc:	d02d      	beq.n	8008e3a <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008dde:	4b1a      	ldr	r3, [pc, #104]	; (8008e48 <HAL_RCC_OscConfig+0x7c4>)
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	4a19      	ldr	r2, [pc, #100]	; (8008e48 <HAL_RCC_OscConfig+0x7c4>)
 8008de4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008de8:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8008dea:	4b17      	ldr	r3, [pc, #92]	; (8008e48 <HAL_RCC_OscConfig+0x7c4>)
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d105      	bne.n	8008e02 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8008df6:	4b14      	ldr	r3, [pc, #80]	; (8008e48 <HAL_RCC_OscConfig+0x7c4>)
 8008df8:	68db      	ldr	r3, [r3, #12]
 8008dfa:	4a13      	ldr	r2, [pc, #76]	; (8008e48 <HAL_RCC_OscConfig+0x7c4>)
 8008dfc:	f023 0303 	bic.w	r3, r3, #3
 8008e00:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8008e02:	4b11      	ldr	r3, [pc, #68]	; (8008e48 <HAL_RCC_OscConfig+0x7c4>)
 8008e04:	68db      	ldr	r3, [r3, #12]
 8008e06:	4a10      	ldr	r2, [pc, #64]	; (8008e48 <HAL_RCC_OscConfig+0x7c4>)
 8008e08:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8008e0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008e10:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e12:	f7fe f8c9 	bl	8006fa8 <HAL_GetTick>
 8008e16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008e18:	e008      	b.n	8008e2c <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008e1a:	f7fe f8c5 	bl	8006fa8 <HAL_GetTick>
 8008e1e:	4602      	mov	r2, r0
 8008e20:	693b      	ldr	r3, [r7, #16]
 8008e22:	1ad3      	subs	r3, r2, r3
 8008e24:	2b02      	cmp	r3, #2
 8008e26:	d901      	bls.n	8008e2c <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8008e28:	2303      	movs	r3, #3
 8008e2a:	e009      	b.n	8008e40 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008e2c:	4b06      	ldr	r3, [pc, #24]	; (8008e48 <HAL_RCC_OscConfig+0x7c4>)
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d1f0      	bne.n	8008e1a <HAL_RCC_OscConfig+0x796>
 8008e38:	e001      	b.n	8008e3e <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8008e3a:	2301      	movs	r3, #1
 8008e3c:	e000      	b.n	8008e40 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8008e3e:	2300      	movs	r3, #0
}
 8008e40:	4618      	mov	r0, r3
 8008e42:	3720      	adds	r7, #32
 8008e44:	46bd      	mov	sp, r7
 8008e46:	bd80      	pop	{r7, pc}
 8008e48:	40021000 	.word	0x40021000
 8008e4c:	f99d808c 	.word	0xf99d808c

08008e50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008e50:	b580      	push	{r7, lr}
 8008e52:	b084      	sub	sp, #16
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	6078      	str	r0, [r7, #4]
 8008e58:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d101      	bne.n	8008e64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008e60:	2301      	movs	r3, #1
 8008e62:	e0c8      	b.n	8008ff6 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008e64:	4b66      	ldr	r3, [pc, #408]	; (8009000 <HAL_RCC_ClockConfig+0x1b0>)
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	f003 0307 	and.w	r3, r3, #7
 8008e6c:	683a      	ldr	r2, [r7, #0]
 8008e6e:	429a      	cmp	r2, r3
 8008e70:	d910      	bls.n	8008e94 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008e72:	4b63      	ldr	r3, [pc, #396]	; (8009000 <HAL_RCC_ClockConfig+0x1b0>)
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	f023 0207 	bic.w	r2, r3, #7
 8008e7a:	4961      	ldr	r1, [pc, #388]	; (8009000 <HAL_RCC_ClockConfig+0x1b0>)
 8008e7c:	683b      	ldr	r3, [r7, #0]
 8008e7e:	4313      	orrs	r3, r2
 8008e80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008e82:	4b5f      	ldr	r3, [pc, #380]	; (8009000 <HAL_RCC_ClockConfig+0x1b0>)
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	f003 0307 	and.w	r3, r3, #7
 8008e8a:	683a      	ldr	r2, [r7, #0]
 8008e8c:	429a      	cmp	r2, r3
 8008e8e:	d001      	beq.n	8008e94 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008e90:	2301      	movs	r3, #1
 8008e92:	e0b0      	b.n	8008ff6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	f003 0301 	and.w	r3, r3, #1
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d04c      	beq.n	8008f3a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	685b      	ldr	r3, [r3, #4]
 8008ea4:	2b03      	cmp	r3, #3
 8008ea6:	d107      	bne.n	8008eb8 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008ea8:	4b56      	ldr	r3, [pc, #344]	; (8009004 <HAL_RCC_ClockConfig+0x1b4>)
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d121      	bne.n	8008ef8 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8008eb4:	2301      	movs	r3, #1
 8008eb6:	e09e      	b.n	8008ff6 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	685b      	ldr	r3, [r3, #4]
 8008ebc:	2b02      	cmp	r3, #2
 8008ebe:	d107      	bne.n	8008ed0 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008ec0:	4b50      	ldr	r3, [pc, #320]	; (8009004 <HAL_RCC_ClockConfig+0x1b4>)
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d115      	bne.n	8008ef8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8008ecc:	2301      	movs	r3, #1
 8008ece:	e092      	b.n	8008ff6 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	685b      	ldr	r3, [r3, #4]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d107      	bne.n	8008ee8 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8008ed8:	4b4a      	ldr	r3, [pc, #296]	; (8009004 <HAL_RCC_ClockConfig+0x1b4>)
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	f003 0302 	and.w	r3, r3, #2
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d109      	bne.n	8008ef8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8008ee4:	2301      	movs	r3, #1
 8008ee6:	e086      	b.n	8008ff6 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008ee8:	4b46      	ldr	r3, [pc, #280]	; (8009004 <HAL_RCC_ClockConfig+0x1b4>)
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d101      	bne.n	8008ef8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8008ef4:	2301      	movs	r3, #1
 8008ef6:	e07e      	b.n	8008ff6 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008ef8:	4b42      	ldr	r3, [pc, #264]	; (8009004 <HAL_RCC_ClockConfig+0x1b4>)
 8008efa:	689b      	ldr	r3, [r3, #8]
 8008efc:	f023 0203 	bic.w	r2, r3, #3
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	685b      	ldr	r3, [r3, #4]
 8008f04:	493f      	ldr	r1, [pc, #252]	; (8009004 <HAL_RCC_ClockConfig+0x1b4>)
 8008f06:	4313      	orrs	r3, r2
 8008f08:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008f0a:	f7fe f84d 	bl	8006fa8 <HAL_GetTick>
 8008f0e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008f10:	e00a      	b.n	8008f28 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008f12:	f7fe f849 	bl	8006fa8 <HAL_GetTick>
 8008f16:	4602      	mov	r2, r0
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	1ad3      	subs	r3, r2, r3
 8008f1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f20:	4293      	cmp	r3, r2
 8008f22:	d901      	bls.n	8008f28 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8008f24:	2303      	movs	r3, #3
 8008f26:	e066      	b.n	8008ff6 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008f28:	4b36      	ldr	r3, [pc, #216]	; (8009004 <HAL_RCC_ClockConfig+0x1b4>)
 8008f2a:	689b      	ldr	r3, [r3, #8]
 8008f2c:	f003 020c 	and.w	r2, r3, #12
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	685b      	ldr	r3, [r3, #4]
 8008f34:	009b      	lsls	r3, r3, #2
 8008f36:	429a      	cmp	r2, r3
 8008f38:	d1eb      	bne.n	8008f12 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	f003 0302 	and.w	r3, r3, #2
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d008      	beq.n	8008f58 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008f46:	4b2f      	ldr	r3, [pc, #188]	; (8009004 <HAL_RCC_ClockConfig+0x1b4>)
 8008f48:	689b      	ldr	r3, [r3, #8]
 8008f4a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	689b      	ldr	r3, [r3, #8]
 8008f52:	492c      	ldr	r1, [pc, #176]	; (8009004 <HAL_RCC_ClockConfig+0x1b4>)
 8008f54:	4313      	orrs	r3, r2
 8008f56:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008f58:	4b29      	ldr	r3, [pc, #164]	; (8009000 <HAL_RCC_ClockConfig+0x1b0>)
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	f003 0307 	and.w	r3, r3, #7
 8008f60:	683a      	ldr	r2, [r7, #0]
 8008f62:	429a      	cmp	r2, r3
 8008f64:	d210      	bcs.n	8008f88 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008f66:	4b26      	ldr	r3, [pc, #152]	; (8009000 <HAL_RCC_ClockConfig+0x1b0>)
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	f023 0207 	bic.w	r2, r3, #7
 8008f6e:	4924      	ldr	r1, [pc, #144]	; (8009000 <HAL_RCC_ClockConfig+0x1b0>)
 8008f70:	683b      	ldr	r3, [r7, #0]
 8008f72:	4313      	orrs	r3, r2
 8008f74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008f76:	4b22      	ldr	r3, [pc, #136]	; (8009000 <HAL_RCC_ClockConfig+0x1b0>)
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	f003 0307 	and.w	r3, r3, #7
 8008f7e:	683a      	ldr	r2, [r7, #0]
 8008f80:	429a      	cmp	r2, r3
 8008f82:	d001      	beq.n	8008f88 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8008f84:	2301      	movs	r3, #1
 8008f86:	e036      	b.n	8008ff6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	f003 0304 	and.w	r3, r3, #4
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d008      	beq.n	8008fa6 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008f94:	4b1b      	ldr	r3, [pc, #108]	; (8009004 <HAL_RCC_ClockConfig+0x1b4>)
 8008f96:	689b      	ldr	r3, [r3, #8]
 8008f98:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	68db      	ldr	r3, [r3, #12]
 8008fa0:	4918      	ldr	r1, [pc, #96]	; (8009004 <HAL_RCC_ClockConfig+0x1b4>)
 8008fa2:	4313      	orrs	r3, r2
 8008fa4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	f003 0308 	and.w	r3, r3, #8
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d009      	beq.n	8008fc6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008fb2:	4b14      	ldr	r3, [pc, #80]	; (8009004 <HAL_RCC_ClockConfig+0x1b4>)
 8008fb4:	689b      	ldr	r3, [r3, #8]
 8008fb6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	691b      	ldr	r3, [r3, #16]
 8008fbe:	00db      	lsls	r3, r3, #3
 8008fc0:	4910      	ldr	r1, [pc, #64]	; (8009004 <HAL_RCC_ClockConfig+0x1b4>)
 8008fc2:	4313      	orrs	r3, r2
 8008fc4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008fc6:	f000 f825 	bl	8009014 <HAL_RCC_GetSysClockFreq>
 8008fca:	4601      	mov	r1, r0
 8008fcc:	4b0d      	ldr	r3, [pc, #52]	; (8009004 <HAL_RCC_ClockConfig+0x1b4>)
 8008fce:	689b      	ldr	r3, [r3, #8]
 8008fd0:	091b      	lsrs	r3, r3, #4
 8008fd2:	f003 030f 	and.w	r3, r3, #15
 8008fd6:	4a0c      	ldr	r2, [pc, #48]	; (8009008 <HAL_RCC_ClockConfig+0x1b8>)
 8008fd8:	5cd3      	ldrb	r3, [r2, r3]
 8008fda:	f003 031f 	and.w	r3, r3, #31
 8008fde:	fa21 f303 	lsr.w	r3, r1, r3
 8008fe2:	4a0a      	ldr	r2, [pc, #40]	; (800900c <HAL_RCC_ClockConfig+0x1bc>)
 8008fe4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8008fe6:	4b0a      	ldr	r3, [pc, #40]	; (8009010 <HAL_RCC_ClockConfig+0x1c0>)
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	4618      	mov	r0, r3
 8008fec:	f7fd ff8c 	bl	8006f08 <HAL_InitTick>
 8008ff0:	4603      	mov	r3, r0
 8008ff2:	72fb      	strb	r3, [r7, #11]

  return status;
 8008ff4:	7afb      	ldrb	r3, [r7, #11]
}
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	3710      	adds	r7, #16
 8008ffa:	46bd      	mov	sp, r7
 8008ffc:	bd80      	pop	{r7, pc}
 8008ffe:	bf00      	nop
 8009000:	40022000 	.word	0x40022000
 8009004:	40021000 	.word	0x40021000
 8009008:	0800bc6c 	.word	0x0800bc6c
 800900c:	20000000 	.word	0x20000000
 8009010:	2000048c 	.word	0x2000048c

08009014 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009014:	b480      	push	{r7}
 8009016:	b089      	sub	sp, #36	; 0x24
 8009018:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800901a:	2300      	movs	r3, #0
 800901c:	61fb      	str	r3, [r7, #28]
 800901e:	2300      	movs	r3, #0
 8009020:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009022:	4b3d      	ldr	r3, [pc, #244]	; (8009118 <HAL_RCC_GetSysClockFreq+0x104>)
 8009024:	689b      	ldr	r3, [r3, #8]
 8009026:	f003 030c 	and.w	r3, r3, #12
 800902a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800902c:	4b3a      	ldr	r3, [pc, #232]	; (8009118 <HAL_RCC_GetSysClockFreq+0x104>)
 800902e:	68db      	ldr	r3, [r3, #12]
 8009030:	f003 0303 	and.w	r3, r3, #3
 8009034:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8009036:	693b      	ldr	r3, [r7, #16]
 8009038:	2b00      	cmp	r3, #0
 800903a:	d005      	beq.n	8009048 <HAL_RCC_GetSysClockFreq+0x34>
 800903c:	693b      	ldr	r3, [r7, #16]
 800903e:	2b0c      	cmp	r3, #12
 8009040:	d121      	bne.n	8009086 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	2b01      	cmp	r3, #1
 8009046:	d11e      	bne.n	8009086 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8009048:	4b33      	ldr	r3, [pc, #204]	; (8009118 <HAL_RCC_GetSysClockFreq+0x104>)
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	f003 0308 	and.w	r3, r3, #8
 8009050:	2b00      	cmp	r3, #0
 8009052:	d107      	bne.n	8009064 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8009054:	4b30      	ldr	r3, [pc, #192]	; (8009118 <HAL_RCC_GetSysClockFreq+0x104>)
 8009056:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800905a:	0a1b      	lsrs	r3, r3, #8
 800905c:	f003 030f 	and.w	r3, r3, #15
 8009060:	61fb      	str	r3, [r7, #28]
 8009062:	e005      	b.n	8009070 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8009064:	4b2c      	ldr	r3, [pc, #176]	; (8009118 <HAL_RCC_GetSysClockFreq+0x104>)
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	091b      	lsrs	r3, r3, #4
 800906a:	f003 030f 	and.w	r3, r3, #15
 800906e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8009070:	4a2a      	ldr	r2, [pc, #168]	; (800911c <HAL_RCC_GetSysClockFreq+0x108>)
 8009072:	69fb      	ldr	r3, [r7, #28]
 8009074:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009078:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800907a:	693b      	ldr	r3, [r7, #16]
 800907c:	2b00      	cmp	r3, #0
 800907e:	d10d      	bne.n	800909c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8009080:	69fb      	ldr	r3, [r7, #28]
 8009082:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8009084:	e00a      	b.n	800909c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8009086:	693b      	ldr	r3, [r7, #16]
 8009088:	2b04      	cmp	r3, #4
 800908a:	d102      	bne.n	8009092 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800908c:	4b24      	ldr	r3, [pc, #144]	; (8009120 <HAL_RCC_GetSysClockFreq+0x10c>)
 800908e:	61bb      	str	r3, [r7, #24]
 8009090:	e004      	b.n	800909c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8009092:	693b      	ldr	r3, [r7, #16]
 8009094:	2b08      	cmp	r3, #8
 8009096:	d101      	bne.n	800909c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8009098:	4b22      	ldr	r3, [pc, #136]	; (8009124 <HAL_RCC_GetSysClockFreq+0x110>)
 800909a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800909c:	693b      	ldr	r3, [r7, #16]
 800909e:	2b0c      	cmp	r3, #12
 80090a0:	d133      	bne.n	800910a <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80090a2:	4b1d      	ldr	r3, [pc, #116]	; (8009118 <HAL_RCC_GetSysClockFreq+0x104>)
 80090a4:	68db      	ldr	r3, [r3, #12]
 80090a6:	f003 0303 	and.w	r3, r3, #3
 80090aa:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80090ac:	68bb      	ldr	r3, [r7, #8]
 80090ae:	2b02      	cmp	r3, #2
 80090b0:	d002      	beq.n	80090b8 <HAL_RCC_GetSysClockFreq+0xa4>
 80090b2:	2b03      	cmp	r3, #3
 80090b4:	d003      	beq.n	80090be <HAL_RCC_GetSysClockFreq+0xaa>
 80090b6:	e005      	b.n	80090c4 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80090b8:	4b19      	ldr	r3, [pc, #100]	; (8009120 <HAL_RCC_GetSysClockFreq+0x10c>)
 80090ba:	617b      	str	r3, [r7, #20]
      break;
 80090bc:	e005      	b.n	80090ca <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80090be:	4b19      	ldr	r3, [pc, #100]	; (8009124 <HAL_RCC_GetSysClockFreq+0x110>)
 80090c0:	617b      	str	r3, [r7, #20]
      break;
 80090c2:	e002      	b.n	80090ca <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80090c4:	69fb      	ldr	r3, [r7, #28]
 80090c6:	617b      	str	r3, [r7, #20]
      break;
 80090c8:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80090ca:	4b13      	ldr	r3, [pc, #76]	; (8009118 <HAL_RCC_GetSysClockFreq+0x104>)
 80090cc:	68db      	ldr	r3, [r3, #12]
 80090ce:	091b      	lsrs	r3, r3, #4
 80090d0:	f003 0307 	and.w	r3, r3, #7
 80090d4:	3301      	adds	r3, #1
 80090d6:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80090d8:	4b0f      	ldr	r3, [pc, #60]	; (8009118 <HAL_RCC_GetSysClockFreq+0x104>)
 80090da:	68db      	ldr	r3, [r3, #12]
 80090dc:	0a1b      	lsrs	r3, r3, #8
 80090de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80090e2:	697a      	ldr	r2, [r7, #20]
 80090e4:	fb02 f203 	mul.w	r2, r2, r3
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80090ee:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80090f0:	4b09      	ldr	r3, [pc, #36]	; (8009118 <HAL_RCC_GetSysClockFreq+0x104>)
 80090f2:	68db      	ldr	r3, [r3, #12]
 80090f4:	0e5b      	lsrs	r3, r3, #25
 80090f6:	f003 0303 	and.w	r3, r3, #3
 80090fa:	3301      	adds	r3, #1
 80090fc:	005b      	lsls	r3, r3, #1
 80090fe:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8009100:	697a      	ldr	r2, [r7, #20]
 8009102:	683b      	ldr	r3, [r7, #0]
 8009104:	fbb2 f3f3 	udiv	r3, r2, r3
 8009108:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800910a:	69bb      	ldr	r3, [r7, #24]
}
 800910c:	4618      	mov	r0, r3
 800910e:	3724      	adds	r7, #36	; 0x24
 8009110:	46bd      	mov	sp, r7
 8009112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009116:	4770      	bx	lr
 8009118:	40021000 	.word	0x40021000
 800911c:	0800bc84 	.word	0x0800bc84
 8009120:	00f42400 	.word	0x00f42400
 8009124:	007a1200 	.word	0x007a1200

08009128 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009128:	b480      	push	{r7}
 800912a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800912c:	4b03      	ldr	r3, [pc, #12]	; (800913c <HAL_RCC_GetHCLKFreq+0x14>)
 800912e:	681b      	ldr	r3, [r3, #0]
}
 8009130:	4618      	mov	r0, r3
 8009132:	46bd      	mov	sp, r7
 8009134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009138:	4770      	bx	lr
 800913a:	bf00      	nop
 800913c:	20000000 	.word	0x20000000

08009140 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009140:	b580      	push	{r7, lr}
 8009142:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8009144:	f7ff fff0 	bl	8009128 <HAL_RCC_GetHCLKFreq>
 8009148:	4601      	mov	r1, r0
 800914a:	4b06      	ldr	r3, [pc, #24]	; (8009164 <HAL_RCC_GetPCLK1Freq+0x24>)
 800914c:	689b      	ldr	r3, [r3, #8]
 800914e:	0a1b      	lsrs	r3, r3, #8
 8009150:	f003 0307 	and.w	r3, r3, #7
 8009154:	4a04      	ldr	r2, [pc, #16]	; (8009168 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009156:	5cd3      	ldrb	r3, [r2, r3]
 8009158:	f003 031f 	and.w	r3, r3, #31
 800915c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8009160:	4618      	mov	r0, r3
 8009162:	bd80      	pop	{r7, pc}
 8009164:	40021000 	.word	0x40021000
 8009168:	0800bc7c 	.word	0x0800bc7c

0800916c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800916c:	b580      	push	{r7, lr}
 800916e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8009170:	f7ff ffda 	bl	8009128 <HAL_RCC_GetHCLKFreq>
 8009174:	4601      	mov	r1, r0
 8009176:	4b06      	ldr	r3, [pc, #24]	; (8009190 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009178:	689b      	ldr	r3, [r3, #8]
 800917a:	0adb      	lsrs	r3, r3, #11
 800917c:	f003 0307 	and.w	r3, r3, #7
 8009180:	4a04      	ldr	r2, [pc, #16]	; (8009194 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009182:	5cd3      	ldrb	r3, [r2, r3]
 8009184:	f003 031f 	and.w	r3, r3, #31
 8009188:	fa21 f303 	lsr.w	r3, r1, r3
}
 800918c:	4618      	mov	r0, r3
 800918e:	bd80      	pop	{r7, pc}
 8009190:	40021000 	.word	0x40021000
 8009194:	0800bc7c 	.word	0x0800bc7c

08009198 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8009198:	b580      	push	{r7, lr}
 800919a:	b086      	sub	sp, #24
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80091a0:	2300      	movs	r3, #0
 80091a2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80091a4:	4b2a      	ldr	r3, [pc, #168]	; (8009250 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80091a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d003      	beq.n	80091b8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80091b0:	f7ff fa04 	bl	80085bc <HAL_PWREx_GetVoltageRange>
 80091b4:	6178      	str	r0, [r7, #20]
 80091b6:	e014      	b.n	80091e2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80091b8:	4b25      	ldr	r3, [pc, #148]	; (8009250 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80091ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091bc:	4a24      	ldr	r2, [pc, #144]	; (8009250 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80091be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80091c2:	6593      	str	r3, [r2, #88]	; 0x58
 80091c4:	4b22      	ldr	r3, [pc, #136]	; (8009250 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80091c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80091cc:	60fb      	str	r3, [r7, #12]
 80091ce:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80091d0:	f7ff f9f4 	bl	80085bc <HAL_PWREx_GetVoltageRange>
 80091d4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80091d6:	4b1e      	ldr	r3, [pc, #120]	; (8009250 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80091d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091da:	4a1d      	ldr	r2, [pc, #116]	; (8009250 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80091dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80091e0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80091e2:	697b      	ldr	r3, [r7, #20]
 80091e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80091e8:	d10b      	bne.n	8009202 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	2b80      	cmp	r3, #128	; 0x80
 80091ee:	d919      	bls.n	8009224 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	2ba0      	cmp	r3, #160	; 0xa0
 80091f4:	d902      	bls.n	80091fc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80091f6:	2302      	movs	r3, #2
 80091f8:	613b      	str	r3, [r7, #16]
 80091fa:	e013      	b.n	8009224 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80091fc:	2301      	movs	r3, #1
 80091fe:	613b      	str	r3, [r7, #16]
 8009200:	e010      	b.n	8009224 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	2b80      	cmp	r3, #128	; 0x80
 8009206:	d902      	bls.n	800920e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8009208:	2303      	movs	r3, #3
 800920a:	613b      	str	r3, [r7, #16]
 800920c:	e00a      	b.n	8009224 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	2b80      	cmp	r3, #128	; 0x80
 8009212:	d102      	bne.n	800921a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8009214:	2302      	movs	r3, #2
 8009216:	613b      	str	r3, [r7, #16]
 8009218:	e004      	b.n	8009224 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	2b70      	cmp	r3, #112	; 0x70
 800921e:	d101      	bne.n	8009224 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8009220:	2301      	movs	r3, #1
 8009222:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8009224:	4b0b      	ldr	r3, [pc, #44]	; (8009254 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	f023 0207 	bic.w	r2, r3, #7
 800922c:	4909      	ldr	r1, [pc, #36]	; (8009254 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800922e:	693b      	ldr	r3, [r7, #16]
 8009230:	4313      	orrs	r3, r2
 8009232:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8009234:	4b07      	ldr	r3, [pc, #28]	; (8009254 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	f003 0307 	and.w	r3, r3, #7
 800923c:	693a      	ldr	r2, [r7, #16]
 800923e:	429a      	cmp	r2, r3
 8009240:	d001      	beq.n	8009246 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8009242:	2301      	movs	r3, #1
 8009244:	e000      	b.n	8009248 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8009246:	2300      	movs	r3, #0
}
 8009248:	4618      	mov	r0, r3
 800924a:	3718      	adds	r7, #24
 800924c:	46bd      	mov	sp, r7
 800924e:	bd80      	pop	{r7, pc}
 8009250:	40021000 	.word	0x40021000
 8009254:	40022000 	.word	0x40022000

08009258 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009258:	b580      	push	{r7, lr}
 800925a:	b086      	sub	sp, #24
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009260:	2300      	movs	r3, #0
 8009262:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009264:	2300      	movs	r3, #0
 8009266:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009270:	2b00      	cmp	r3, #0
 8009272:	d03f      	beq.n	80092f4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009278:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800927c:	d01c      	beq.n	80092b8 <HAL_RCCEx_PeriphCLKConfig+0x60>
 800927e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009282:	d802      	bhi.n	800928a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8009284:	2b00      	cmp	r3, #0
 8009286:	d00e      	beq.n	80092a6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8009288:	e01f      	b.n	80092ca <HAL_RCCEx_PeriphCLKConfig+0x72>
 800928a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800928e:	d003      	beq.n	8009298 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8009290:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8009294:	d01c      	beq.n	80092d0 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8009296:	e018      	b.n	80092ca <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8009298:	4b85      	ldr	r3, [pc, #532]	; (80094b0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800929a:	68db      	ldr	r3, [r3, #12]
 800929c:	4a84      	ldr	r2, [pc, #528]	; (80094b0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800929e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80092a2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80092a4:	e015      	b.n	80092d2 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	3304      	adds	r3, #4
 80092aa:	2100      	movs	r1, #0
 80092ac:	4618      	mov	r0, r3
 80092ae:	f000 fac9 	bl	8009844 <RCCEx_PLLSAI1_Config>
 80092b2:	4603      	mov	r3, r0
 80092b4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80092b6:	e00c      	b.n	80092d2 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	3320      	adds	r3, #32
 80092bc:	2100      	movs	r1, #0
 80092be:	4618      	mov	r0, r3
 80092c0:	f000 fbb0 	bl	8009a24 <RCCEx_PLLSAI2_Config>
 80092c4:	4603      	mov	r3, r0
 80092c6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80092c8:	e003      	b.n	80092d2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80092ca:	2301      	movs	r3, #1
 80092cc:	74fb      	strb	r3, [r7, #19]
      break;
 80092ce:	e000      	b.n	80092d2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80092d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80092d2:	7cfb      	ldrb	r3, [r7, #19]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d10b      	bne.n	80092f0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80092d8:	4b75      	ldr	r3, [pc, #468]	; (80094b0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80092da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80092de:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80092e6:	4972      	ldr	r1, [pc, #456]	; (80094b0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80092e8:	4313      	orrs	r3, r2
 80092ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80092ee:	e001      	b.n	80092f4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092f0:	7cfb      	ldrb	r3, [r7, #19]
 80092f2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d03f      	beq.n	8009380 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009304:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009308:	d01c      	beq.n	8009344 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800930a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800930e:	d802      	bhi.n	8009316 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8009310:	2b00      	cmp	r3, #0
 8009312:	d00e      	beq.n	8009332 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8009314:	e01f      	b.n	8009356 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8009316:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800931a:	d003      	beq.n	8009324 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 800931c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009320:	d01c      	beq.n	800935c <HAL_RCCEx_PeriphCLKConfig+0x104>
 8009322:	e018      	b.n	8009356 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8009324:	4b62      	ldr	r3, [pc, #392]	; (80094b0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8009326:	68db      	ldr	r3, [r3, #12]
 8009328:	4a61      	ldr	r2, [pc, #388]	; (80094b0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800932a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800932e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8009330:	e015      	b.n	800935e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	3304      	adds	r3, #4
 8009336:	2100      	movs	r1, #0
 8009338:	4618      	mov	r0, r3
 800933a:	f000 fa83 	bl	8009844 <RCCEx_PLLSAI1_Config>
 800933e:	4603      	mov	r3, r0
 8009340:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8009342:	e00c      	b.n	800935e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	3320      	adds	r3, #32
 8009348:	2100      	movs	r1, #0
 800934a:	4618      	mov	r0, r3
 800934c:	f000 fb6a 	bl	8009a24 <RCCEx_PLLSAI2_Config>
 8009350:	4603      	mov	r3, r0
 8009352:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8009354:	e003      	b.n	800935e <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009356:	2301      	movs	r3, #1
 8009358:	74fb      	strb	r3, [r7, #19]
      break;
 800935a:	e000      	b.n	800935e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800935c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800935e:	7cfb      	ldrb	r3, [r7, #19]
 8009360:	2b00      	cmp	r3, #0
 8009362:	d10b      	bne.n	800937c <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8009364:	4b52      	ldr	r3, [pc, #328]	; (80094b0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8009366:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800936a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009372:	494f      	ldr	r1, [pc, #316]	; (80094b0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8009374:	4313      	orrs	r3, r2
 8009376:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800937a:	e001      	b.n	8009380 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800937c:	7cfb      	ldrb	r3, [r7, #19]
 800937e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009388:	2b00      	cmp	r3, #0
 800938a:	f000 80a0 	beq.w	80094ce <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 800938e:	2300      	movs	r3, #0
 8009390:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8009392:	4b47      	ldr	r3, [pc, #284]	; (80094b0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8009394:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009396:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800939a:	2b00      	cmp	r3, #0
 800939c:	d101      	bne.n	80093a2 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 800939e:	2301      	movs	r3, #1
 80093a0:	e000      	b.n	80093a4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80093a2:	2300      	movs	r3, #0
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d00d      	beq.n	80093c4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80093a8:	4b41      	ldr	r3, [pc, #260]	; (80094b0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80093aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80093ac:	4a40      	ldr	r2, [pc, #256]	; (80094b0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80093ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80093b2:	6593      	str	r3, [r2, #88]	; 0x58
 80093b4:	4b3e      	ldr	r3, [pc, #248]	; (80094b0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80093b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80093b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80093bc:	60bb      	str	r3, [r7, #8]
 80093be:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80093c0:	2301      	movs	r3, #1
 80093c2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80093c4:	4b3b      	ldr	r3, [pc, #236]	; (80094b4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	4a3a      	ldr	r2, [pc, #232]	; (80094b4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80093ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80093ce:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80093d0:	f7fd fdea 	bl	8006fa8 <HAL_GetTick>
 80093d4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80093d6:	e009      	b.n	80093ec <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80093d8:	f7fd fde6 	bl	8006fa8 <HAL_GetTick>
 80093dc:	4602      	mov	r2, r0
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	1ad3      	subs	r3, r2, r3
 80093e2:	2b02      	cmp	r3, #2
 80093e4:	d902      	bls.n	80093ec <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 80093e6:	2303      	movs	r3, #3
 80093e8:	74fb      	strb	r3, [r7, #19]
        break;
 80093ea:	e005      	b.n	80093f8 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80093ec:	4b31      	ldr	r3, [pc, #196]	; (80094b4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d0ef      	beq.n	80093d8 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 80093f8:	7cfb      	ldrb	r3, [r7, #19]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d15c      	bne.n	80094b8 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80093fe:	4b2c      	ldr	r3, [pc, #176]	; (80094b0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8009400:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009404:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009408:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800940a:	697b      	ldr	r3, [r7, #20]
 800940c:	2b00      	cmp	r3, #0
 800940e:	d01f      	beq.n	8009450 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009416:	697a      	ldr	r2, [r7, #20]
 8009418:	429a      	cmp	r2, r3
 800941a:	d019      	beq.n	8009450 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800941c:	4b24      	ldr	r3, [pc, #144]	; (80094b0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800941e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009422:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009426:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009428:	4b21      	ldr	r3, [pc, #132]	; (80094b0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800942a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800942e:	4a20      	ldr	r2, [pc, #128]	; (80094b0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8009430:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009434:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009438:	4b1d      	ldr	r3, [pc, #116]	; (80094b0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800943a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800943e:	4a1c      	ldr	r2, [pc, #112]	; (80094b0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8009440:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009444:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8009448:	4a19      	ldr	r2, [pc, #100]	; (80094b0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800944a:	697b      	ldr	r3, [r7, #20]
 800944c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8009450:	697b      	ldr	r3, [r7, #20]
 8009452:	f003 0301 	and.w	r3, r3, #1
 8009456:	2b00      	cmp	r3, #0
 8009458:	d016      	beq.n	8009488 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800945a:	f7fd fda5 	bl	8006fa8 <HAL_GetTick>
 800945e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009460:	e00b      	b.n	800947a <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009462:	f7fd fda1 	bl	8006fa8 <HAL_GetTick>
 8009466:	4602      	mov	r2, r0
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	1ad3      	subs	r3, r2, r3
 800946c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009470:	4293      	cmp	r3, r2
 8009472:	d902      	bls.n	800947a <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8009474:	2303      	movs	r3, #3
 8009476:	74fb      	strb	r3, [r7, #19]
            break;
 8009478:	e006      	b.n	8009488 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800947a:	4b0d      	ldr	r3, [pc, #52]	; (80094b0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800947c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009480:	f003 0302 	and.w	r3, r3, #2
 8009484:	2b00      	cmp	r3, #0
 8009486:	d0ec      	beq.n	8009462 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8009488:	7cfb      	ldrb	r3, [r7, #19]
 800948a:	2b00      	cmp	r3, #0
 800948c:	d10c      	bne.n	80094a8 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800948e:	4b08      	ldr	r3, [pc, #32]	; (80094b0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8009490:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009494:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800949e:	4904      	ldr	r1, [pc, #16]	; (80094b0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80094a0:	4313      	orrs	r3, r2
 80094a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80094a6:	e009      	b.n	80094bc <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80094a8:	7cfb      	ldrb	r3, [r7, #19]
 80094aa:	74bb      	strb	r3, [r7, #18]
 80094ac:	e006      	b.n	80094bc <HAL_RCCEx_PeriphCLKConfig+0x264>
 80094ae:	bf00      	nop
 80094b0:	40021000 	.word	0x40021000
 80094b4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094b8:	7cfb      	ldrb	r3, [r7, #19]
 80094ba:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80094bc:	7c7b      	ldrb	r3, [r7, #17]
 80094be:	2b01      	cmp	r3, #1
 80094c0:	d105      	bne.n	80094ce <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80094c2:	4b9e      	ldr	r3, [pc, #632]	; (800973c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80094c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80094c6:	4a9d      	ldr	r2, [pc, #628]	; (800973c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80094c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80094cc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	f003 0301 	and.w	r3, r3, #1
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d00a      	beq.n	80094f0 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80094da:	4b98      	ldr	r3, [pc, #608]	; (800973c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80094dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80094e0:	f023 0203 	bic.w	r2, r3, #3
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094e8:	4994      	ldr	r1, [pc, #592]	; (800973c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80094ea:	4313      	orrs	r3, r2
 80094ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	f003 0302 	and.w	r3, r3, #2
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d00a      	beq.n	8009512 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80094fc:	4b8f      	ldr	r3, [pc, #572]	; (800973c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80094fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009502:	f023 020c 	bic.w	r2, r3, #12
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800950a:	498c      	ldr	r1, [pc, #560]	; (800973c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800950c:	4313      	orrs	r3, r2
 800950e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	f003 0304 	and.w	r3, r3, #4
 800951a:	2b00      	cmp	r3, #0
 800951c:	d00a      	beq.n	8009534 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800951e:	4b87      	ldr	r3, [pc, #540]	; (800973c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8009520:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009524:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800952c:	4983      	ldr	r1, [pc, #524]	; (800973c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800952e:	4313      	orrs	r3, r2
 8009530:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	f003 0308 	and.w	r3, r3, #8
 800953c:	2b00      	cmp	r3, #0
 800953e:	d00a      	beq.n	8009556 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8009540:	4b7e      	ldr	r3, [pc, #504]	; (800973c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8009542:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009546:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800954e:	497b      	ldr	r1, [pc, #492]	; (800973c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8009550:	4313      	orrs	r3, r2
 8009552:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	f003 0310 	and.w	r3, r3, #16
 800955e:	2b00      	cmp	r3, #0
 8009560:	d00a      	beq.n	8009578 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8009562:	4b76      	ldr	r3, [pc, #472]	; (800973c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8009564:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009568:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009570:	4972      	ldr	r1, [pc, #456]	; (800973c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8009572:	4313      	orrs	r3, r2
 8009574:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	f003 0320 	and.w	r3, r3, #32
 8009580:	2b00      	cmp	r3, #0
 8009582:	d00a      	beq.n	800959a <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009584:	4b6d      	ldr	r3, [pc, #436]	; (800973c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8009586:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800958a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009592:	496a      	ldr	r1, [pc, #424]	; (800973c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8009594:	4313      	orrs	r3, r2
 8009596:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d00a      	beq.n	80095bc <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80095a6:	4b65      	ldr	r3, [pc, #404]	; (800973c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80095a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80095ac:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80095b4:	4961      	ldr	r1, [pc, #388]	; (800973c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80095b6:	4313      	orrs	r3, r2
 80095b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d00a      	beq.n	80095de <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80095c8:	4b5c      	ldr	r3, [pc, #368]	; (800973c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80095ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80095ce:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80095d6:	4959      	ldr	r1, [pc, #356]	; (800973c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80095d8:	4313      	orrs	r3, r2
 80095da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d00a      	beq.n	8009600 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80095ea:	4b54      	ldr	r3, [pc, #336]	; (800973c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80095ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80095f0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80095f8:	4950      	ldr	r1, [pc, #320]	; (800973c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80095fa:	4313      	orrs	r3, r2
 80095fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009608:	2b00      	cmp	r3, #0
 800960a:	d00a      	beq.n	8009622 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800960c:	4b4b      	ldr	r3, [pc, #300]	; (800973c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800960e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009612:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800961a:	4948      	ldr	r1, [pc, #288]	; (800973c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800961c:	4313      	orrs	r3, r2
 800961e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800962a:	2b00      	cmp	r3, #0
 800962c:	d00a      	beq.n	8009644 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800962e:	4b43      	ldr	r3, [pc, #268]	; (800973c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8009630:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009634:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800963c:	493f      	ldr	r1, [pc, #252]	; (800973c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800963e:	4313      	orrs	r3, r2
 8009640:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800964c:	2b00      	cmp	r3, #0
 800964e:	d028      	beq.n	80096a2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009650:	4b3a      	ldr	r3, [pc, #232]	; (800973c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8009652:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009656:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800965e:	4937      	ldr	r1, [pc, #220]	; (800973c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8009660:	4313      	orrs	r3, r2
 8009662:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800966a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800966e:	d106      	bne.n	800967e <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009670:	4b32      	ldr	r3, [pc, #200]	; (800973c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8009672:	68db      	ldr	r3, [r3, #12]
 8009674:	4a31      	ldr	r2, [pc, #196]	; (800973c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8009676:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800967a:	60d3      	str	r3, [r2, #12]
 800967c:	e011      	b.n	80096a2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009682:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009686:	d10c      	bne.n	80096a2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	3304      	adds	r3, #4
 800968c:	2101      	movs	r1, #1
 800968e:	4618      	mov	r0, r3
 8009690:	f000 f8d8 	bl	8009844 <RCCEx_PLLSAI1_Config>
 8009694:	4603      	mov	r3, r0
 8009696:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8009698:	7cfb      	ldrb	r3, [r7, #19]
 800969a:	2b00      	cmp	r3, #0
 800969c:	d001      	beq.n	80096a2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 800969e:	7cfb      	ldrb	r3, [r7, #19]
 80096a0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d028      	beq.n	8009700 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80096ae:	4b23      	ldr	r3, [pc, #140]	; (800973c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80096b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80096b4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096bc:	491f      	ldr	r1, [pc, #124]	; (800973c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80096be:	4313      	orrs	r3, r2
 80096c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80096cc:	d106      	bne.n	80096dc <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80096ce:	4b1b      	ldr	r3, [pc, #108]	; (800973c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80096d0:	68db      	ldr	r3, [r3, #12]
 80096d2:	4a1a      	ldr	r2, [pc, #104]	; (800973c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80096d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80096d8:	60d3      	str	r3, [r2, #12]
 80096da:	e011      	b.n	8009700 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096e0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80096e4:	d10c      	bne.n	8009700 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	3304      	adds	r3, #4
 80096ea:	2101      	movs	r1, #1
 80096ec:	4618      	mov	r0, r3
 80096ee:	f000 f8a9 	bl	8009844 <RCCEx_PLLSAI1_Config>
 80096f2:	4603      	mov	r3, r0
 80096f4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80096f6:	7cfb      	ldrb	r3, [r7, #19]
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d001      	beq.n	8009700 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 80096fc:	7cfb      	ldrb	r3, [r7, #19]
 80096fe:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009708:	2b00      	cmp	r3, #0
 800970a:	d02b      	beq.n	8009764 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800970c:	4b0b      	ldr	r3, [pc, #44]	; (800973c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800970e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009712:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800971a:	4908      	ldr	r1, [pc, #32]	; (800973c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800971c:	4313      	orrs	r3, r2
 800971e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009726:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800972a:	d109      	bne.n	8009740 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800972c:	4b03      	ldr	r3, [pc, #12]	; (800973c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800972e:	68db      	ldr	r3, [r3, #12]
 8009730:	4a02      	ldr	r2, [pc, #8]	; (800973c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8009732:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009736:	60d3      	str	r3, [r2, #12]
 8009738:	e014      	b.n	8009764 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 800973a:	bf00      	nop
 800973c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009744:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009748:	d10c      	bne.n	8009764 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	3304      	adds	r3, #4
 800974e:	2101      	movs	r1, #1
 8009750:	4618      	mov	r0, r3
 8009752:	f000 f877 	bl	8009844 <RCCEx_PLLSAI1_Config>
 8009756:	4603      	mov	r3, r0
 8009758:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800975a:	7cfb      	ldrb	r3, [r7, #19]
 800975c:	2b00      	cmp	r3, #0
 800975e:	d001      	beq.n	8009764 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8009760:	7cfb      	ldrb	r3, [r7, #19]
 8009762:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800976c:	2b00      	cmp	r3, #0
 800976e:	d02f      	beq.n	80097d0 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009770:	4b2b      	ldr	r3, [pc, #172]	; (8009820 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009772:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009776:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800977e:	4928      	ldr	r1, [pc, #160]	; (8009820 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009780:	4313      	orrs	r3, r2
 8009782:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800978a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800978e:	d10d      	bne.n	80097ac <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	3304      	adds	r3, #4
 8009794:	2102      	movs	r1, #2
 8009796:	4618      	mov	r0, r3
 8009798:	f000 f854 	bl	8009844 <RCCEx_PLLSAI1_Config>
 800979c:	4603      	mov	r3, r0
 800979e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80097a0:	7cfb      	ldrb	r3, [r7, #19]
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d014      	beq.n	80097d0 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 80097a6:	7cfb      	ldrb	r3, [r7, #19]
 80097a8:	74bb      	strb	r3, [r7, #18]
 80097aa:	e011      	b.n	80097d0 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80097b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80097b4:	d10c      	bne.n	80097d0 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	3320      	adds	r3, #32
 80097ba:	2102      	movs	r1, #2
 80097bc:	4618      	mov	r0, r3
 80097be:	f000 f931 	bl	8009a24 <RCCEx_PLLSAI2_Config>
 80097c2:	4603      	mov	r3, r0
 80097c4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80097c6:	7cfb      	ldrb	r3, [r7, #19]
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d001      	beq.n	80097d0 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 80097cc:	7cfb      	ldrb	r3, [r7, #19]
 80097ce:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d00a      	beq.n	80097f2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80097dc:	4b10      	ldr	r3, [pc, #64]	; (8009820 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80097de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80097e2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80097ea:	490d      	ldr	r1, [pc, #52]	; (8009820 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80097ec:	4313      	orrs	r3, r2
 80097ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d00b      	beq.n	8009816 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80097fe:	4b08      	ldr	r3, [pc, #32]	; (8009820 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009800:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009804:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800980e:	4904      	ldr	r1, [pc, #16]	; (8009820 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009810:	4313      	orrs	r3, r2
 8009812:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8009816:	7cbb      	ldrb	r3, [r7, #18]
}
 8009818:	4618      	mov	r0, r3
 800981a:	3718      	adds	r7, #24
 800981c:	46bd      	mov	sp, r7
 800981e:	bd80      	pop	{r7, pc}
 8009820:	40021000 	.word	0x40021000

08009824 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8009824:	b480      	push	{r7}
 8009826:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8009828:	4b05      	ldr	r3, [pc, #20]	; (8009840 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	4a04      	ldr	r2, [pc, #16]	; (8009840 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800982e:	f043 0304 	orr.w	r3, r3, #4
 8009832:	6013      	str	r3, [r2, #0]
}
 8009834:	bf00      	nop
 8009836:	46bd      	mov	sp, r7
 8009838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800983c:	4770      	bx	lr
 800983e:	bf00      	nop
 8009840:	40021000 	.word	0x40021000

08009844 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8009844:	b580      	push	{r7, lr}
 8009846:	b084      	sub	sp, #16
 8009848:	af00      	add	r7, sp, #0
 800984a:	6078      	str	r0, [r7, #4]
 800984c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800984e:	2300      	movs	r3, #0
 8009850:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8009852:	4b73      	ldr	r3, [pc, #460]	; (8009a20 <RCCEx_PLLSAI1_Config+0x1dc>)
 8009854:	68db      	ldr	r3, [r3, #12]
 8009856:	f003 0303 	and.w	r3, r3, #3
 800985a:	2b00      	cmp	r3, #0
 800985c:	d018      	beq.n	8009890 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800985e:	4b70      	ldr	r3, [pc, #448]	; (8009a20 <RCCEx_PLLSAI1_Config+0x1dc>)
 8009860:	68db      	ldr	r3, [r3, #12]
 8009862:	f003 0203 	and.w	r2, r3, #3
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	429a      	cmp	r2, r3
 800986c:	d10d      	bne.n	800988a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	681b      	ldr	r3, [r3, #0]
       ||
 8009872:	2b00      	cmp	r3, #0
 8009874:	d009      	beq.n	800988a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8009876:	4b6a      	ldr	r3, [pc, #424]	; (8009a20 <RCCEx_PLLSAI1_Config+0x1dc>)
 8009878:	68db      	ldr	r3, [r3, #12]
 800987a:	091b      	lsrs	r3, r3, #4
 800987c:	f003 0307 	and.w	r3, r3, #7
 8009880:	1c5a      	adds	r2, r3, #1
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	685b      	ldr	r3, [r3, #4]
       ||
 8009886:	429a      	cmp	r2, r3
 8009888:	d044      	beq.n	8009914 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800988a:	2301      	movs	r3, #1
 800988c:	73fb      	strb	r3, [r7, #15]
 800988e:	e041      	b.n	8009914 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	2b02      	cmp	r3, #2
 8009896:	d00c      	beq.n	80098b2 <RCCEx_PLLSAI1_Config+0x6e>
 8009898:	2b03      	cmp	r3, #3
 800989a:	d013      	beq.n	80098c4 <RCCEx_PLLSAI1_Config+0x80>
 800989c:	2b01      	cmp	r3, #1
 800989e:	d120      	bne.n	80098e2 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80098a0:	4b5f      	ldr	r3, [pc, #380]	; (8009a20 <RCCEx_PLLSAI1_Config+0x1dc>)
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	f003 0302 	and.w	r3, r3, #2
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d11d      	bne.n	80098e8 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 80098ac:	2301      	movs	r3, #1
 80098ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80098b0:	e01a      	b.n	80098e8 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80098b2:	4b5b      	ldr	r3, [pc, #364]	; (8009a20 <RCCEx_PLLSAI1_Config+0x1dc>)
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d116      	bne.n	80098ec <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 80098be:	2301      	movs	r3, #1
 80098c0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80098c2:	e013      	b.n	80098ec <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80098c4:	4b56      	ldr	r3, [pc, #344]	; (8009a20 <RCCEx_PLLSAI1_Config+0x1dc>)
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d10f      	bne.n	80098f0 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80098d0:	4b53      	ldr	r3, [pc, #332]	; (8009a20 <RCCEx_PLLSAI1_Config+0x1dc>)
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d109      	bne.n	80098f0 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 80098dc:	2301      	movs	r3, #1
 80098de:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80098e0:	e006      	b.n	80098f0 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 80098e2:	2301      	movs	r3, #1
 80098e4:	73fb      	strb	r3, [r7, #15]
      break;
 80098e6:	e004      	b.n	80098f2 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80098e8:	bf00      	nop
 80098ea:	e002      	b.n	80098f2 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80098ec:	bf00      	nop
 80098ee:	e000      	b.n	80098f2 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80098f0:	bf00      	nop
    }

    if(status == HAL_OK)
 80098f2:	7bfb      	ldrb	r3, [r7, #15]
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d10d      	bne.n	8009914 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80098f8:	4b49      	ldr	r3, [pc, #292]	; (8009a20 <RCCEx_PLLSAI1_Config+0x1dc>)
 80098fa:	68db      	ldr	r3, [r3, #12]
 80098fc:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	6819      	ldr	r1, [r3, #0]
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	685b      	ldr	r3, [r3, #4]
 8009908:	3b01      	subs	r3, #1
 800990a:	011b      	lsls	r3, r3, #4
 800990c:	430b      	orrs	r3, r1
 800990e:	4944      	ldr	r1, [pc, #272]	; (8009a20 <RCCEx_PLLSAI1_Config+0x1dc>)
 8009910:	4313      	orrs	r3, r2
 8009912:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8009914:	7bfb      	ldrb	r3, [r7, #15]
 8009916:	2b00      	cmp	r3, #0
 8009918:	d17d      	bne.n	8009a16 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800991a:	4b41      	ldr	r3, [pc, #260]	; (8009a20 <RCCEx_PLLSAI1_Config+0x1dc>)
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	4a40      	ldr	r2, [pc, #256]	; (8009a20 <RCCEx_PLLSAI1_Config+0x1dc>)
 8009920:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009924:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009926:	f7fd fb3f 	bl	8006fa8 <HAL_GetTick>
 800992a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800992c:	e009      	b.n	8009942 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800992e:	f7fd fb3b 	bl	8006fa8 <HAL_GetTick>
 8009932:	4602      	mov	r2, r0
 8009934:	68bb      	ldr	r3, [r7, #8]
 8009936:	1ad3      	subs	r3, r2, r3
 8009938:	2b02      	cmp	r3, #2
 800993a:	d902      	bls.n	8009942 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 800993c:	2303      	movs	r3, #3
 800993e:	73fb      	strb	r3, [r7, #15]
        break;
 8009940:	e005      	b.n	800994e <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8009942:	4b37      	ldr	r3, [pc, #220]	; (8009a20 <RCCEx_PLLSAI1_Config+0x1dc>)
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800994a:	2b00      	cmp	r3, #0
 800994c:	d1ef      	bne.n	800992e <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800994e:	7bfb      	ldrb	r3, [r7, #15]
 8009950:	2b00      	cmp	r3, #0
 8009952:	d160      	bne.n	8009a16 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8009954:	683b      	ldr	r3, [r7, #0]
 8009956:	2b00      	cmp	r3, #0
 8009958:	d111      	bne.n	800997e <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800995a:	4b31      	ldr	r3, [pc, #196]	; (8009a20 <RCCEx_PLLSAI1_Config+0x1dc>)
 800995c:	691b      	ldr	r3, [r3, #16]
 800995e:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8009962:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009966:	687a      	ldr	r2, [r7, #4]
 8009968:	6892      	ldr	r2, [r2, #8]
 800996a:	0211      	lsls	r1, r2, #8
 800996c:	687a      	ldr	r2, [r7, #4]
 800996e:	68d2      	ldr	r2, [r2, #12]
 8009970:	0912      	lsrs	r2, r2, #4
 8009972:	0452      	lsls	r2, r2, #17
 8009974:	430a      	orrs	r2, r1
 8009976:	492a      	ldr	r1, [pc, #168]	; (8009a20 <RCCEx_PLLSAI1_Config+0x1dc>)
 8009978:	4313      	orrs	r3, r2
 800997a:	610b      	str	r3, [r1, #16]
 800997c:	e027      	b.n	80099ce <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800997e:	683b      	ldr	r3, [r7, #0]
 8009980:	2b01      	cmp	r3, #1
 8009982:	d112      	bne.n	80099aa <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8009984:	4b26      	ldr	r3, [pc, #152]	; (8009a20 <RCCEx_PLLSAI1_Config+0x1dc>)
 8009986:	691b      	ldr	r3, [r3, #16]
 8009988:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800998c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8009990:	687a      	ldr	r2, [r7, #4]
 8009992:	6892      	ldr	r2, [r2, #8]
 8009994:	0211      	lsls	r1, r2, #8
 8009996:	687a      	ldr	r2, [r7, #4]
 8009998:	6912      	ldr	r2, [r2, #16]
 800999a:	0852      	lsrs	r2, r2, #1
 800999c:	3a01      	subs	r2, #1
 800999e:	0552      	lsls	r2, r2, #21
 80099a0:	430a      	orrs	r2, r1
 80099a2:	491f      	ldr	r1, [pc, #124]	; (8009a20 <RCCEx_PLLSAI1_Config+0x1dc>)
 80099a4:	4313      	orrs	r3, r2
 80099a6:	610b      	str	r3, [r1, #16]
 80099a8:	e011      	b.n	80099ce <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80099aa:	4b1d      	ldr	r3, [pc, #116]	; (8009a20 <RCCEx_PLLSAI1_Config+0x1dc>)
 80099ac:	691b      	ldr	r3, [r3, #16]
 80099ae:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80099b2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80099b6:	687a      	ldr	r2, [r7, #4]
 80099b8:	6892      	ldr	r2, [r2, #8]
 80099ba:	0211      	lsls	r1, r2, #8
 80099bc:	687a      	ldr	r2, [r7, #4]
 80099be:	6952      	ldr	r2, [r2, #20]
 80099c0:	0852      	lsrs	r2, r2, #1
 80099c2:	3a01      	subs	r2, #1
 80099c4:	0652      	lsls	r2, r2, #25
 80099c6:	430a      	orrs	r2, r1
 80099c8:	4915      	ldr	r1, [pc, #84]	; (8009a20 <RCCEx_PLLSAI1_Config+0x1dc>)
 80099ca:	4313      	orrs	r3, r2
 80099cc:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80099ce:	4b14      	ldr	r3, [pc, #80]	; (8009a20 <RCCEx_PLLSAI1_Config+0x1dc>)
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	4a13      	ldr	r2, [pc, #76]	; (8009a20 <RCCEx_PLLSAI1_Config+0x1dc>)
 80099d4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80099d8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80099da:	f7fd fae5 	bl	8006fa8 <HAL_GetTick>
 80099de:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80099e0:	e009      	b.n	80099f6 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80099e2:	f7fd fae1 	bl	8006fa8 <HAL_GetTick>
 80099e6:	4602      	mov	r2, r0
 80099e8:	68bb      	ldr	r3, [r7, #8]
 80099ea:	1ad3      	subs	r3, r2, r3
 80099ec:	2b02      	cmp	r3, #2
 80099ee:	d902      	bls.n	80099f6 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 80099f0:	2303      	movs	r3, #3
 80099f2:	73fb      	strb	r3, [r7, #15]
          break;
 80099f4:	e005      	b.n	8009a02 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80099f6:	4b0a      	ldr	r3, [pc, #40]	; (8009a20 <RCCEx_PLLSAI1_Config+0x1dc>)
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d0ef      	beq.n	80099e2 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8009a02:	7bfb      	ldrb	r3, [r7, #15]
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d106      	bne.n	8009a16 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8009a08:	4b05      	ldr	r3, [pc, #20]	; (8009a20 <RCCEx_PLLSAI1_Config+0x1dc>)
 8009a0a:	691a      	ldr	r2, [r3, #16]
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	699b      	ldr	r3, [r3, #24]
 8009a10:	4903      	ldr	r1, [pc, #12]	; (8009a20 <RCCEx_PLLSAI1_Config+0x1dc>)
 8009a12:	4313      	orrs	r3, r2
 8009a14:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8009a16:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a18:	4618      	mov	r0, r3
 8009a1a:	3710      	adds	r7, #16
 8009a1c:	46bd      	mov	sp, r7
 8009a1e:	bd80      	pop	{r7, pc}
 8009a20:	40021000 	.word	0x40021000

08009a24 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8009a24:	b580      	push	{r7, lr}
 8009a26:	b084      	sub	sp, #16
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	6078      	str	r0, [r7, #4]
 8009a2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009a2e:	2300      	movs	r3, #0
 8009a30:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8009a32:	4b68      	ldr	r3, [pc, #416]	; (8009bd4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8009a34:	68db      	ldr	r3, [r3, #12]
 8009a36:	f003 0303 	and.w	r3, r3, #3
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d018      	beq.n	8009a70 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8009a3e:	4b65      	ldr	r3, [pc, #404]	; (8009bd4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8009a40:	68db      	ldr	r3, [r3, #12]
 8009a42:	f003 0203 	and.w	r2, r3, #3
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	429a      	cmp	r2, r3
 8009a4c:	d10d      	bne.n	8009a6a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	681b      	ldr	r3, [r3, #0]
       ||
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d009      	beq.n	8009a6a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8009a56:	4b5f      	ldr	r3, [pc, #380]	; (8009bd4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8009a58:	68db      	ldr	r3, [r3, #12]
 8009a5a:	091b      	lsrs	r3, r3, #4
 8009a5c:	f003 0307 	and.w	r3, r3, #7
 8009a60:	1c5a      	adds	r2, r3, #1
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	685b      	ldr	r3, [r3, #4]
       ||
 8009a66:	429a      	cmp	r2, r3
 8009a68:	d044      	beq.n	8009af4 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8009a6a:	2301      	movs	r3, #1
 8009a6c:	73fb      	strb	r3, [r7, #15]
 8009a6e:	e041      	b.n	8009af4 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	2b02      	cmp	r3, #2
 8009a76:	d00c      	beq.n	8009a92 <RCCEx_PLLSAI2_Config+0x6e>
 8009a78:	2b03      	cmp	r3, #3
 8009a7a:	d013      	beq.n	8009aa4 <RCCEx_PLLSAI2_Config+0x80>
 8009a7c:	2b01      	cmp	r3, #1
 8009a7e:	d120      	bne.n	8009ac2 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8009a80:	4b54      	ldr	r3, [pc, #336]	; (8009bd4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	f003 0302 	and.w	r3, r3, #2
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d11d      	bne.n	8009ac8 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8009a8c:	2301      	movs	r3, #1
 8009a8e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009a90:	e01a      	b.n	8009ac8 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8009a92:	4b50      	ldr	r3, [pc, #320]	; (8009bd4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d116      	bne.n	8009acc <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8009a9e:	2301      	movs	r3, #1
 8009aa0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009aa2:	e013      	b.n	8009acc <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8009aa4:	4b4b      	ldr	r3, [pc, #300]	; (8009bd4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d10f      	bne.n	8009ad0 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8009ab0:	4b48      	ldr	r3, [pc, #288]	; (8009bd4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d109      	bne.n	8009ad0 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8009abc:	2301      	movs	r3, #1
 8009abe:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009ac0:	e006      	b.n	8009ad0 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8009ac2:	2301      	movs	r3, #1
 8009ac4:	73fb      	strb	r3, [r7, #15]
      break;
 8009ac6:	e004      	b.n	8009ad2 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8009ac8:	bf00      	nop
 8009aca:	e002      	b.n	8009ad2 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8009acc:	bf00      	nop
 8009ace:	e000      	b.n	8009ad2 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8009ad0:	bf00      	nop
    }

    if(status == HAL_OK)
 8009ad2:	7bfb      	ldrb	r3, [r7, #15]
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d10d      	bne.n	8009af4 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8009ad8:	4b3e      	ldr	r3, [pc, #248]	; (8009bd4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8009ada:	68db      	ldr	r3, [r3, #12]
 8009adc:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	6819      	ldr	r1, [r3, #0]
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	685b      	ldr	r3, [r3, #4]
 8009ae8:	3b01      	subs	r3, #1
 8009aea:	011b      	lsls	r3, r3, #4
 8009aec:	430b      	orrs	r3, r1
 8009aee:	4939      	ldr	r1, [pc, #228]	; (8009bd4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8009af0:	4313      	orrs	r3, r2
 8009af2:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8009af4:	7bfb      	ldrb	r3, [r7, #15]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d167      	bne.n	8009bca <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8009afa:	4b36      	ldr	r3, [pc, #216]	; (8009bd4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	4a35      	ldr	r2, [pc, #212]	; (8009bd4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8009b00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009b04:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009b06:	f7fd fa4f 	bl	8006fa8 <HAL_GetTick>
 8009b0a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8009b0c:	e009      	b.n	8009b22 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8009b0e:	f7fd fa4b 	bl	8006fa8 <HAL_GetTick>
 8009b12:	4602      	mov	r2, r0
 8009b14:	68bb      	ldr	r3, [r7, #8]
 8009b16:	1ad3      	subs	r3, r2, r3
 8009b18:	2b02      	cmp	r3, #2
 8009b1a:	d902      	bls.n	8009b22 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8009b1c:	2303      	movs	r3, #3
 8009b1e:	73fb      	strb	r3, [r7, #15]
        break;
 8009b20:	e005      	b.n	8009b2e <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8009b22:	4b2c      	ldr	r3, [pc, #176]	; (8009bd4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d1ef      	bne.n	8009b0e <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8009b2e:	7bfb      	ldrb	r3, [r7, #15]
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d14a      	bne.n	8009bca <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8009b34:	683b      	ldr	r3, [r7, #0]
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d111      	bne.n	8009b5e <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8009b3a:	4b26      	ldr	r3, [pc, #152]	; (8009bd4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8009b3c:	695b      	ldr	r3, [r3, #20]
 8009b3e:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8009b42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009b46:	687a      	ldr	r2, [r7, #4]
 8009b48:	6892      	ldr	r2, [r2, #8]
 8009b4a:	0211      	lsls	r1, r2, #8
 8009b4c:	687a      	ldr	r2, [r7, #4]
 8009b4e:	68d2      	ldr	r2, [r2, #12]
 8009b50:	0912      	lsrs	r2, r2, #4
 8009b52:	0452      	lsls	r2, r2, #17
 8009b54:	430a      	orrs	r2, r1
 8009b56:	491f      	ldr	r1, [pc, #124]	; (8009bd4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8009b58:	4313      	orrs	r3, r2
 8009b5a:	614b      	str	r3, [r1, #20]
 8009b5c:	e011      	b.n	8009b82 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8009b5e:	4b1d      	ldr	r3, [pc, #116]	; (8009bd4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8009b60:	695b      	ldr	r3, [r3, #20]
 8009b62:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8009b66:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8009b6a:	687a      	ldr	r2, [r7, #4]
 8009b6c:	6892      	ldr	r2, [r2, #8]
 8009b6e:	0211      	lsls	r1, r2, #8
 8009b70:	687a      	ldr	r2, [r7, #4]
 8009b72:	6912      	ldr	r2, [r2, #16]
 8009b74:	0852      	lsrs	r2, r2, #1
 8009b76:	3a01      	subs	r2, #1
 8009b78:	0652      	lsls	r2, r2, #25
 8009b7a:	430a      	orrs	r2, r1
 8009b7c:	4915      	ldr	r1, [pc, #84]	; (8009bd4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8009b7e:	4313      	orrs	r3, r2
 8009b80:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8009b82:	4b14      	ldr	r3, [pc, #80]	; (8009bd4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	4a13      	ldr	r2, [pc, #76]	; (8009bd4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8009b88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009b8c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009b8e:	f7fd fa0b 	bl	8006fa8 <HAL_GetTick>
 8009b92:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8009b94:	e009      	b.n	8009baa <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8009b96:	f7fd fa07 	bl	8006fa8 <HAL_GetTick>
 8009b9a:	4602      	mov	r2, r0
 8009b9c:	68bb      	ldr	r3, [r7, #8]
 8009b9e:	1ad3      	subs	r3, r2, r3
 8009ba0:	2b02      	cmp	r3, #2
 8009ba2:	d902      	bls.n	8009baa <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8009ba4:	2303      	movs	r3, #3
 8009ba6:	73fb      	strb	r3, [r7, #15]
          break;
 8009ba8:	e005      	b.n	8009bb6 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8009baa:	4b0a      	ldr	r3, [pc, #40]	; (8009bd4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d0ef      	beq.n	8009b96 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8009bb6:	7bfb      	ldrb	r3, [r7, #15]
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d106      	bne.n	8009bca <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8009bbc:	4b05      	ldr	r3, [pc, #20]	; (8009bd4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8009bbe:	695a      	ldr	r2, [r3, #20]
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	695b      	ldr	r3, [r3, #20]
 8009bc4:	4903      	ldr	r1, [pc, #12]	; (8009bd4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8009bc6:	4313      	orrs	r3, r2
 8009bc8:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8009bca:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bcc:	4618      	mov	r0, r3
 8009bce:	3710      	adds	r7, #16
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	bd80      	pop	{r7, pc}
 8009bd4:	40021000 	.word	0x40021000

08009bd8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009bd8:	b580      	push	{r7, lr}
 8009bda:	b082      	sub	sp, #8
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d101      	bne.n	8009bea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009be6:	2301      	movs	r3, #1
 8009be8:	e040      	b.n	8009c6c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d106      	bne.n	8009c00 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	2200      	movs	r2, #0
 8009bf6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009bfa:	6878      	ldr	r0, [r7, #4]
 8009bfc:	f7f7 fa82 	bl	8001104 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	2224      	movs	r2, #36	; 0x24
 8009c04:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	681a      	ldr	r2, [r3, #0]
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	f022 0201 	bic.w	r2, r2, #1
 8009c14:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009c16:	6878      	ldr	r0, [r7, #4]
 8009c18:	f000 f8c0 	bl	8009d9c <UART_SetConfig>
 8009c1c:	4603      	mov	r3, r0
 8009c1e:	2b01      	cmp	r3, #1
 8009c20:	d101      	bne.n	8009c26 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8009c22:	2301      	movs	r3, #1
 8009c24:	e022      	b.n	8009c6c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d002      	beq.n	8009c34 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8009c2e:	6878      	ldr	r0, [r7, #4]
 8009c30:	f000 fb3e 	bl	800a2b0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	685a      	ldr	r2, [r3, #4]
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009c42:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	689a      	ldr	r2, [r3, #8]
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009c52:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	681a      	ldr	r2, [r3, #0]
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	f042 0201 	orr.w	r2, r2, #1
 8009c62:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009c64:	6878      	ldr	r0, [r7, #4]
 8009c66:	f000 fbc5 	bl	800a3f4 <UART_CheckIdleState>
 8009c6a:	4603      	mov	r3, r0
}
 8009c6c:	4618      	mov	r0, r3
 8009c6e:	3708      	adds	r7, #8
 8009c70:	46bd      	mov	sp, r7
 8009c72:	bd80      	pop	{r7, pc}

08009c74 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009c74:	b580      	push	{r7, lr}
 8009c76:	b08a      	sub	sp, #40	; 0x28
 8009c78:	af02      	add	r7, sp, #8
 8009c7a:	60f8      	str	r0, [r7, #12]
 8009c7c:	60b9      	str	r1, [r7, #8]
 8009c7e:	603b      	str	r3, [r7, #0]
 8009c80:	4613      	mov	r3, r2
 8009c82:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009c88:	2b20      	cmp	r3, #32
 8009c8a:	f040 8081 	bne.w	8009d90 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8009c8e:	68bb      	ldr	r3, [r7, #8]
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d002      	beq.n	8009c9a <HAL_UART_Transmit+0x26>
 8009c94:	88fb      	ldrh	r3, [r7, #6]
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d101      	bne.n	8009c9e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8009c9a:	2301      	movs	r3, #1
 8009c9c:	e079      	b.n	8009d92 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8009ca4:	2b01      	cmp	r3, #1
 8009ca6:	d101      	bne.n	8009cac <HAL_UART_Transmit+0x38>
 8009ca8:	2302      	movs	r3, #2
 8009caa:	e072      	b.n	8009d92 <HAL_UART_Transmit+0x11e>
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	2201      	movs	r2, #1
 8009cb0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	2221      	movs	r2, #33	; 0x21
 8009cbe:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8009cc0:	f7fd f972 	bl	8006fa8 <HAL_GetTick>
 8009cc4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	88fa      	ldrh	r2, [r7, #6]
 8009cca:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	88fa      	ldrh	r2, [r7, #6]
 8009cd2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	689b      	ldr	r3, [r3, #8]
 8009cda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009cde:	d108      	bne.n	8009cf2 <HAL_UART_Transmit+0x7e>
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	691b      	ldr	r3, [r3, #16]
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d104      	bne.n	8009cf2 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8009ce8:	2300      	movs	r3, #0
 8009cea:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009cec:	68bb      	ldr	r3, [r7, #8]
 8009cee:	61bb      	str	r3, [r7, #24]
 8009cf0:	e003      	b.n	8009cfa <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8009cf2:	68bb      	ldr	r3, [r7, #8]
 8009cf4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009cf6:	2300      	movs	r3, #0
 8009cf8:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	2200      	movs	r2, #0
 8009cfe:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8009d02:	e02d      	b.n	8009d60 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009d04:	683b      	ldr	r3, [r7, #0]
 8009d06:	9300      	str	r3, [sp, #0]
 8009d08:	697b      	ldr	r3, [r7, #20]
 8009d0a:	2200      	movs	r2, #0
 8009d0c:	2180      	movs	r1, #128	; 0x80
 8009d0e:	68f8      	ldr	r0, [r7, #12]
 8009d10:	f000 fbb5 	bl	800a47e <UART_WaitOnFlagUntilTimeout>
 8009d14:	4603      	mov	r3, r0
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d001      	beq.n	8009d1e <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 8009d1a:	2303      	movs	r3, #3
 8009d1c:	e039      	b.n	8009d92 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8009d1e:	69fb      	ldr	r3, [r7, #28]
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d10b      	bne.n	8009d3c <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009d24:	69bb      	ldr	r3, [r7, #24]
 8009d26:	881a      	ldrh	r2, [r3, #0]
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009d30:	b292      	uxth	r2, r2
 8009d32:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8009d34:	69bb      	ldr	r3, [r7, #24]
 8009d36:	3302      	adds	r3, #2
 8009d38:	61bb      	str	r3, [r7, #24]
 8009d3a:	e008      	b.n	8009d4e <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009d3c:	69fb      	ldr	r3, [r7, #28]
 8009d3e:	781a      	ldrb	r2, [r3, #0]
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	b292      	uxth	r2, r2
 8009d46:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8009d48:	69fb      	ldr	r3, [r7, #28]
 8009d4a:	3301      	adds	r3, #1
 8009d4c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009d54:	b29b      	uxth	r3, r3
 8009d56:	3b01      	subs	r3, #1
 8009d58:	b29a      	uxth	r2, r3
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009d66:	b29b      	uxth	r3, r3
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d1cb      	bne.n	8009d04 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009d6c:	683b      	ldr	r3, [r7, #0]
 8009d6e:	9300      	str	r3, [sp, #0]
 8009d70:	697b      	ldr	r3, [r7, #20]
 8009d72:	2200      	movs	r2, #0
 8009d74:	2140      	movs	r1, #64	; 0x40
 8009d76:	68f8      	ldr	r0, [r7, #12]
 8009d78:	f000 fb81 	bl	800a47e <UART_WaitOnFlagUntilTimeout>
 8009d7c:	4603      	mov	r3, r0
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d001      	beq.n	8009d86 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8009d82:	2303      	movs	r3, #3
 8009d84:	e005      	b.n	8009d92 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	2220      	movs	r2, #32
 8009d8a:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8009d8c:	2300      	movs	r3, #0
 8009d8e:	e000      	b.n	8009d92 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8009d90:	2302      	movs	r3, #2
  }
}
 8009d92:	4618      	mov	r0, r3
 8009d94:	3720      	adds	r7, #32
 8009d96:	46bd      	mov	sp, r7
 8009d98:	bd80      	pop	{r7, pc}
	...

08009d9c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009d9c:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8009da0:	b088      	sub	sp, #32
 8009da2:	af00      	add	r7, sp, #0
 8009da4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009da6:	2300      	movs	r3, #0
 8009da8:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	689a      	ldr	r2, [r3, #8]
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	691b      	ldr	r3, [r3, #16]
 8009db2:	431a      	orrs	r2, r3
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	695b      	ldr	r3, [r3, #20]
 8009db8:	431a      	orrs	r2, r3
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	69db      	ldr	r3, [r3, #28]
 8009dbe:	4313      	orrs	r3, r2
 8009dc0:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	681a      	ldr	r2, [r3, #0]
 8009dc8:	4bac      	ldr	r3, [pc, #688]	; (800a07c <UART_SetConfig+0x2e0>)
 8009dca:	4013      	ands	r3, r2
 8009dcc:	687a      	ldr	r2, [r7, #4]
 8009dce:	6812      	ldr	r2, [r2, #0]
 8009dd0:	69f9      	ldr	r1, [r7, #28]
 8009dd2:	430b      	orrs	r3, r1
 8009dd4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	685b      	ldr	r3, [r3, #4]
 8009ddc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	68da      	ldr	r2, [r3, #12]
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	430a      	orrs	r2, r1
 8009dea:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	699b      	ldr	r3, [r3, #24]
 8009df0:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	4aa2      	ldr	r2, [pc, #648]	; (800a080 <UART_SetConfig+0x2e4>)
 8009df8:	4293      	cmp	r3, r2
 8009dfa:	d004      	beq.n	8009e06 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	6a1b      	ldr	r3, [r3, #32]
 8009e00:	69fa      	ldr	r2, [r7, #28]
 8009e02:	4313      	orrs	r3, r2
 8009e04:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	689b      	ldr	r3, [r3, #8]
 8009e0c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	69fa      	ldr	r2, [r7, #28]
 8009e16:	430a      	orrs	r2, r1
 8009e18:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	4a99      	ldr	r2, [pc, #612]	; (800a084 <UART_SetConfig+0x2e8>)
 8009e20:	4293      	cmp	r3, r2
 8009e22:	d121      	bne.n	8009e68 <UART_SetConfig+0xcc>
 8009e24:	4b98      	ldr	r3, [pc, #608]	; (800a088 <UART_SetConfig+0x2ec>)
 8009e26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e2a:	f003 0303 	and.w	r3, r3, #3
 8009e2e:	2b03      	cmp	r3, #3
 8009e30:	d816      	bhi.n	8009e60 <UART_SetConfig+0xc4>
 8009e32:	a201      	add	r2, pc, #4	; (adr r2, 8009e38 <UART_SetConfig+0x9c>)
 8009e34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e38:	08009e49 	.word	0x08009e49
 8009e3c:	08009e55 	.word	0x08009e55
 8009e40:	08009e4f 	.word	0x08009e4f
 8009e44:	08009e5b 	.word	0x08009e5b
 8009e48:	2301      	movs	r3, #1
 8009e4a:	76fb      	strb	r3, [r7, #27]
 8009e4c:	e0e8      	b.n	800a020 <UART_SetConfig+0x284>
 8009e4e:	2302      	movs	r3, #2
 8009e50:	76fb      	strb	r3, [r7, #27]
 8009e52:	e0e5      	b.n	800a020 <UART_SetConfig+0x284>
 8009e54:	2304      	movs	r3, #4
 8009e56:	76fb      	strb	r3, [r7, #27]
 8009e58:	e0e2      	b.n	800a020 <UART_SetConfig+0x284>
 8009e5a:	2308      	movs	r3, #8
 8009e5c:	76fb      	strb	r3, [r7, #27]
 8009e5e:	e0df      	b.n	800a020 <UART_SetConfig+0x284>
 8009e60:	2310      	movs	r3, #16
 8009e62:	76fb      	strb	r3, [r7, #27]
 8009e64:	bf00      	nop
 8009e66:	e0db      	b.n	800a020 <UART_SetConfig+0x284>
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	4a87      	ldr	r2, [pc, #540]	; (800a08c <UART_SetConfig+0x2f0>)
 8009e6e:	4293      	cmp	r3, r2
 8009e70:	d134      	bne.n	8009edc <UART_SetConfig+0x140>
 8009e72:	4b85      	ldr	r3, [pc, #532]	; (800a088 <UART_SetConfig+0x2ec>)
 8009e74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e78:	f003 030c 	and.w	r3, r3, #12
 8009e7c:	2b0c      	cmp	r3, #12
 8009e7e:	d829      	bhi.n	8009ed4 <UART_SetConfig+0x138>
 8009e80:	a201      	add	r2, pc, #4	; (adr r2, 8009e88 <UART_SetConfig+0xec>)
 8009e82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e86:	bf00      	nop
 8009e88:	08009ebd 	.word	0x08009ebd
 8009e8c:	08009ed5 	.word	0x08009ed5
 8009e90:	08009ed5 	.word	0x08009ed5
 8009e94:	08009ed5 	.word	0x08009ed5
 8009e98:	08009ec9 	.word	0x08009ec9
 8009e9c:	08009ed5 	.word	0x08009ed5
 8009ea0:	08009ed5 	.word	0x08009ed5
 8009ea4:	08009ed5 	.word	0x08009ed5
 8009ea8:	08009ec3 	.word	0x08009ec3
 8009eac:	08009ed5 	.word	0x08009ed5
 8009eb0:	08009ed5 	.word	0x08009ed5
 8009eb4:	08009ed5 	.word	0x08009ed5
 8009eb8:	08009ecf 	.word	0x08009ecf
 8009ebc:	2300      	movs	r3, #0
 8009ebe:	76fb      	strb	r3, [r7, #27]
 8009ec0:	e0ae      	b.n	800a020 <UART_SetConfig+0x284>
 8009ec2:	2302      	movs	r3, #2
 8009ec4:	76fb      	strb	r3, [r7, #27]
 8009ec6:	e0ab      	b.n	800a020 <UART_SetConfig+0x284>
 8009ec8:	2304      	movs	r3, #4
 8009eca:	76fb      	strb	r3, [r7, #27]
 8009ecc:	e0a8      	b.n	800a020 <UART_SetConfig+0x284>
 8009ece:	2308      	movs	r3, #8
 8009ed0:	76fb      	strb	r3, [r7, #27]
 8009ed2:	e0a5      	b.n	800a020 <UART_SetConfig+0x284>
 8009ed4:	2310      	movs	r3, #16
 8009ed6:	76fb      	strb	r3, [r7, #27]
 8009ed8:	bf00      	nop
 8009eda:	e0a1      	b.n	800a020 <UART_SetConfig+0x284>
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	4a6b      	ldr	r2, [pc, #428]	; (800a090 <UART_SetConfig+0x2f4>)
 8009ee2:	4293      	cmp	r3, r2
 8009ee4:	d120      	bne.n	8009f28 <UART_SetConfig+0x18c>
 8009ee6:	4b68      	ldr	r3, [pc, #416]	; (800a088 <UART_SetConfig+0x2ec>)
 8009ee8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009eec:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009ef0:	2b10      	cmp	r3, #16
 8009ef2:	d00f      	beq.n	8009f14 <UART_SetConfig+0x178>
 8009ef4:	2b10      	cmp	r3, #16
 8009ef6:	d802      	bhi.n	8009efe <UART_SetConfig+0x162>
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d005      	beq.n	8009f08 <UART_SetConfig+0x16c>
 8009efc:	e010      	b.n	8009f20 <UART_SetConfig+0x184>
 8009efe:	2b20      	cmp	r3, #32
 8009f00:	d005      	beq.n	8009f0e <UART_SetConfig+0x172>
 8009f02:	2b30      	cmp	r3, #48	; 0x30
 8009f04:	d009      	beq.n	8009f1a <UART_SetConfig+0x17e>
 8009f06:	e00b      	b.n	8009f20 <UART_SetConfig+0x184>
 8009f08:	2300      	movs	r3, #0
 8009f0a:	76fb      	strb	r3, [r7, #27]
 8009f0c:	e088      	b.n	800a020 <UART_SetConfig+0x284>
 8009f0e:	2302      	movs	r3, #2
 8009f10:	76fb      	strb	r3, [r7, #27]
 8009f12:	e085      	b.n	800a020 <UART_SetConfig+0x284>
 8009f14:	2304      	movs	r3, #4
 8009f16:	76fb      	strb	r3, [r7, #27]
 8009f18:	e082      	b.n	800a020 <UART_SetConfig+0x284>
 8009f1a:	2308      	movs	r3, #8
 8009f1c:	76fb      	strb	r3, [r7, #27]
 8009f1e:	e07f      	b.n	800a020 <UART_SetConfig+0x284>
 8009f20:	2310      	movs	r3, #16
 8009f22:	76fb      	strb	r3, [r7, #27]
 8009f24:	bf00      	nop
 8009f26:	e07b      	b.n	800a020 <UART_SetConfig+0x284>
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	4a59      	ldr	r2, [pc, #356]	; (800a094 <UART_SetConfig+0x2f8>)
 8009f2e:	4293      	cmp	r3, r2
 8009f30:	d120      	bne.n	8009f74 <UART_SetConfig+0x1d8>
 8009f32:	4b55      	ldr	r3, [pc, #340]	; (800a088 <UART_SetConfig+0x2ec>)
 8009f34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f38:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009f3c:	2b40      	cmp	r3, #64	; 0x40
 8009f3e:	d00f      	beq.n	8009f60 <UART_SetConfig+0x1c4>
 8009f40:	2b40      	cmp	r3, #64	; 0x40
 8009f42:	d802      	bhi.n	8009f4a <UART_SetConfig+0x1ae>
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d005      	beq.n	8009f54 <UART_SetConfig+0x1b8>
 8009f48:	e010      	b.n	8009f6c <UART_SetConfig+0x1d0>
 8009f4a:	2b80      	cmp	r3, #128	; 0x80
 8009f4c:	d005      	beq.n	8009f5a <UART_SetConfig+0x1be>
 8009f4e:	2bc0      	cmp	r3, #192	; 0xc0
 8009f50:	d009      	beq.n	8009f66 <UART_SetConfig+0x1ca>
 8009f52:	e00b      	b.n	8009f6c <UART_SetConfig+0x1d0>
 8009f54:	2300      	movs	r3, #0
 8009f56:	76fb      	strb	r3, [r7, #27]
 8009f58:	e062      	b.n	800a020 <UART_SetConfig+0x284>
 8009f5a:	2302      	movs	r3, #2
 8009f5c:	76fb      	strb	r3, [r7, #27]
 8009f5e:	e05f      	b.n	800a020 <UART_SetConfig+0x284>
 8009f60:	2304      	movs	r3, #4
 8009f62:	76fb      	strb	r3, [r7, #27]
 8009f64:	e05c      	b.n	800a020 <UART_SetConfig+0x284>
 8009f66:	2308      	movs	r3, #8
 8009f68:	76fb      	strb	r3, [r7, #27]
 8009f6a:	e059      	b.n	800a020 <UART_SetConfig+0x284>
 8009f6c:	2310      	movs	r3, #16
 8009f6e:	76fb      	strb	r3, [r7, #27]
 8009f70:	bf00      	nop
 8009f72:	e055      	b.n	800a020 <UART_SetConfig+0x284>
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	4a47      	ldr	r2, [pc, #284]	; (800a098 <UART_SetConfig+0x2fc>)
 8009f7a:	4293      	cmp	r3, r2
 8009f7c:	d124      	bne.n	8009fc8 <UART_SetConfig+0x22c>
 8009f7e:	4b42      	ldr	r3, [pc, #264]	; (800a088 <UART_SetConfig+0x2ec>)
 8009f80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f84:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009f88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009f8c:	d012      	beq.n	8009fb4 <UART_SetConfig+0x218>
 8009f8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009f92:	d802      	bhi.n	8009f9a <UART_SetConfig+0x1fe>
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d007      	beq.n	8009fa8 <UART_SetConfig+0x20c>
 8009f98:	e012      	b.n	8009fc0 <UART_SetConfig+0x224>
 8009f9a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009f9e:	d006      	beq.n	8009fae <UART_SetConfig+0x212>
 8009fa0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009fa4:	d009      	beq.n	8009fba <UART_SetConfig+0x21e>
 8009fa6:	e00b      	b.n	8009fc0 <UART_SetConfig+0x224>
 8009fa8:	2300      	movs	r3, #0
 8009faa:	76fb      	strb	r3, [r7, #27]
 8009fac:	e038      	b.n	800a020 <UART_SetConfig+0x284>
 8009fae:	2302      	movs	r3, #2
 8009fb0:	76fb      	strb	r3, [r7, #27]
 8009fb2:	e035      	b.n	800a020 <UART_SetConfig+0x284>
 8009fb4:	2304      	movs	r3, #4
 8009fb6:	76fb      	strb	r3, [r7, #27]
 8009fb8:	e032      	b.n	800a020 <UART_SetConfig+0x284>
 8009fba:	2308      	movs	r3, #8
 8009fbc:	76fb      	strb	r3, [r7, #27]
 8009fbe:	e02f      	b.n	800a020 <UART_SetConfig+0x284>
 8009fc0:	2310      	movs	r3, #16
 8009fc2:	76fb      	strb	r3, [r7, #27]
 8009fc4:	bf00      	nop
 8009fc6:	e02b      	b.n	800a020 <UART_SetConfig+0x284>
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	4a2c      	ldr	r2, [pc, #176]	; (800a080 <UART_SetConfig+0x2e4>)
 8009fce:	4293      	cmp	r3, r2
 8009fd0:	d124      	bne.n	800a01c <UART_SetConfig+0x280>
 8009fd2:	4b2d      	ldr	r3, [pc, #180]	; (800a088 <UART_SetConfig+0x2ec>)
 8009fd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009fd8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009fdc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009fe0:	d012      	beq.n	800a008 <UART_SetConfig+0x26c>
 8009fe2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009fe6:	d802      	bhi.n	8009fee <UART_SetConfig+0x252>
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d007      	beq.n	8009ffc <UART_SetConfig+0x260>
 8009fec:	e012      	b.n	800a014 <UART_SetConfig+0x278>
 8009fee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009ff2:	d006      	beq.n	800a002 <UART_SetConfig+0x266>
 8009ff4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009ff8:	d009      	beq.n	800a00e <UART_SetConfig+0x272>
 8009ffa:	e00b      	b.n	800a014 <UART_SetConfig+0x278>
 8009ffc:	2300      	movs	r3, #0
 8009ffe:	76fb      	strb	r3, [r7, #27]
 800a000:	e00e      	b.n	800a020 <UART_SetConfig+0x284>
 800a002:	2302      	movs	r3, #2
 800a004:	76fb      	strb	r3, [r7, #27]
 800a006:	e00b      	b.n	800a020 <UART_SetConfig+0x284>
 800a008:	2304      	movs	r3, #4
 800a00a:	76fb      	strb	r3, [r7, #27]
 800a00c:	e008      	b.n	800a020 <UART_SetConfig+0x284>
 800a00e:	2308      	movs	r3, #8
 800a010:	76fb      	strb	r3, [r7, #27]
 800a012:	e005      	b.n	800a020 <UART_SetConfig+0x284>
 800a014:	2310      	movs	r3, #16
 800a016:	76fb      	strb	r3, [r7, #27]
 800a018:	bf00      	nop
 800a01a:	e001      	b.n	800a020 <UART_SetConfig+0x284>
 800a01c:	2310      	movs	r3, #16
 800a01e:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	4a16      	ldr	r2, [pc, #88]	; (800a080 <UART_SetConfig+0x2e4>)
 800a026:	4293      	cmp	r3, r2
 800a028:	f040 8087 	bne.w	800a13a <UART_SetConfig+0x39e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a02c:	7efb      	ldrb	r3, [r7, #27]
 800a02e:	2b08      	cmp	r3, #8
 800a030:	d836      	bhi.n	800a0a0 <UART_SetConfig+0x304>
 800a032:	a201      	add	r2, pc, #4	; (adr r2, 800a038 <UART_SetConfig+0x29c>)
 800a034:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a038:	0800a05d 	.word	0x0800a05d
 800a03c:	0800a0a1 	.word	0x0800a0a1
 800a040:	0800a065 	.word	0x0800a065
 800a044:	0800a0a1 	.word	0x0800a0a1
 800a048:	0800a06b 	.word	0x0800a06b
 800a04c:	0800a0a1 	.word	0x0800a0a1
 800a050:	0800a0a1 	.word	0x0800a0a1
 800a054:	0800a0a1 	.word	0x0800a0a1
 800a058:	0800a073 	.word	0x0800a073
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a05c:	f7ff f870 	bl	8009140 <HAL_RCC_GetPCLK1Freq>
 800a060:	6178      	str	r0, [r7, #20]
        break;
 800a062:	e022      	b.n	800a0aa <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a064:	4b0d      	ldr	r3, [pc, #52]	; (800a09c <UART_SetConfig+0x300>)
 800a066:	617b      	str	r3, [r7, #20]
        break;
 800a068:	e01f      	b.n	800a0aa <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a06a:	f7fe ffd3 	bl	8009014 <HAL_RCC_GetSysClockFreq>
 800a06e:	6178      	str	r0, [r7, #20]
        break;
 800a070:	e01b      	b.n	800a0aa <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a072:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a076:	617b      	str	r3, [r7, #20]
        break;
 800a078:	e017      	b.n	800a0aa <UART_SetConfig+0x30e>
 800a07a:	bf00      	nop
 800a07c:	efff69f3 	.word	0xefff69f3
 800a080:	40008000 	.word	0x40008000
 800a084:	40013800 	.word	0x40013800
 800a088:	40021000 	.word	0x40021000
 800a08c:	40004400 	.word	0x40004400
 800a090:	40004800 	.word	0x40004800
 800a094:	40004c00 	.word	0x40004c00
 800a098:	40005000 	.word	0x40005000
 800a09c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800a0a0:	2300      	movs	r3, #0
 800a0a2:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800a0a4:	2301      	movs	r3, #1
 800a0a6:	76bb      	strb	r3, [r7, #26]
        break;
 800a0a8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a0aa:	697b      	ldr	r3, [r7, #20]
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	f000 80f1 	beq.w	800a294 <UART_SetConfig+0x4f8>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	685a      	ldr	r2, [r3, #4]
 800a0b6:	4613      	mov	r3, r2
 800a0b8:	005b      	lsls	r3, r3, #1
 800a0ba:	4413      	add	r3, r2
 800a0bc:	697a      	ldr	r2, [r7, #20]
 800a0be:	429a      	cmp	r2, r3
 800a0c0:	d305      	bcc.n	800a0ce <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	685b      	ldr	r3, [r3, #4]
 800a0c6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800a0c8:	697a      	ldr	r2, [r7, #20]
 800a0ca:	429a      	cmp	r2, r3
 800a0cc:	d902      	bls.n	800a0d4 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 800a0ce:	2301      	movs	r3, #1
 800a0d0:	76bb      	strb	r3, [r7, #26]
 800a0d2:	e0df      	b.n	800a294 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 800a0d4:	697b      	ldr	r3, [r7, #20]
 800a0d6:	4619      	mov	r1, r3
 800a0d8:	f04f 0200 	mov.w	r2, #0
 800a0dc:	f04f 0300 	mov.w	r3, #0
 800a0e0:	f04f 0400 	mov.w	r4, #0
 800a0e4:	0214      	lsls	r4, r2, #8
 800a0e6:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800a0ea:	020b      	lsls	r3, r1, #8
 800a0ec:	687a      	ldr	r2, [r7, #4]
 800a0ee:	6852      	ldr	r2, [r2, #4]
 800a0f0:	0852      	lsrs	r2, r2, #1
 800a0f2:	4611      	mov	r1, r2
 800a0f4:	f04f 0200 	mov.w	r2, #0
 800a0f8:	eb13 0b01 	adds.w	fp, r3, r1
 800a0fc:	eb44 0c02 	adc.w	ip, r4, r2
 800a100:	4658      	mov	r0, fp
 800a102:	4661      	mov	r1, ip
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	685b      	ldr	r3, [r3, #4]
 800a108:	f04f 0400 	mov.w	r4, #0
 800a10c:	461a      	mov	r2, r3
 800a10e:	4623      	mov	r3, r4
 800a110:	f7f6 fa92 	bl	8000638 <__aeabi_uldivmod>
 800a114:	4603      	mov	r3, r0
 800a116:	460c      	mov	r4, r1
 800a118:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a11a:	693b      	ldr	r3, [r7, #16]
 800a11c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a120:	d308      	bcc.n	800a134 <UART_SetConfig+0x398>
 800a122:	693b      	ldr	r3, [r7, #16]
 800a124:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a128:	d204      	bcs.n	800a134 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	693a      	ldr	r2, [r7, #16]
 800a130:	60da      	str	r2, [r3, #12]
 800a132:	e0af      	b.n	800a294 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 800a134:	2301      	movs	r3, #1
 800a136:	76bb      	strb	r3, [r7, #26]
 800a138:	e0ac      	b.n	800a294 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	69db      	ldr	r3, [r3, #28]
 800a13e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a142:	d15b      	bne.n	800a1fc <UART_SetConfig+0x460>
  {
    switch (clocksource)
 800a144:	7efb      	ldrb	r3, [r7, #27]
 800a146:	2b08      	cmp	r3, #8
 800a148:	d827      	bhi.n	800a19a <UART_SetConfig+0x3fe>
 800a14a:	a201      	add	r2, pc, #4	; (adr r2, 800a150 <UART_SetConfig+0x3b4>)
 800a14c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a150:	0800a175 	.word	0x0800a175
 800a154:	0800a17d 	.word	0x0800a17d
 800a158:	0800a185 	.word	0x0800a185
 800a15c:	0800a19b 	.word	0x0800a19b
 800a160:	0800a18b 	.word	0x0800a18b
 800a164:	0800a19b 	.word	0x0800a19b
 800a168:	0800a19b 	.word	0x0800a19b
 800a16c:	0800a19b 	.word	0x0800a19b
 800a170:	0800a193 	.word	0x0800a193
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a174:	f7fe ffe4 	bl	8009140 <HAL_RCC_GetPCLK1Freq>
 800a178:	6178      	str	r0, [r7, #20]
        break;
 800a17a:	e013      	b.n	800a1a4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a17c:	f7fe fff6 	bl	800916c <HAL_RCC_GetPCLK2Freq>
 800a180:	6178      	str	r0, [r7, #20]
        break;
 800a182:	e00f      	b.n	800a1a4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a184:	4b49      	ldr	r3, [pc, #292]	; (800a2ac <UART_SetConfig+0x510>)
 800a186:	617b      	str	r3, [r7, #20]
        break;
 800a188:	e00c      	b.n	800a1a4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a18a:	f7fe ff43 	bl	8009014 <HAL_RCC_GetSysClockFreq>
 800a18e:	6178      	str	r0, [r7, #20]
        break;
 800a190:	e008      	b.n	800a1a4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a192:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a196:	617b      	str	r3, [r7, #20]
        break;
 800a198:	e004      	b.n	800a1a4 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800a19a:	2300      	movs	r3, #0
 800a19c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800a19e:	2301      	movs	r3, #1
 800a1a0:	76bb      	strb	r3, [r7, #26]
        break;
 800a1a2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a1a4:	697b      	ldr	r3, [r7, #20]
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d074      	beq.n	800a294 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a1aa:	697b      	ldr	r3, [r7, #20]
 800a1ac:	005a      	lsls	r2, r3, #1
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	685b      	ldr	r3, [r3, #4]
 800a1b2:	085b      	lsrs	r3, r3, #1
 800a1b4:	441a      	add	r2, r3
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	685b      	ldr	r3, [r3, #4]
 800a1ba:	fbb2 f3f3 	udiv	r3, r2, r3
 800a1be:	b29b      	uxth	r3, r3
 800a1c0:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a1c2:	693b      	ldr	r3, [r7, #16]
 800a1c4:	2b0f      	cmp	r3, #15
 800a1c6:	d916      	bls.n	800a1f6 <UART_SetConfig+0x45a>
 800a1c8:	693b      	ldr	r3, [r7, #16]
 800a1ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a1ce:	d212      	bcs.n	800a1f6 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a1d0:	693b      	ldr	r3, [r7, #16]
 800a1d2:	b29b      	uxth	r3, r3
 800a1d4:	f023 030f 	bic.w	r3, r3, #15
 800a1d8:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a1da:	693b      	ldr	r3, [r7, #16]
 800a1dc:	085b      	lsrs	r3, r3, #1
 800a1de:	b29b      	uxth	r3, r3
 800a1e0:	f003 0307 	and.w	r3, r3, #7
 800a1e4:	b29a      	uxth	r2, r3
 800a1e6:	89fb      	ldrh	r3, [r7, #14]
 800a1e8:	4313      	orrs	r3, r2
 800a1ea:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	89fa      	ldrh	r2, [r7, #14]
 800a1f2:	60da      	str	r2, [r3, #12]
 800a1f4:	e04e      	b.n	800a294 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800a1f6:	2301      	movs	r3, #1
 800a1f8:	76bb      	strb	r3, [r7, #26]
 800a1fa:	e04b      	b.n	800a294 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a1fc:	7efb      	ldrb	r3, [r7, #27]
 800a1fe:	2b08      	cmp	r3, #8
 800a200:	d827      	bhi.n	800a252 <UART_SetConfig+0x4b6>
 800a202:	a201      	add	r2, pc, #4	; (adr r2, 800a208 <UART_SetConfig+0x46c>)
 800a204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a208:	0800a22d 	.word	0x0800a22d
 800a20c:	0800a235 	.word	0x0800a235
 800a210:	0800a23d 	.word	0x0800a23d
 800a214:	0800a253 	.word	0x0800a253
 800a218:	0800a243 	.word	0x0800a243
 800a21c:	0800a253 	.word	0x0800a253
 800a220:	0800a253 	.word	0x0800a253
 800a224:	0800a253 	.word	0x0800a253
 800a228:	0800a24b 	.word	0x0800a24b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a22c:	f7fe ff88 	bl	8009140 <HAL_RCC_GetPCLK1Freq>
 800a230:	6178      	str	r0, [r7, #20]
        break;
 800a232:	e013      	b.n	800a25c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a234:	f7fe ff9a 	bl	800916c <HAL_RCC_GetPCLK2Freq>
 800a238:	6178      	str	r0, [r7, #20]
        break;
 800a23a:	e00f      	b.n	800a25c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a23c:	4b1b      	ldr	r3, [pc, #108]	; (800a2ac <UART_SetConfig+0x510>)
 800a23e:	617b      	str	r3, [r7, #20]
        break;
 800a240:	e00c      	b.n	800a25c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a242:	f7fe fee7 	bl	8009014 <HAL_RCC_GetSysClockFreq>
 800a246:	6178      	str	r0, [r7, #20]
        break;
 800a248:	e008      	b.n	800a25c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a24a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a24e:	617b      	str	r3, [r7, #20]
        break;
 800a250:	e004      	b.n	800a25c <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 800a252:	2300      	movs	r3, #0
 800a254:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800a256:	2301      	movs	r3, #1
 800a258:	76bb      	strb	r3, [r7, #26]
        break;
 800a25a:	bf00      	nop
    }

    if (pclk != 0U)
 800a25c:	697b      	ldr	r3, [r7, #20]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d018      	beq.n	800a294 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	685b      	ldr	r3, [r3, #4]
 800a266:	085a      	lsrs	r2, r3, #1
 800a268:	697b      	ldr	r3, [r7, #20]
 800a26a:	441a      	add	r2, r3
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	685b      	ldr	r3, [r3, #4]
 800a270:	fbb2 f3f3 	udiv	r3, r2, r3
 800a274:	b29b      	uxth	r3, r3
 800a276:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a278:	693b      	ldr	r3, [r7, #16]
 800a27a:	2b0f      	cmp	r3, #15
 800a27c:	d908      	bls.n	800a290 <UART_SetConfig+0x4f4>
 800a27e:	693b      	ldr	r3, [r7, #16]
 800a280:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a284:	d204      	bcs.n	800a290 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	693a      	ldr	r2, [r7, #16]
 800a28c:	60da      	str	r2, [r3, #12]
 800a28e:	e001      	b.n	800a294 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800a290:	2301      	movs	r3, #1
 800a292:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	2200      	movs	r2, #0
 800a298:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	2200      	movs	r2, #0
 800a29e:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800a2a0:	7ebb      	ldrb	r3, [r7, #26]
}
 800a2a2:	4618      	mov	r0, r3
 800a2a4:	3720      	adds	r7, #32
 800a2a6:	46bd      	mov	sp, r7
 800a2a8:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800a2ac:	00f42400 	.word	0x00f42400

0800a2b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a2b0:	b480      	push	{r7}
 800a2b2:	b083      	sub	sp, #12
 800a2b4:	af00      	add	r7, sp, #0
 800a2b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2bc:	f003 0301 	and.w	r3, r3, #1
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d00a      	beq.n	800a2da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	685b      	ldr	r3, [r3, #4]
 800a2ca:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	430a      	orrs	r2, r1
 800a2d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2de:	f003 0302 	and.w	r3, r3, #2
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d00a      	beq.n	800a2fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	685b      	ldr	r3, [r3, #4]
 800a2ec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	430a      	orrs	r2, r1
 800a2fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a300:	f003 0304 	and.w	r3, r3, #4
 800a304:	2b00      	cmp	r3, #0
 800a306:	d00a      	beq.n	800a31e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	685b      	ldr	r3, [r3, #4]
 800a30e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	430a      	orrs	r2, r1
 800a31c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a322:	f003 0308 	and.w	r3, r3, #8
 800a326:	2b00      	cmp	r3, #0
 800a328:	d00a      	beq.n	800a340 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	685b      	ldr	r3, [r3, #4]
 800a330:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	430a      	orrs	r2, r1
 800a33e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a344:	f003 0310 	and.w	r3, r3, #16
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d00a      	beq.n	800a362 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	689b      	ldr	r3, [r3, #8]
 800a352:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	430a      	orrs	r2, r1
 800a360:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a366:	f003 0320 	and.w	r3, r3, #32
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d00a      	beq.n	800a384 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	689b      	ldr	r3, [r3, #8]
 800a374:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	430a      	orrs	r2, r1
 800a382:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a388:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d01a      	beq.n	800a3c6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	685b      	ldr	r3, [r3, #4]
 800a396:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	430a      	orrs	r2, r1
 800a3a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a3ae:	d10a      	bne.n	800a3c6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	685b      	ldr	r3, [r3, #4]
 800a3b6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	430a      	orrs	r2, r1
 800a3c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d00a      	beq.n	800a3e8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	685b      	ldr	r3, [r3, #4]
 800a3d8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	430a      	orrs	r2, r1
 800a3e6:	605a      	str	r2, [r3, #4]
  }
}
 800a3e8:	bf00      	nop
 800a3ea:	370c      	adds	r7, #12
 800a3ec:	46bd      	mov	sp, r7
 800a3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f2:	4770      	bx	lr

0800a3f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a3f4:	b580      	push	{r7, lr}
 800a3f6:	b086      	sub	sp, #24
 800a3f8:	af02      	add	r7, sp, #8
 800a3fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	2200      	movs	r2, #0
 800a400:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800a402:	f7fc fdd1 	bl	8006fa8 <HAL_GetTick>
 800a406:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	f003 0308 	and.w	r3, r3, #8
 800a412:	2b08      	cmp	r3, #8
 800a414:	d10e      	bne.n	800a434 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a416:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a41a:	9300      	str	r3, [sp, #0]
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	2200      	movs	r2, #0
 800a420:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a424:	6878      	ldr	r0, [r7, #4]
 800a426:	f000 f82a 	bl	800a47e <UART_WaitOnFlagUntilTimeout>
 800a42a:	4603      	mov	r3, r0
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d001      	beq.n	800a434 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a430:	2303      	movs	r3, #3
 800a432:	e020      	b.n	800a476 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	f003 0304 	and.w	r3, r3, #4
 800a43e:	2b04      	cmp	r3, #4
 800a440:	d10e      	bne.n	800a460 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a442:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a446:	9300      	str	r3, [sp, #0]
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	2200      	movs	r2, #0
 800a44c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a450:	6878      	ldr	r0, [r7, #4]
 800a452:	f000 f814 	bl	800a47e <UART_WaitOnFlagUntilTimeout>
 800a456:	4603      	mov	r3, r0
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d001      	beq.n	800a460 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a45c:	2303      	movs	r3, #3
 800a45e:	e00a      	b.n	800a476 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	2220      	movs	r2, #32
 800a464:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	2220      	movs	r2, #32
 800a46a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	2200      	movs	r2, #0
 800a470:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800a474:	2300      	movs	r3, #0
}
 800a476:	4618      	mov	r0, r3
 800a478:	3710      	adds	r7, #16
 800a47a:	46bd      	mov	sp, r7
 800a47c:	bd80      	pop	{r7, pc}

0800a47e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a47e:	b580      	push	{r7, lr}
 800a480:	b084      	sub	sp, #16
 800a482:	af00      	add	r7, sp, #0
 800a484:	60f8      	str	r0, [r7, #12]
 800a486:	60b9      	str	r1, [r7, #8]
 800a488:	603b      	str	r3, [r7, #0]
 800a48a:	4613      	mov	r3, r2
 800a48c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a48e:	e05d      	b.n	800a54c <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a490:	69bb      	ldr	r3, [r7, #24]
 800a492:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a496:	d059      	beq.n	800a54c <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a498:	f7fc fd86 	bl	8006fa8 <HAL_GetTick>
 800a49c:	4602      	mov	r2, r0
 800a49e:	683b      	ldr	r3, [r7, #0]
 800a4a0:	1ad3      	subs	r3, r2, r3
 800a4a2:	69ba      	ldr	r2, [r7, #24]
 800a4a4:	429a      	cmp	r2, r3
 800a4a6:	d302      	bcc.n	800a4ae <UART_WaitOnFlagUntilTimeout+0x30>
 800a4a8:	69bb      	ldr	r3, [r7, #24]
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d11b      	bne.n	800a4e6 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	681a      	ldr	r2, [r3, #0]
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a4bc:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	689a      	ldr	r2, [r3, #8]
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	f022 0201 	bic.w	r2, r2, #1
 800a4cc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	2220      	movs	r2, #32
 800a4d2:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	2220      	movs	r2, #32
 800a4d8:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	2200      	movs	r2, #0
 800a4de:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800a4e2:	2303      	movs	r3, #3
 800a4e4:	e042      	b.n	800a56c <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	f003 0304 	and.w	r3, r3, #4
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d02b      	beq.n	800a54c <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	69db      	ldr	r3, [r3, #28]
 800a4fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a4fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a502:	d123      	bne.n	800a54c <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a50c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	681a      	ldr	r2, [r3, #0]
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a51c:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	689a      	ldr	r2, [r3, #8]
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	f022 0201 	bic.w	r2, r2, #1
 800a52c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	2220      	movs	r2, #32
 800a532:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	2220      	movs	r2, #32
 800a538:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	2220      	movs	r2, #32
 800a53e:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	2200      	movs	r2, #0
 800a544:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 800a548:	2303      	movs	r3, #3
 800a54a:	e00f      	b.n	800a56c <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	69da      	ldr	r2, [r3, #28]
 800a552:	68bb      	ldr	r3, [r7, #8]
 800a554:	4013      	ands	r3, r2
 800a556:	68ba      	ldr	r2, [r7, #8]
 800a558:	429a      	cmp	r2, r3
 800a55a:	bf0c      	ite	eq
 800a55c:	2301      	moveq	r3, #1
 800a55e:	2300      	movne	r3, #0
 800a560:	b2db      	uxtb	r3, r3
 800a562:	461a      	mov	r2, r3
 800a564:	79fb      	ldrb	r3, [r7, #7]
 800a566:	429a      	cmp	r2, r3
 800a568:	d092      	beq.n	800a490 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a56a:	2300      	movs	r3, #0
}
 800a56c:	4618      	mov	r0, r3
 800a56e:	3710      	adds	r7, #16
 800a570:	46bd      	mov	sp, r7
 800a572:	bd80      	pop	{r7, pc}

0800a574 <__errno>:
 800a574:	4b01      	ldr	r3, [pc, #4]	; (800a57c <__errno+0x8>)
 800a576:	6818      	ldr	r0, [r3, #0]
 800a578:	4770      	bx	lr
 800a57a:	bf00      	nop
 800a57c:	20000494 	.word	0x20000494

0800a580 <__libc_init_array>:
 800a580:	b570      	push	{r4, r5, r6, lr}
 800a582:	4e0d      	ldr	r6, [pc, #52]	; (800a5b8 <__libc_init_array+0x38>)
 800a584:	4c0d      	ldr	r4, [pc, #52]	; (800a5bc <__libc_init_array+0x3c>)
 800a586:	1ba4      	subs	r4, r4, r6
 800a588:	10a4      	asrs	r4, r4, #2
 800a58a:	2500      	movs	r5, #0
 800a58c:	42a5      	cmp	r5, r4
 800a58e:	d109      	bne.n	800a5a4 <__libc_init_array+0x24>
 800a590:	4e0b      	ldr	r6, [pc, #44]	; (800a5c0 <__libc_init_array+0x40>)
 800a592:	4c0c      	ldr	r4, [pc, #48]	; (800a5c4 <__libc_init_array+0x44>)
 800a594:	f001 f82c 	bl	800b5f0 <_init>
 800a598:	1ba4      	subs	r4, r4, r6
 800a59a:	10a4      	asrs	r4, r4, #2
 800a59c:	2500      	movs	r5, #0
 800a59e:	42a5      	cmp	r5, r4
 800a5a0:	d105      	bne.n	800a5ae <__libc_init_array+0x2e>
 800a5a2:	bd70      	pop	{r4, r5, r6, pc}
 800a5a4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a5a8:	4798      	blx	r3
 800a5aa:	3501      	adds	r5, #1
 800a5ac:	e7ee      	b.n	800a58c <__libc_init_array+0xc>
 800a5ae:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a5b2:	4798      	blx	r3
 800a5b4:	3501      	adds	r5, #1
 800a5b6:	e7f2      	b.n	800a59e <__libc_init_array+0x1e>
 800a5b8:	0800bd54 	.word	0x0800bd54
 800a5bc:	0800bd54 	.word	0x0800bd54
 800a5c0:	0800bd54 	.word	0x0800bd54
 800a5c4:	0800bd58 	.word	0x0800bd58

0800a5c8 <memcpy>:
 800a5c8:	b510      	push	{r4, lr}
 800a5ca:	1e43      	subs	r3, r0, #1
 800a5cc:	440a      	add	r2, r1
 800a5ce:	4291      	cmp	r1, r2
 800a5d0:	d100      	bne.n	800a5d4 <memcpy+0xc>
 800a5d2:	bd10      	pop	{r4, pc}
 800a5d4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a5d8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a5dc:	e7f7      	b.n	800a5ce <memcpy+0x6>

0800a5de <memset>:
 800a5de:	4402      	add	r2, r0
 800a5e0:	4603      	mov	r3, r0
 800a5e2:	4293      	cmp	r3, r2
 800a5e4:	d100      	bne.n	800a5e8 <memset+0xa>
 800a5e6:	4770      	bx	lr
 800a5e8:	f803 1b01 	strb.w	r1, [r3], #1
 800a5ec:	e7f9      	b.n	800a5e2 <memset+0x4>
	...

0800a5f0 <_puts_r>:
 800a5f0:	b570      	push	{r4, r5, r6, lr}
 800a5f2:	460e      	mov	r6, r1
 800a5f4:	4605      	mov	r5, r0
 800a5f6:	b118      	cbz	r0, 800a600 <_puts_r+0x10>
 800a5f8:	6983      	ldr	r3, [r0, #24]
 800a5fa:	b90b      	cbnz	r3, 800a600 <_puts_r+0x10>
 800a5fc:	f000 fa48 	bl	800aa90 <__sinit>
 800a600:	69ab      	ldr	r3, [r5, #24]
 800a602:	68ac      	ldr	r4, [r5, #8]
 800a604:	b913      	cbnz	r3, 800a60c <_puts_r+0x1c>
 800a606:	4628      	mov	r0, r5
 800a608:	f000 fa42 	bl	800aa90 <__sinit>
 800a60c:	4b23      	ldr	r3, [pc, #140]	; (800a69c <_puts_r+0xac>)
 800a60e:	429c      	cmp	r4, r3
 800a610:	d117      	bne.n	800a642 <_puts_r+0x52>
 800a612:	686c      	ldr	r4, [r5, #4]
 800a614:	89a3      	ldrh	r3, [r4, #12]
 800a616:	071b      	lsls	r3, r3, #28
 800a618:	d51d      	bpl.n	800a656 <_puts_r+0x66>
 800a61a:	6923      	ldr	r3, [r4, #16]
 800a61c:	b1db      	cbz	r3, 800a656 <_puts_r+0x66>
 800a61e:	3e01      	subs	r6, #1
 800a620:	68a3      	ldr	r3, [r4, #8]
 800a622:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a626:	3b01      	subs	r3, #1
 800a628:	60a3      	str	r3, [r4, #8]
 800a62a:	b9e9      	cbnz	r1, 800a668 <_puts_r+0x78>
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	da2e      	bge.n	800a68e <_puts_r+0x9e>
 800a630:	4622      	mov	r2, r4
 800a632:	210a      	movs	r1, #10
 800a634:	4628      	mov	r0, r5
 800a636:	f000 f87b 	bl	800a730 <__swbuf_r>
 800a63a:	3001      	adds	r0, #1
 800a63c:	d011      	beq.n	800a662 <_puts_r+0x72>
 800a63e:	200a      	movs	r0, #10
 800a640:	e011      	b.n	800a666 <_puts_r+0x76>
 800a642:	4b17      	ldr	r3, [pc, #92]	; (800a6a0 <_puts_r+0xb0>)
 800a644:	429c      	cmp	r4, r3
 800a646:	d101      	bne.n	800a64c <_puts_r+0x5c>
 800a648:	68ac      	ldr	r4, [r5, #8]
 800a64a:	e7e3      	b.n	800a614 <_puts_r+0x24>
 800a64c:	4b15      	ldr	r3, [pc, #84]	; (800a6a4 <_puts_r+0xb4>)
 800a64e:	429c      	cmp	r4, r3
 800a650:	bf08      	it	eq
 800a652:	68ec      	ldreq	r4, [r5, #12]
 800a654:	e7de      	b.n	800a614 <_puts_r+0x24>
 800a656:	4621      	mov	r1, r4
 800a658:	4628      	mov	r0, r5
 800a65a:	f000 f8bb 	bl	800a7d4 <__swsetup_r>
 800a65e:	2800      	cmp	r0, #0
 800a660:	d0dd      	beq.n	800a61e <_puts_r+0x2e>
 800a662:	f04f 30ff 	mov.w	r0, #4294967295
 800a666:	bd70      	pop	{r4, r5, r6, pc}
 800a668:	2b00      	cmp	r3, #0
 800a66a:	da04      	bge.n	800a676 <_puts_r+0x86>
 800a66c:	69a2      	ldr	r2, [r4, #24]
 800a66e:	429a      	cmp	r2, r3
 800a670:	dc06      	bgt.n	800a680 <_puts_r+0x90>
 800a672:	290a      	cmp	r1, #10
 800a674:	d004      	beq.n	800a680 <_puts_r+0x90>
 800a676:	6823      	ldr	r3, [r4, #0]
 800a678:	1c5a      	adds	r2, r3, #1
 800a67a:	6022      	str	r2, [r4, #0]
 800a67c:	7019      	strb	r1, [r3, #0]
 800a67e:	e7cf      	b.n	800a620 <_puts_r+0x30>
 800a680:	4622      	mov	r2, r4
 800a682:	4628      	mov	r0, r5
 800a684:	f000 f854 	bl	800a730 <__swbuf_r>
 800a688:	3001      	adds	r0, #1
 800a68a:	d1c9      	bne.n	800a620 <_puts_r+0x30>
 800a68c:	e7e9      	b.n	800a662 <_puts_r+0x72>
 800a68e:	6823      	ldr	r3, [r4, #0]
 800a690:	200a      	movs	r0, #10
 800a692:	1c5a      	adds	r2, r3, #1
 800a694:	6022      	str	r2, [r4, #0]
 800a696:	7018      	strb	r0, [r3, #0]
 800a698:	e7e5      	b.n	800a666 <_puts_r+0x76>
 800a69a:	bf00      	nop
 800a69c:	0800bcd8 	.word	0x0800bcd8
 800a6a0:	0800bcf8 	.word	0x0800bcf8
 800a6a4:	0800bcb8 	.word	0x0800bcb8

0800a6a8 <puts>:
 800a6a8:	4b02      	ldr	r3, [pc, #8]	; (800a6b4 <puts+0xc>)
 800a6aa:	4601      	mov	r1, r0
 800a6ac:	6818      	ldr	r0, [r3, #0]
 800a6ae:	f7ff bf9f 	b.w	800a5f0 <_puts_r>
 800a6b2:	bf00      	nop
 800a6b4:	20000494 	.word	0x20000494

0800a6b8 <sniprintf>:
 800a6b8:	b40c      	push	{r2, r3}
 800a6ba:	b530      	push	{r4, r5, lr}
 800a6bc:	4b17      	ldr	r3, [pc, #92]	; (800a71c <sniprintf+0x64>)
 800a6be:	1e0c      	subs	r4, r1, #0
 800a6c0:	b09d      	sub	sp, #116	; 0x74
 800a6c2:	681d      	ldr	r5, [r3, #0]
 800a6c4:	da08      	bge.n	800a6d8 <sniprintf+0x20>
 800a6c6:	238b      	movs	r3, #139	; 0x8b
 800a6c8:	602b      	str	r3, [r5, #0]
 800a6ca:	f04f 30ff 	mov.w	r0, #4294967295
 800a6ce:	b01d      	add	sp, #116	; 0x74
 800a6d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a6d4:	b002      	add	sp, #8
 800a6d6:	4770      	bx	lr
 800a6d8:	f44f 7302 	mov.w	r3, #520	; 0x208
 800a6dc:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a6e0:	bf14      	ite	ne
 800a6e2:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a6e6:	4623      	moveq	r3, r4
 800a6e8:	9304      	str	r3, [sp, #16]
 800a6ea:	9307      	str	r3, [sp, #28]
 800a6ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a6f0:	9002      	str	r0, [sp, #8]
 800a6f2:	9006      	str	r0, [sp, #24]
 800a6f4:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a6f8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a6fa:	ab21      	add	r3, sp, #132	; 0x84
 800a6fc:	a902      	add	r1, sp, #8
 800a6fe:	4628      	mov	r0, r5
 800a700:	9301      	str	r3, [sp, #4]
 800a702:	f000 fbb5 	bl	800ae70 <_svfiprintf_r>
 800a706:	1c43      	adds	r3, r0, #1
 800a708:	bfbc      	itt	lt
 800a70a:	238b      	movlt	r3, #139	; 0x8b
 800a70c:	602b      	strlt	r3, [r5, #0]
 800a70e:	2c00      	cmp	r4, #0
 800a710:	d0dd      	beq.n	800a6ce <sniprintf+0x16>
 800a712:	9b02      	ldr	r3, [sp, #8]
 800a714:	2200      	movs	r2, #0
 800a716:	701a      	strb	r2, [r3, #0]
 800a718:	e7d9      	b.n	800a6ce <sniprintf+0x16>
 800a71a:	bf00      	nop
 800a71c:	20000494 	.word	0x20000494

0800a720 <strcpy>:
 800a720:	4603      	mov	r3, r0
 800a722:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a726:	f803 2b01 	strb.w	r2, [r3], #1
 800a72a:	2a00      	cmp	r2, #0
 800a72c:	d1f9      	bne.n	800a722 <strcpy+0x2>
 800a72e:	4770      	bx	lr

0800a730 <__swbuf_r>:
 800a730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a732:	460e      	mov	r6, r1
 800a734:	4614      	mov	r4, r2
 800a736:	4605      	mov	r5, r0
 800a738:	b118      	cbz	r0, 800a742 <__swbuf_r+0x12>
 800a73a:	6983      	ldr	r3, [r0, #24]
 800a73c:	b90b      	cbnz	r3, 800a742 <__swbuf_r+0x12>
 800a73e:	f000 f9a7 	bl	800aa90 <__sinit>
 800a742:	4b21      	ldr	r3, [pc, #132]	; (800a7c8 <__swbuf_r+0x98>)
 800a744:	429c      	cmp	r4, r3
 800a746:	d12a      	bne.n	800a79e <__swbuf_r+0x6e>
 800a748:	686c      	ldr	r4, [r5, #4]
 800a74a:	69a3      	ldr	r3, [r4, #24]
 800a74c:	60a3      	str	r3, [r4, #8]
 800a74e:	89a3      	ldrh	r3, [r4, #12]
 800a750:	071a      	lsls	r2, r3, #28
 800a752:	d52e      	bpl.n	800a7b2 <__swbuf_r+0x82>
 800a754:	6923      	ldr	r3, [r4, #16]
 800a756:	b363      	cbz	r3, 800a7b2 <__swbuf_r+0x82>
 800a758:	6923      	ldr	r3, [r4, #16]
 800a75a:	6820      	ldr	r0, [r4, #0]
 800a75c:	1ac0      	subs	r0, r0, r3
 800a75e:	6963      	ldr	r3, [r4, #20]
 800a760:	b2f6      	uxtb	r6, r6
 800a762:	4283      	cmp	r3, r0
 800a764:	4637      	mov	r7, r6
 800a766:	dc04      	bgt.n	800a772 <__swbuf_r+0x42>
 800a768:	4621      	mov	r1, r4
 800a76a:	4628      	mov	r0, r5
 800a76c:	f000 f926 	bl	800a9bc <_fflush_r>
 800a770:	bb28      	cbnz	r0, 800a7be <__swbuf_r+0x8e>
 800a772:	68a3      	ldr	r3, [r4, #8]
 800a774:	3b01      	subs	r3, #1
 800a776:	60a3      	str	r3, [r4, #8]
 800a778:	6823      	ldr	r3, [r4, #0]
 800a77a:	1c5a      	adds	r2, r3, #1
 800a77c:	6022      	str	r2, [r4, #0]
 800a77e:	701e      	strb	r6, [r3, #0]
 800a780:	6963      	ldr	r3, [r4, #20]
 800a782:	3001      	adds	r0, #1
 800a784:	4283      	cmp	r3, r0
 800a786:	d004      	beq.n	800a792 <__swbuf_r+0x62>
 800a788:	89a3      	ldrh	r3, [r4, #12]
 800a78a:	07db      	lsls	r3, r3, #31
 800a78c:	d519      	bpl.n	800a7c2 <__swbuf_r+0x92>
 800a78e:	2e0a      	cmp	r6, #10
 800a790:	d117      	bne.n	800a7c2 <__swbuf_r+0x92>
 800a792:	4621      	mov	r1, r4
 800a794:	4628      	mov	r0, r5
 800a796:	f000 f911 	bl	800a9bc <_fflush_r>
 800a79a:	b190      	cbz	r0, 800a7c2 <__swbuf_r+0x92>
 800a79c:	e00f      	b.n	800a7be <__swbuf_r+0x8e>
 800a79e:	4b0b      	ldr	r3, [pc, #44]	; (800a7cc <__swbuf_r+0x9c>)
 800a7a0:	429c      	cmp	r4, r3
 800a7a2:	d101      	bne.n	800a7a8 <__swbuf_r+0x78>
 800a7a4:	68ac      	ldr	r4, [r5, #8]
 800a7a6:	e7d0      	b.n	800a74a <__swbuf_r+0x1a>
 800a7a8:	4b09      	ldr	r3, [pc, #36]	; (800a7d0 <__swbuf_r+0xa0>)
 800a7aa:	429c      	cmp	r4, r3
 800a7ac:	bf08      	it	eq
 800a7ae:	68ec      	ldreq	r4, [r5, #12]
 800a7b0:	e7cb      	b.n	800a74a <__swbuf_r+0x1a>
 800a7b2:	4621      	mov	r1, r4
 800a7b4:	4628      	mov	r0, r5
 800a7b6:	f000 f80d 	bl	800a7d4 <__swsetup_r>
 800a7ba:	2800      	cmp	r0, #0
 800a7bc:	d0cc      	beq.n	800a758 <__swbuf_r+0x28>
 800a7be:	f04f 37ff 	mov.w	r7, #4294967295
 800a7c2:	4638      	mov	r0, r7
 800a7c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a7c6:	bf00      	nop
 800a7c8:	0800bcd8 	.word	0x0800bcd8
 800a7cc:	0800bcf8 	.word	0x0800bcf8
 800a7d0:	0800bcb8 	.word	0x0800bcb8

0800a7d4 <__swsetup_r>:
 800a7d4:	4b32      	ldr	r3, [pc, #200]	; (800a8a0 <__swsetup_r+0xcc>)
 800a7d6:	b570      	push	{r4, r5, r6, lr}
 800a7d8:	681d      	ldr	r5, [r3, #0]
 800a7da:	4606      	mov	r6, r0
 800a7dc:	460c      	mov	r4, r1
 800a7de:	b125      	cbz	r5, 800a7ea <__swsetup_r+0x16>
 800a7e0:	69ab      	ldr	r3, [r5, #24]
 800a7e2:	b913      	cbnz	r3, 800a7ea <__swsetup_r+0x16>
 800a7e4:	4628      	mov	r0, r5
 800a7e6:	f000 f953 	bl	800aa90 <__sinit>
 800a7ea:	4b2e      	ldr	r3, [pc, #184]	; (800a8a4 <__swsetup_r+0xd0>)
 800a7ec:	429c      	cmp	r4, r3
 800a7ee:	d10f      	bne.n	800a810 <__swsetup_r+0x3c>
 800a7f0:	686c      	ldr	r4, [r5, #4]
 800a7f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a7f6:	b29a      	uxth	r2, r3
 800a7f8:	0715      	lsls	r5, r2, #28
 800a7fa:	d42c      	bmi.n	800a856 <__swsetup_r+0x82>
 800a7fc:	06d0      	lsls	r0, r2, #27
 800a7fe:	d411      	bmi.n	800a824 <__swsetup_r+0x50>
 800a800:	2209      	movs	r2, #9
 800a802:	6032      	str	r2, [r6, #0]
 800a804:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a808:	81a3      	strh	r3, [r4, #12]
 800a80a:	f04f 30ff 	mov.w	r0, #4294967295
 800a80e:	e03e      	b.n	800a88e <__swsetup_r+0xba>
 800a810:	4b25      	ldr	r3, [pc, #148]	; (800a8a8 <__swsetup_r+0xd4>)
 800a812:	429c      	cmp	r4, r3
 800a814:	d101      	bne.n	800a81a <__swsetup_r+0x46>
 800a816:	68ac      	ldr	r4, [r5, #8]
 800a818:	e7eb      	b.n	800a7f2 <__swsetup_r+0x1e>
 800a81a:	4b24      	ldr	r3, [pc, #144]	; (800a8ac <__swsetup_r+0xd8>)
 800a81c:	429c      	cmp	r4, r3
 800a81e:	bf08      	it	eq
 800a820:	68ec      	ldreq	r4, [r5, #12]
 800a822:	e7e6      	b.n	800a7f2 <__swsetup_r+0x1e>
 800a824:	0751      	lsls	r1, r2, #29
 800a826:	d512      	bpl.n	800a84e <__swsetup_r+0x7a>
 800a828:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a82a:	b141      	cbz	r1, 800a83e <__swsetup_r+0x6a>
 800a82c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a830:	4299      	cmp	r1, r3
 800a832:	d002      	beq.n	800a83a <__swsetup_r+0x66>
 800a834:	4630      	mov	r0, r6
 800a836:	f000 fa19 	bl	800ac6c <_free_r>
 800a83a:	2300      	movs	r3, #0
 800a83c:	6363      	str	r3, [r4, #52]	; 0x34
 800a83e:	89a3      	ldrh	r3, [r4, #12]
 800a840:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a844:	81a3      	strh	r3, [r4, #12]
 800a846:	2300      	movs	r3, #0
 800a848:	6063      	str	r3, [r4, #4]
 800a84a:	6923      	ldr	r3, [r4, #16]
 800a84c:	6023      	str	r3, [r4, #0]
 800a84e:	89a3      	ldrh	r3, [r4, #12]
 800a850:	f043 0308 	orr.w	r3, r3, #8
 800a854:	81a3      	strh	r3, [r4, #12]
 800a856:	6923      	ldr	r3, [r4, #16]
 800a858:	b94b      	cbnz	r3, 800a86e <__swsetup_r+0x9a>
 800a85a:	89a3      	ldrh	r3, [r4, #12]
 800a85c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a860:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a864:	d003      	beq.n	800a86e <__swsetup_r+0x9a>
 800a866:	4621      	mov	r1, r4
 800a868:	4630      	mov	r0, r6
 800a86a:	f000 f9bf 	bl	800abec <__smakebuf_r>
 800a86e:	89a2      	ldrh	r2, [r4, #12]
 800a870:	f012 0301 	ands.w	r3, r2, #1
 800a874:	d00c      	beq.n	800a890 <__swsetup_r+0xbc>
 800a876:	2300      	movs	r3, #0
 800a878:	60a3      	str	r3, [r4, #8]
 800a87a:	6963      	ldr	r3, [r4, #20]
 800a87c:	425b      	negs	r3, r3
 800a87e:	61a3      	str	r3, [r4, #24]
 800a880:	6923      	ldr	r3, [r4, #16]
 800a882:	b953      	cbnz	r3, 800a89a <__swsetup_r+0xc6>
 800a884:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a888:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800a88c:	d1ba      	bne.n	800a804 <__swsetup_r+0x30>
 800a88e:	bd70      	pop	{r4, r5, r6, pc}
 800a890:	0792      	lsls	r2, r2, #30
 800a892:	bf58      	it	pl
 800a894:	6963      	ldrpl	r3, [r4, #20]
 800a896:	60a3      	str	r3, [r4, #8]
 800a898:	e7f2      	b.n	800a880 <__swsetup_r+0xac>
 800a89a:	2000      	movs	r0, #0
 800a89c:	e7f7      	b.n	800a88e <__swsetup_r+0xba>
 800a89e:	bf00      	nop
 800a8a0:	20000494 	.word	0x20000494
 800a8a4:	0800bcd8 	.word	0x0800bcd8
 800a8a8:	0800bcf8 	.word	0x0800bcf8
 800a8ac:	0800bcb8 	.word	0x0800bcb8

0800a8b0 <__sflush_r>:
 800a8b0:	898a      	ldrh	r2, [r1, #12]
 800a8b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8b6:	4605      	mov	r5, r0
 800a8b8:	0710      	lsls	r0, r2, #28
 800a8ba:	460c      	mov	r4, r1
 800a8bc:	d458      	bmi.n	800a970 <__sflush_r+0xc0>
 800a8be:	684b      	ldr	r3, [r1, #4]
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	dc05      	bgt.n	800a8d0 <__sflush_r+0x20>
 800a8c4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	dc02      	bgt.n	800a8d0 <__sflush_r+0x20>
 800a8ca:	2000      	movs	r0, #0
 800a8cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a8d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a8d2:	2e00      	cmp	r6, #0
 800a8d4:	d0f9      	beq.n	800a8ca <__sflush_r+0x1a>
 800a8d6:	2300      	movs	r3, #0
 800a8d8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a8dc:	682f      	ldr	r7, [r5, #0]
 800a8de:	6a21      	ldr	r1, [r4, #32]
 800a8e0:	602b      	str	r3, [r5, #0]
 800a8e2:	d032      	beq.n	800a94a <__sflush_r+0x9a>
 800a8e4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a8e6:	89a3      	ldrh	r3, [r4, #12]
 800a8e8:	075a      	lsls	r2, r3, #29
 800a8ea:	d505      	bpl.n	800a8f8 <__sflush_r+0x48>
 800a8ec:	6863      	ldr	r3, [r4, #4]
 800a8ee:	1ac0      	subs	r0, r0, r3
 800a8f0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a8f2:	b10b      	cbz	r3, 800a8f8 <__sflush_r+0x48>
 800a8f4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a8f6:	1ac0      	subs	r0, r0, r3
 800a8f8:	2300      	movs	r3, #0
 800a8fa:	4602      	mov	r2, r0
 800a8fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a8fe:	6a21      	ldr	r1, [r4, #32]
 800a900:	4628      	mov	r0, r5
 800a902:	47b0      	blx	r6
 800a904:	1c43      	adds	r3, r0, #1
 800a906:	89a3      	ldrh	r3, [r4, #12]
 800a908:	d106      	bne.n	800a918 <__sflush_r+0x68>
 800a90a:	6829      	ldr	r1, [r5, #0]
 800a90c:	291d      	cmp	r1, #29
 800a90e:	d848      	bhi.n	800a9a2 <__sflush_r+0xf2>
 800a910:	4a29      	ldr	r2, [pc, #164]	; (800a9b8 <__sflush_r+0x108>)
 800a912:	40ca      	lsrs	r2, r1
 800a914:	07d6      	lsls	r6, r2, #31
 800a916:	d544      	bpl.n	800a9a2 <__sflush_r+0xf2>
 800a918:	2200      	movs	r2, #0
 800a91a:	6062      	str	r2, [r4, #4]
 800a91c:	04d9      	lsls	r1, r3, #19
 800a91e:	6922      	ldr	r2, [r4, #16]
 800a920:	6022      	str	r2, [r4, #0]
 800a922:	d504      	bpl.n	800a92e <__sflush_r+0x7e>
 800a924:	1c42      	adds	r2, r0, #1
 800a926:	d101      	bne.n	800a92c <__sflush_r+0x7c>
 800a928:	682b      	ldr	r3, [r5, #0]
 800a92a:	b903      	cbnz	r3, 800a92e <__sflush_r+0x7e>
 800a92c:	6560      	str	r0, [r4, #84]	; 0x54
 800a92e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a930:	602f      	str	r7, [r5, #0]
 800a932:	2900      	cmp	r1, #0
 800a934:	d0c9      	beq.n	800a8ca <__sflush_r+0x1a>
 800a936:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a93a:	4299      	cmp	r1, r3
 800a93c:	d002      	beq.n	800a944 <__sflush_r+0x94>
 800a93e:	4628      	mov	r0, r5
 800a940:	f000 f994 	bl	800ac6c <_free_r>
 800a944:	2000      	movs	r0, #0
 800a946:	6360      	str	r0, [r4, #52]	; 0x34
 800a948:	e7c0      	b.n	800a8cc <__sflush_r+0x1c>
 800a94a:	2301      	movs	r3, #1
 800a94c:	4628      	mov	r0, r5
 800a94e:	47b0      	blx	r6
 800a950:	1c41      	adds	r1, r0, #1
 800a952:	d1c8      	bne.n	800a8e6 <__sflush_r+0x36>
 800a954:	682b      	ldr	r3, [r5, #0]
 800a956:	2b00      	cmp	r3, #0
 800a958:	d0c5      	beq.n	800a8e6 <__sflush_r+0x36>
 800a95a:	2b1d      	cmp	r3, #29
 800a95c:	d001      	beq.n	800a962 <__sflush_r+0xb2>
 800a95e:	2b16      	cmp	r3, #22
 800a960:	d101      	bne.n	800a966 <__sflush_r+0xb6>
 800a962:	602f      	str	r7, [r5, #0]
 800a964:	e7b1      	b.n	800a8ca <__sflush_r+0x1a>
 800a966:	89a3      	ldrh	r3, [r4, #12]
 800a968:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a96c:	81a3      	strh	r3, [r4, #12]
 800a96e:	e7ad      	b.n	800a8cc <__sflush_r+0x1c>
 800a970:	690f      	ldr	r7, [r1, #16]
 800a972:	2f00      	cmp	r7, #0
 800a974:	d0a9      	beq.n	800a8ca <__sflush_r+0x1a>
 800a976:	0793      	lsls	r3, r2, #30
 800a978:	680e      	ldr	r6, [r1, #0]
 800a97a:	bf08      	it	eq
 800a97c:	694b      	ldreq	r3, [r1, #20]
 800a97e:	600f      	str	r7, [r1, #0]
 800a980:	bf18      	it	ne
 800a982:	2300      	movne	r3, #0
 800a984:	eba6 0807 	sub.w	r8, r6, r7
 800a988:	608b      	str	r3, [r1, #8]
 800a98a:	f1b8 0f00 	cmp.w	r8, #0
 800a98e:	dd9c      	ble.n	800a8ca <__sflush_r+0x1a>
 800a990:	4643      	mov	r3, r8
 800a992:	463a      	mov	r2, r7
 800a994:	6a21      	ldr	r1, [r4, #32]
 800a996:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a998:	4628      	mov	r0, r5
 800a99a:	47b0      	blx	r6
 800a99c:	2800      	cmp	r0, #0
 800a99e:	dc06      	bgt.n	800a9ae <__sflush_r+0xfe>
 800a9a0:	89a3      	ldrh	r3, [r4, #12]
 800a9a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a9a6:	81a3      	strh	r3, [r4, #12]
 800a9a8:	f04f 30ff 	mov.w	r0, #4294967295
 800a9ac:	e78e      	b.n	800a8cc <__sflush_r+0x1c>
 800a9ae:	4407      	add	r7, r0
 800a9b0:	eba8 0800 	sub.w	r8, r8, r0
 800a9b4:	e7e9      	b.n	800a98a <__sflush_r+0xda>
 800a9b6:	bf00      	nop
 800a9b8:	20400001 	.word	0x20400001

0800a9bc <_fflush_r>:
 800a9bc:	b538      	push	{r3, r4, r5, lr}
 800a9be:	690b      	ldr	r3, [r1, #16]
 800a9c0:	4605      	mov	r5, r0
 800a9c2:	460c      	mov	r4, r1
 800a9c4:	b1db      	cbz	r3, 800a9fe <_fflush_r+0x42>
 800a9c6:	b118      	cbz	r0, 800a9d0 <_fflush_r+0x14>
 800a9c8:	6983      	ldr	r3, [r0, #24]
 800a9ca:	b90b      	cbnz	r3, 800a9d0 <_fflush_r+0x14>
 800a9cc:	f000 f860 	bl	800aa90 <__sinit>
 800a9d0:	4b0c      	ldr	r3, [pc, #48]	; (800aa04 <_fflush_r+0x48>)
 800a9d2:	429c      	cmp	r4, r3
 800a9d4:	d109      	bne.n	800a9ea <_fflush_r+0x2e>
 800a9d6:	686c      	ldr	r4, [r5, #4]
 800a9d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a9dc:	b17b      	cbz	r3, 800a9fe <_fflush_r+0x42>
 800a9de:	4621      	mov	r1, r4
 800a9e0:	4628      	mov	r0, r5
 800a9e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a9e6:	f7ff bf63 	b.w	800a8b0 <__sflush_r>
 800a9ea:	4b07      	ldr	r3, [pc, #28]	; (800aa08 <_fflush_r+0x4c>)
 800a9ec:	429c      	cmp	r4, r3
 800a9ee:	d101      	bne.n	800a9f4 <_fflush_r+0x38>
 800a9f0:	68ac      	ldr	r4, [r5, #8]
 800a9f2:	e7f1      	b.n	800a9d8 <_fflush_r+0x1c>
 800a9f4:	4b05      	ldr	r3, [pc, #20]	; (800aa0c <_fflush_r+0x50>)
 800a9f6:	429c      	cmp	r4, r3
 800a9f8:	bf08      	it	eq
 800a9fa:	68ec      	ldreq	r4, [r5, #12]
 800a9fc:	e7ec      	b.n	800a9d8 <_fflush_r+0x1c>
 800a9fe:	2000      	movs	r0, #0
 800aa00:	bd38      	pop	{r3, r4, r5, pc}
 800aa02:	bf00      	nop
 800aa04:	0800bcd8 	.word	0x0800bcd8
 800aa08:	0800bcf8 	.word	0x0800bcf8
 800aa0c:	0800bcb8 	.word	0x0800bcb8

0800aa10 <std>:
 800aa10:	2300      	movs	r3, #0
 800aa12:	b510      	push	{r4, lr}
 800aa14:	4604      	mov	r4, r0
 800aa16:	e9c0 3300 	strd	r3, r3, [r0]
 800aa1a:	6083      	str	r3, [r0, #8]
 800aa1c:	8181      	strh	r1, [r0, #12]
 800aa1e:	6643      	str	r3, [r0, #100]	; 0x64
 800aa20:	81c2      	strh	r2, [r0, #14]
 800aa22:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800aa26:	6183      	str	r3, [r0, #24]
 800aa28:	4619      	mov	r1, r3
 800aa2a:	2208      	movs	r2, #8
 800aa2c:	305c      	adds	r0, #92	; 0x5c
 800aa2e:	f7ff fdd6 	bl	800a5de <memset>
 800aa32:	4b05      	ldr	r3, [pc, #20]	; (800aa48 <std+0x38>)
 800aa34:	6263      	str	r3, [r4, #36]	; 0x24
 800aa36:	4b05      	ldr	r3, [pc, #20]	; (800aa4c <std+0x3c>)
 800aa38:	62a3      	str	r3, [r4, #40]	; 0x28
 800aa3a:	4b05      	ldr	r3, [pc, #20]	; (800aa50 <std+0x40>)
 800aa3c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800aa3e:	4b05      	ldr	r3, [pc, #20]	; (800aa54 <std+0x44>)
 800aa40:	6224      	str	r4, [r4, #32]
 800aa42:	6323      	str	r3, [r4, #48]	; 0x30
 800aa44:	bd10      	pop	{r4, pc}
 800aa46:	bf00      	nop
 800aa48:	0800b391 	.word	0x0800b391
 800aa4c:	0800b3b3 	.word	0x0800b3b3
 800aa50:	0800b3eb 	.word	0x0800b3eb
 800aa54:	0800b40f 	.word	0x0800b40f

0800aa58 <_cleanup_r>:
 800aa58:	4901      	ldr	r1, [pc, #4]	; (800aa60 <_cleanup_r+0x8>)
 800aa5a:	f000 b885 	b.w	800ab68 <_fwalk_reent>
 800aa5e:	bf00      	nop
 800aa60:	0800a9bd 	.word	0x0800a9bd

0800aa64 <__sfmoreglue>:
 800aa64:	b570      	push	{r4, r5, r6, lr}
 800aa66:	1e4a      	subs	r2, r1, #1
 800aa68:	2568      	movs	r5, #104	; 0x68
 800aa6a:	4355      	muls	r5, r2
 800aa6c:	460e      	mov	r6, r1
 800aa6e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800aa72:	f000 f949 	bl	800ad08 <_malloc_r>
 800aa76:	4604      	mov	r4, r0
 800aa78:	b140      	cbz	r0, 800aa8c <__sfmoreglue+0x28>
 800aa7a:	2100      	movs	r1, #0
 800aa7c:	e9c0 1600 	strd	r1, r6, [r0]
 800aa80:	300c      	adds	r0, #12
 800aa82:	60a0      	str	r0, [r4, #8]
 800aa84:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800aa88:	f7ff fda9 	bl	800a5de <memset>
 800aa8c:	4620      	mov	r0, r4
 800aa8e:	bd70      	pop	{r4, r5, r6, pc}

0800aa90 <__sinit>:
 800aa90:	6983      	ldr	r3, [r0, #24]
 800aa92:	b510      	push	{r4, lr}
 800aa94:	4604      	mov	r4, r0
 800aa96:	bb33      	cbnz	r3, 800aae6 <__sinit+0x56>
 800aa98:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800aa9c:	6503      	str	r3, [r0, #80]	; 0x50
 800aa9e:	4b12      	ldr	r3, [pc, #72]	; (800aae8 <__sinit+0x58>)
 800aaa0:	4a12      	ldr	r2, [pc, #72]	; (800aaec <__sinit+0x5c>)
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	6282      	str	r2, [r0, #40]	; 0x28
 800aaa6:	4298      	cmp	r0, r3
 800aaa8:	bf04      	itt	eq
 800aaaa:	2301      	moveq	r3, #1
 800aaac:	6183      	streq	r3, [r0, #24]
 800aaae:	f000 f81f 	bl	800aaf0 <__sfp>
 800aab2:	6060      	str	r0, [r4, #4]
 800aab4:	4620      	mov	r0, r4
 800aab6:	f000 f81b 	bl	800aaf0 <__sfp>
 800aaba:	60a0      	str	r0, [r4, #8]
 800aabc:	4620      	mov	r0, r4
 800aabe:	f000 f817 	bl	800aaf0 <__sfp>
 800aac2:	2200      	movs	r2, #0
 800aac4:	60e0      	str	r0, [r4, #12]
 800aac6:	2104      	movs	r1, #4
 800aac8:	6860      	ldr	r0, [r4, #4]
 800aaca:	f7ff ffa1 	bl	800aa10 <std>
 800aace:	2201      	movs	r2, #1
 800aad0:	2109      	movs	r1, #9
 800aad2:	68a0      	ldr	r0, [r4, #8]
 800aad4:	f7ff ff9c 	bl	800aa10 <std>
 800aad8:	2202      	movs	r2, #2
 800aada:	2112      	movs	r1, #18
 800aadc:	68e0      	ldr	r0, [r4, #12]
 800aade:	f7ff ff97 	bl	800aa10 <std>
 800aae2:	2301      	movs	r3, #1
 800aae4:	61a3      	str	r3, [r4, #24]
 800aae6:	bd10      	pop	{r4, pc}
 800aae8:	0800bcb4 	.word	0x0800bcb4
 800aaec:	0800aa59 	.word	0x0800aa59

0800aaf0 <__sfp>:
 800aaf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aaf2:	4b1b      	ldr	r3, [pc, #108]	; (800ab60 <__sfp+0x70>)
 800aaf4:	681e      	ldr	r6, [r3, #0]
 800aaf6:	69b3      	ldr	r3, [r6, #24]
 800aaf8:	4607      	mov	r7, r0
 800aafa:	b913      	cbnz	r3, 800ab02 <__sfp+0x12>
 800aafc:	4630      	mov	r0, r6
 800aafe:	f7ff ffc7 	bl	800aa90 <__sinit>
 800ab02:	3648      	adds	r6, #72	; 0x48
 800ab04:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ab08:	3b01      	subs	r3, #1
 800ab0a:	d503      	bpl.n	800ab14 <__sfp+0x24>
 800ab0c:	6833      	ldr	r3, [r6, #0]
 800ab0e:	b133      	cbz	r3, 800ab1e <__sfp+0x2e>
 800ab10:	6836      	ldr	r6, [r6, #0]
 800ab12:	e7f7      	b.n	800ab04 <__sfp+0x14>
 800ab14:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ab18:	b16d      	cbz	r5, 800ab36 <__sfp+0x46>
 800ab1a:	3468      	adds	r4, #104	; 0x68
 800ab1c:	e7f4      	b.n	800ab08 <__sfp+0x18>
 800ab1e:	2104      	movs	r1, #4
 800ab20:	4638      	mov	r0, r7
 800ab22:	f7ff ff9f 	bl	800aa64 <__sfmoreglue>
 800ab26:	6030      	str	r0, [r6, #0]
 800ab28:	2800      	cmp	r0, #0
 800ab2a:	d1f1      	bne.n	800ab10 <__sfp+0x20>
 800ab2c:	230c      	movs	r3, #12
 800ab2e:	603b      	str	r3, [r7, #0]
 800ab30:	4604      	mov	r4, r0
 800ab32:	4620      	mov	r0, r4
 800ab34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ab36:	4b0b      	ldr	r3, [pc, #44]	; (800ab64 <__sfp+0x74>)
 800ab38:	6665      	str	r5, [r4, #100]	; 0x64
 800ab3a:	e9c4 5500 	strd	r5, r5, [r4]
 800ab3e:	60a5      	str	r5, [r4, #8]
 800ab40:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800ab44:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800ab48:	2208      	movs	r2, #8
 800ab4a:	4629      	mov	r1, r5
 800ab4c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ab50:	f7ff fd45 	bl	800a5de <memset>
 800ab54:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ab58:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ab5c:	e7e9      	b.n	800ab32 <__sfp+0x42>
 800ab5e:	bf00      	nop
 800ab60:	0800bcb4 	.word	0x0800bcb4
 800ab64:	ffff0001 	.word	0xffff0001

0800ab68 <_fwalk_reent>:
 800ab68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab6c:	4680      	mov	r8, r0
 800ab6e:	4689      	mov	r9, r1
 800ab70:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ab74:	2600      	movs	r6, #0
 800ab76:	b914      	cbnz	r4, 800ab7e <_fwalk_reent+0x16>
 800ab78:	4630      	mov	r0, r6
 800ab7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab7e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800ab82:	3f01      	subs	r7, #1
 800ab84:	d501      	bpl.n	800ab8a <_fwalk_reent+0x22>
 800ab86:	6824      	ldr	r4, [r4, #0]
 800ab88:	e7f5      	b.n	800ab76 <_fwalk_reent+0xe>
 800ab8a:	89ab      	ldrh	r3, [r5, #12]
 800ab8c:	2b01      	cmp	r3, #1
 800ab8e:	d907      	bls.n	800aba0 <_fwalk_reent+0x38>
 800ab90:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ab94:	3301      	adds	r3, #1
 800ab96:	d003      	beq.n	800aba0 <_fwalk_reent+0x38>
 800ab98:	4629      	mov	r1, r5
 800ab9a:	4640      	mov	r0, r8
 800ab9c:	47c8      	blx	r9
 800ab9e:	4306      	orrs	r6, r0
 800aba0:	3568      	adds	r5, #104	; 0x68
 800aba2:	e7ee      	b.n	800ab82 <_fwalk_reent+0x1a>

0800aba4 <__swhatbuf_r>:
 800aba4:	b570      	push	{r4, r5, r6, lr}
 800aba6:	460e      	mov	r6, r1
 800aba8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800abac:	2900      	cmp	r1, #0
 800abae:	b096      	sub	sp, #88	; 0x58
 800abb0:	4614      	mov	r4, r2
 800abb2:	461d      	mov	r5, r3
 800abb4:	da07      	bge.n	800abc6 <__swhatbuf_r+0x22>
 800abb6:	2300      	movs	r3, #0
 800abb8:	602b      	str	r3, [r5, #0]
 800abba:	89b3      	ldrh	r3, [r6, #12]
 800abbc:	061a      	lsls	r2, r3, #24
 800abbe:	d410      	bmi.n	800abe2 <__swhatbuf_r+0x3e>
 800abc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800abc4:	e00e      	b.n	800abe4 <__swhatbuf_r+0x40>
 800abc6:	466a      	mov	r2, sp
 800abc8:	f000 fc48 	bl	800b45c <_fstat_r>
 800abcc:	2800      	cmp	r0, #0
 800abce:	dbf2      	blt.n	800abb6 <__swhatbuf_r+0x12>
 800abd0:	9a01      	ldr	r2, [sp, #4]
 800abd2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800abd6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800abda:	425a      	negs	r2, r3
 800abdc:	415a      	adcs	r2, r3
 800abde:	602a      	str	r2, [r5, #0]
 800abe0:	e7ee      	b.n	800abc0 <__swhatbuf_r+0x1c>
 800abe2:	2340      	movs	r3, #64	; 0x40
 800abe4:	2000      	movs	r0, #0
 800abe6:	6023      	str	r3, [r4, #0]
 800abe8:	b016      	add	sp, #88	; 0x58
 800abea:	bd70      	pop	{r4, r5, r6, pc}

0800abec <__smakebuf_r>:
 800abec:	898b      	ldrh	r3, [r1, #12]
 800abee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800abf0:	079d      	lsls	r5, r3, #30
 800abf2:	4606      	mov	r6, r0
 800abf4:	460c      	mov	r4, r1
 800abf6:	d507      	bpl.n	800ac08 <__smakebuf_r+0x1c>
 800abf8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800abfc:	6023      	str	r3, [r4, #0]
 800abfe:	6123      	str	r3, [r4, #16]
 800ac00:	2301      	movs	r3, #1
 800ac02:	6163      	str	r3, [r4, #20]
 800ac04:	b002      	add	sp, #8
 800ac06:	bd70      	pop	{r4, r5, r6, pc}
 800ac08:	ab01      	add	r3, sp, #4
 800ac0a:	466a      	mov	r2, sp
 800ac0c:	f7ff ffca 	bl	800aba4 <__swhatbuf_r>
 800ac10:	9900      	ldr	r1, [sp, #0]
 800ac12:	4605      	mov	r5, r0
 800ac14:	4630      	mov	r0, r6
 800ac16:	f000 f877 	bl	800ad08 <_malloc_r>
 800ac1a:	b948      	cbnz	r0, 800ac30 <__smakebuf_r+0x44>
 800ac1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac20:	059a      	lsls	r2, r3, #22
 800ac22:	d4ef      	bmi.n	800ac04 <__smakebuf_r+0x18>
 800ac24:	f023 0303 	bic.w	r3, r3, #3
 800ac28:	f043 0302 	orr.w	r3, r3, #2
 800ac2c:	81a3      	strh	r3, [r4, #12]
 800ac2e:	e7e3      	b.n	800abf8 <__smakebuf_r+0xc>
 800ac30:	4b0d      	ldr	r3, [pc, #52]	; (800ac68 <__smakebuf_r+0x7c>)
 800ac32:	62b3      	str	r3, [r6, #40]	; 0x28
 800ac34:	89a3      	ldrh	r3, [r4, #12]
 800ac36:	6020      	str	r0, [r4, #0]
 800ac38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac3c:	81a3      	strh	r3, [r4, #12]
 800ac3e:	9b00      	ldr	r3, [sp, #0]
 800ac40:	6163      	str	r3, [r4, #20]
 800ac42:	9b01      	ldr	r3, [sp, #4]
 800ac44:	6120      	str	r0, [r4, #16]
 800ac46:	b15b      	cbz	r3, 800ac60 <__smakebuf_r+0x74>
 800ac48:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ac4c:	4630      	mov	r0, r6
 800ac4e:	f000 fc17 	bl	800b480 <_isatty_r>
 800ac52:	b128      	cbz	r0, 800ac60 <__smakebuf_r+0x74>
 800ac54:	89a3      	ldrh	r3, [r4, #12]
 800ac56:	f023 0303 	bic.w	r3, r3, #3
 800ac5a:	f043 0301 	orr.w	r3, r3, #1
 800ac5e:	81a3      	strh	r3, [r4, #12]
 800ac60:	89a3      	ldrh	r3, [r4, #12]
 800ac62:	431d      	orrs	r5, r3
 800ac64:	81a5      	strh	r5, [r4, #12]
 800ac66:	e7cd      	b.n	800ac04 <__smakebuf_r+0x18>
 800ac68:	0800aa59 	.word	0x0800aa59

0800ac6c <_free_r>:
 800ac6c:	b538      	push	{r3, r4, r5, lr}
 800ac6e:	4605      	mov	r5, r0
 800ac70:	2900      	cmp	r1, #0
 800ac72:	d045      	beq.n	800ad00 <_free_r+0x94>
 800ac74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ac78:	1f0c      	subs	r4, r1, #4
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	bfb8      	it	lt
 800ac7e:	18e4      	addlt	r4, r4, r3
 800ac80:	f000 fc39 	bl	800b4f6 <__malloc_lock>
 800ac84:	4a1f      	ldr	r2, [pc, #124]	; (800ad04 <_free_r+0x98>)
 800ac86:	6813      	ldr	r3, [r2, #0]
 800ac88:	4610      	mov	r0, r2
 800ac8a:	b933      	cbnz	r3, 800ac9a <_free_r+0x2e>
 800ac8c:	6063      	str	r3, [r4, #4]
 800ac8e:	6014      	str	r4, [r2, #0]
 800ac90:	4628      	mov	r0, r5
 800ac92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ac96:	f000 bc2f 	b.w	800b4f8 <__malloc_unlock>
 800ac9a:	42a3      	cmp	r3, r4
 800ac9c:	d90c      	bls.n	800acb8 <_free_r+0x4c>
 800ac9e:	6821      	ldr	r1, [r4, #0]
 800aca0:	1862      	adds	r2, r4, r1
 800aca2:	4293      	cmp	r3, r2
 800aca4:	bf04      	itt	eq
 800aca6:	681a      	ldreq	r2, [r3, #0]
 800aca8:	685b      	ldreq	r3, [r3, #4]
 800acaa:	6063      	str	r3, [r4, #4]
 800acac:	bf04      	itt	eq
 800acae:	1852      	addeq	r2, r2, r1
 800acb0:	6022      	streq	r2, [r4, #0]
 800acb2:	6004      	str	r4, [r0, #0]
 800acb4:	e7ec      	b.n	800ac90 <_free_r+0x24>
 800acb6:	4613      	mov	r3, r2
 800acb8:	685a      	ldr	r2, [r3, #4]
 800acba:	b10a      	cbz	r2, 800acc0 <_free_r+0x54>
 800acbc:	42a2      	cmp	r2, r4
 800acbe:	d9fa      	bls.n	800acb6 <_free_r+0x4a>
 800acc0:	6819      	ldr	r1, [r3, #0]
 800acc2:	1858      	adds	r0, r3, r1
 800acc4:	42a0      	cmp	r0, r4
 800acc6:	d10b      	bne.n	800ace0 <_free_r+0x74>
 800acc8:	6820      	ldr	r0, [r4, #0]
 800acca:	4401      	add	r1, r0
 800accc:	1858      	adds	r0, r3, r1
 800acce:	4282      	cmp	r2, r0
 800acd0:	6019      	str	r1, [r3, #0]
 800acd2:	d1dd      	bne.n	800ac90 <_free_r+0x24>
 800acd4:	6810      	ldr	r0, [r2, #0]
 800acd6:	6852      	ldr	r2, [r2, #4]
 800acd8:	605a      	str	r2, [r3, #4]
 800acda:	4401      	add	r1, r0
 800acdc:	6019      	str	r1, [r3, #0]
 800acde:	e7d7      	b.n	800ac90 <_free_r+0x24>
 800ace0:	d902      	bls.n	800ace8 <_free_r+0x7c>
 800ace2:	230c      	movs	r3, #12
 800ace4:	602b      	str	r3, [r5, #0]
 800ace6:	e7d3      	b.n	800ac90 <_free_r+0x24>
 800ace8:	6820      	ldr	r0, [r4, #0]
 800acea:	1821      	adds	r1, r4, r0
 800acec:	428a      	cmp	r2, r1
 800acee:	bf04      	itt	eq
 800acf0:	6811      	ldreq	r1, [r2, #0]
 800acf2:	6852      	ldreq	r2, [r2, #4]
 800acf4:	6062      	str	r2, [r4, #4]
 800acf6:	bf04      	itt	eq
 800acf8:	1809      	addeq	r1, r1, r0
 800acfa:	6021      	streq	r1, [r4, #0]
 800acfc:	605c      	str	r4, [r3, #4]
 800acfe:	e7c7      	b.n	800ac90 <_free_r+0x24>
 800ad00:	bd38      	pop	{r3, r4, r5, pc}
 800ad02:	bf00      	nop
 800ad04:	20000524 	.word	0x20000524

0800ad08 <_malloc_r>:
 800ad08:	b570      	push	{r4, r5, r6, lr}
 800ad0a:	1ccd      	adds	r5, r1, #3
 800ad0c:	f025 0503 	bic.w	r5, r5, #3
 800ad10:	3508      	adds	r5, #8
 800ad12:	2d0c      	cmp	r5, #12
 800ad14:	bf38      	it	cc
 800ad16:	250c      	movcc	r5, #12
 800ad18:	2d00      	cmp	r5, #0
 800ad1a:	4606      	mov	r6, r0
 800ad1c:	db01      	blt.n	800ad22 <_malloc_r+0x1a>
 800ad1e:	42a9      	cmp	r1, r5
 800ad20:	d903      	bls.n	800ad2a <_malloc_r+0x22>
 800ad22:	230c      	movs	r3, #12
 800ad24:	6033      	str	r3, [r6, #0]
 800ad26:	2000      	movs	r0, #0
 800ad28:	bd70      	pop	{r4, r5, r6, pc}
 800ad2a:	f000 fbe4 	bl	800b4f6 <__malloc_lock>
 800ad2e:	4a21      	ldr	r2, [pc, #132]	; (800adb4 <_malloc_r+0xac>)
 800ad30:	6814      	ldr	r4, [r2, #0]
 800ad32:	4621      	mov	r1, r4
 800ad34:	b991      	cbnz	r1, 800ad5c <_malloc_r+0x54>
 800ad36:	4c20      	ldr	r4, [pc, #128]	; (800adb8 <_malloc_r+0xb0>)
 800ad38:	6823      	ldr	r3, [r4, #0]
 800ad3a:	b91b      	cbnz	r3, 800ad44 <_malloc_r+0x3c>
 800ad3c:	4630      	mov	r0, r6
 800ad3e:	f000 fb17 	bl	800b370 <_sbrk_r>
 800ad42:	6020      	str	r0, [r4, #0]
 800ad44:	4629      	mov	r1, r5
 800ad46:	4630      	mov	r0, r6
 800ad48:	f000 fb12 	bl	800b370 <_sbrk_r>
 800ad4c:	1c43      	adds	r3, r0, #1
 800ad4e:	d124      	bne.n	800ad9a <_malloc_r+0x92>
 800ad50:	230c      	movs	r3, #12
 800ad52:	6033      	str	r3, [r6, #0]
 800ad54:	4630      	mov	r0, r6
 800ad56:	f000 fbcf 	bl	800b4f8 <__malloc_unlock>
 800ad5a:	e7e4      	b.n	800ad26 <_malloc_r+0x1e>
 800ad5c:	680b      	ldr	r3, [r1, #0]
 800ad5e:	1b5b      	subs	r3, r3, r5
 800ad60:	d418      	bmi.n	800ad94 <_malloc_r+0x8c>
 800ad62:	2b0b      	cmp	r3, #11
 800ad64:	d90f      	bls.n	800ad86 <_malloc_r+0x7e>
 800ad66:	600b      	str	r3, [r1, #0]
 800ad68:	50cd      	str	r5, [r1, r3]
 800ad6a:	18cc      	adds	r4, r1, r3
 800ad6c:	4630      	mov	r0, r6
 800ad6e:	f000 fbc3 	bl	800b4f8 <__malloc_unlock>
 800ad72:	f104 000b 	add.w	r0, r4, #11
 800ad76:	1d23      	adds	r3, r4, #4
 800ad78:	f020 0007 	bic.w	r0, r0, #7
 800ad7c:	1ac3      	subs	r3, r0, r3
 800ad7e:	d0d3      	beq.n	800ad28 <_malloc_r+0x20>
 800ad80:	425a      	negs	r2, r3
 800ad82:	50e2      	str	r2, [r4, r3]
 800ad84:	e7d0      	b.n	800ad28 <_malloc_r+0x20>
 800ad86:	428c      	cmp	r4, r1
 800ad88:	684b      	ldr	r3, [r1, #4]
 800ad8a:	bf16      	itet	ne
 800ad8c:	6063      	strne	r3, [r4, #4]
 800ad8e:	6013      	streq	r3, [r2, #0]
 800ad90:	460c      	movne	r4, r1
 800ad92:	e7eb      	b.n	800ad6c <_malloc_r+0x64>
 800ad94:	460c      	mov	r4, r1
 800ad96:	6849      	ldr	r1, [r1, #4]
 800ad98:	e7cc      	b.n	800ad34 <_malloc_r+0x2c>
 800ad9a:	1cc4      	adds	r4, r0, #3
 800ad9c:	f024 0403 	bic.w	r4, r4, #3
 800ada0:	42a0      	cmp	r0, r4
 800ada2:	d005      	beq.n	800adb0 <_malloc_r+0xa8>
 800ada4:	1a21      	subs	r1, r4, r0
 800ada6:	4630      	mov	r0, r6
 800ada8:	f000 fae2 	bl	800b370 <_sbrk_r>
 800adac:	3001      	adds	r0, #1
 800adae:	d0cf      	beq.n	800ad50 <_malloc_r+0x48>
 800adb0:	6025      	str	r5, [r4, #0]
 800adb2:	e7db      	b.n	800ad6c <_malloc_r+0x64>
 800adb4:	20000524 	.word	0x20000524
 800adb8:	20000528 	.word	0x20000528

0800adbc <__ssputs_r>:
 800adbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800adc0:	688e      	ldr	r6, [r1, #8]
 800adc2:	429e      	cmp	r6, r3
 800adc4:	4682      	mov	sl, r0
 800adc6:	460c      	mov	r4, r1
 800adc8:	4690      	mov	r8, r2
 800adca:	4699      	mov	r9, r3
 800adcc:	d837      	bhi.n	800ae3e <__ssputs_r+0x82>
 800adce:	898a      	ldrh	r2, [r1, #12]
 800add0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800add4:	d031      	beq.n	800ae3a <__ssputs_r+0x7e>
 800add6:	6825      	ldr	r5, [r4, #0]
 800add8:	6909      	ldr	r1, [r1, #16]
 800adda:	1a6f      	subs	r7, r5, r1
 800addc:	6965      	ldr	r5, [r4, #20]
 800adde:	2302      	movs	r3, #2
 800ade0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ade4:	fb95 f5f3 	sdiv	r5, r5, r3
 800ade8:	f109 0301 	add.w	r3, r9, #1
 800adec:	443b      	add	r3, r7
 800adee:	429d      	cmp	r5, r3
 800adf0:	bf38      	it	cc
 800adf2:	461d      	movcc	r5, r3
 800adf4:	0553      	lsls	r3, r2, #21
 800adf6:	d530      	bpl.n	800ae5a <__ssputs_r+0x9e>
 800adf8:	4629      	mov	r1, r5
 800adfa:	f7ff ff85 	bl	800ad08 <_malloc_r>
 800adfe:	4606      	mov	r6, r0
 800ae00:	b950      	cbnz	r0, 800ae18 <__ssputs_r+0x5c>
 800ae02:	230c      	movs	r3, #12
 800ae04:	f8ca 3000 	str.w	r3, [sl]
 800ae08:	89a3      	ldrh	r3, [r4, #12]
 800ae0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae0e:	81a3      	strh	r3, [r4, #12]
 800ae10:	f04f 30ff 	mov.w	r0, #4294967295
 800ae14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae18:	463a      	mov	r2, r7
 800ae1a:	6921      	ldr	r1, [r4, #16]
 800ae1c:	f7ff fbd4 	bl	800a5c8 <memcpy>
 800ae20:	89a3      	ldrh	r3, [r4, #12]
 800ae22:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ae26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae2a:	81a3      	strh	r3, [r4, #12]
 800ae2c:	6126      	str	r6, [r4, #16]
 800ae2e:	6165      	str	r5, [r4, #20]
 800ae30:	443e      	add	r6, r7
 800ae32:	1bed      	subs	r5, r5, r7
 800ae34:	6026      	str	r6, [r4, #0]
 800ae36:	60a5      	str	r5, [r4, #8]
 800ae38:	464e      	mov	r6, r9
 800ae3a:	454e      	cmp	r6, r9
 800ae3c:	d900      	bls.n	800ae40 <__ssputs_r+0x84>
 800ae3e:	464e      	mov	r6, r9
 800ae40:	4632      	mov	r2, r6
 800ae42:	4641      	mov	r1, r8
 800ae44:	6820      	ldr	r0, [r4, #0]
 800ae46:	f000 fb3d 	bl	800b4c4 <memmove>
 800ae4a:	68a3      	ldr	r3, [r4, #8]
 800ae4c:	1b9b      	subs	r3, r3, r6
 800ae4e:	60a3      	str	r3, [r4, #8]
 800ae50:	6823      	ldr	r3, [r4, #0]
 800ae52:	441e      	add	r6, r3
 800ae54:	6026      	str	r6, [r4, #0]
 800ae56:	2000      	movs	r0, #0
 800ae58:	e7dc      	b.n	800ae14 <__ssputs_r+0x58>
 800ae5a:	462a      	mov	r2, r5
 800ae5c:	f000 fb4d 	bl	800b4fa <_realloc_r>
 800ae60:	4606      	mov	r6, r0
 800ae62:	2800      	cmp	r0, #0
 800ae64:	d1e2      	bne.n	800ae2c <__ssputs_r+0x70>
 800ae66:	6921      	ldr	r1, [r4, #16]
 800ae68:	4650      	mov	r0, sl
 800ae6a:	f7ff feff 	bl	800ac6c <_free_r>
 800ae6e:	e7c8      	b.n	800ae02 <__ssputs_r+0x46>

0800ae70 <_svfiprintf_r>:
 800ae70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae74:	461d      	mov	r5, r3
 800ae76:	898b      	ldrh	r3, [r1, #12]
 800ae78:	061f      	lsls	r7, r3, #24
 800ae7a:	b09d      	sub	sp, #116	; 0x74
 800ae7c:	4680      	mov	r8, r0
 800ae7e:	460c      	mov	r4, r1
 800ae80:	4616      	mov	r6, r2
 800ae82:	d50f      	bpl.n	800aea4 <_svfiprintf_r+0x34>
 800ae84:	690b      	ldr	r3, [r1, #16]
 800ae86:	b96b      	cbnz	r3, 800aea4 <_svfiprintf_r+0x34>
 800ae88:	2140      	movs	r1, #64	; 0x40
 800ae8a:	f7ff ff3d 	bl	800ad08 <_malloc_r>
 800ae8e:	6020      	str	r0, [r4, #0]
 800ae90:	6120      	str	r0, [r4, #16]
 800ae92:	b928      	cbnz	r0, 800aea0 <_svfiprintf_r+0x30>
 800ae94:	230c      	movs	r3, #12
 800ae96:	f8c8 3000 	str.w	r3, [r8]
 800ae9a:	f04f 30ff 	mov.w	r0, #4294967295
 800ae9e:	e0c8      	b.n	800b032 <_svfiprintf_r+0x1c2>
 800aea0:	2340      	movs	r3, #64	; 0x40
 800aea2:	6163      	str	r3, [r4, #20]
 800aea4:	2300      	movs	r3, #0
 800aea6:	9309      	str	r3, [sp, #36]	; 0x24
 800aea8:	2320      	movs	r3, #32
 800aeaa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800aeae:	2330      	movs	r3, #48	; 0x30
 800aeb0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800aeb4:	9503      	str	r5, [sp, #12]
 800aeb6:	f04f 0b01 	mov.w	fp, #1
 800aeba:	4637      	mov	r7, r6
 800aebc:	463d      	mov	r5, r7
 800aebe:	f815 3b01 	ldrb.w	r3, [r5], #1
 800aec2:	b10b      	cbz	r3, 800aec8 <_svfiprintf_r+0x58>
 800aec4:	2b25      	cmp	r3, #37	; 0x25
 800aec6:	d13e      	bne.n	800af46 <_svfiprintf_r+0xd6>
 800aec8:	ebb7 0a06 	subs.w	sl, r7, r6
 800aecc:	d00b      	beq.n	800aee6 <_svfiprintf_r+0x76>
 800aece:	4653      	mov	r3, sl
 800aed0:	4632      	mov	r2, r6
 800aed2:	4621      	mov	r1, r4
 800aed4:	4640      	mov	r0, r8
 800aed6:	f7ff ff71 	bl	800adbc <__ssputs_r>
 800aeda:	3001      	adds	r0, #1
 800aedc:	f000 80a4 	beq.w	800b028 <_svfiprintf_r+0x1b8>
 800aee0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aee2:	4453      	add	r3, sl
 800aee4:	9309      	str	r3, [sp, #36]	; 0x24
 800aee6:	783b      	ldrb	r3, [r7, #0]
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	f000 809d 	beq.w	800b028 <_svfiprintf_r+0x1b8>
 800aeee:	2300      	movs	r3, #0
 800aef0:	f04f 32ff 	mov.w	r2, #4294967295
 800aef4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aef8:	9304      	str	r3, [sp, #16]
 800aefa:	9307      	str	r3, [sp, #28]
 800aefc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800af00:	931a      	str	r3, [sp, #104]	; 0x68
 800af02:	462f      	mov	r7, r5
 800af04:	2205      	movs	r2, #5
 800af06:	f817 1b01 	ldrb.w	r1, [r7], #1
 800af0a:	4850      	ldr	r0, [pc, #320]	; (800b04c <_svfiprintf_r+0x1dc>)
 800af0c:	f7f5 f960 	bl	80001d0 <memchr>
 800af10:	9b04      	ldr	r3, [sp, #16]
 800af12:	b9d0      	cbnz	r0, 800af4a <_svfiprintf_r+0xda>
 800af14:	06d9      	lsls	r1, r3, #27
 800af16:	bf44      	itt	mi
 800af18:	2220      	movmi	r2, #32
 800af1a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800af1e:	071a      	lsls	r2, r3, #28
 800af20:	bf44      	itt	mi
 800af22:	222b      	movmi	r2, #43	; 0x2b
 800af24:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800af28:	782a      	ldrb	r2, [r5, #0]
 800af2a:	2a2a      	cmp	r2, #42	; 0x2a
 800af2c:	d015      	beq.n	800af5a <_svfiprintf_r+0xea>
 800af2e:	9a07      	ldr	r2, [sp, #28]
 800af30:	462f      	mov	r7, r5
 800af32:	2000      	movs	r0, #0
 800af34:	250a      	movs	r5, #10
 800af36:	4639      	mov	r1, r7
 800af38:	f811 3b01 	ldrb.w	r3, [r1], #1
 800af3c:	3b30      	subs	r3, #48	; 0x30
 800af3e:	2b09      	cmp	r3, #9
 800af40:	d94d      	bls.n	800afde <_svfiprintf_r+0x16e>
 800af42:	b1b8      	cbz	r0, 800af74 <_svfiprintf_r+0x104>
 800af44:	e00f      	b.n	800af66 <_svfiprintf_r+0xf6>
 800af46:	462f      	mov	r7, r5
 800af48:	e7b8      	b.n	800aebc <_svfiprintf_r+0x4c>
 800af4a:	4a40      	ldr	r2, [pc, #256]	; (800b04c <_svfiprintf_r+0x1dc>)
 800af4c:	1a80      	subs	r0, r0, r2
 800af4e:	fa0b f000 	lsl.w	r0, fp, r0
 800af52:	4318      	orrs	r0, r3
 800af54:	9004      	str	r0, [sp, #16]
 800af56:	463d      	mov	r5, r7
 800af58:	e7d3      	b.n	800af02 <_svfiprintf_r+0x92>
 800af5a:	9a03      	ldr	r2, [sp, #12]
 800af5c:	1d11      	adds	r1, r2, #4
 800af5e:	6812      	ldr	r2, [r2, #0]
 800af60:	9103      	str	r1, [sp, #12]
 800af62:	2a00      	cmp	r2, #0
 800af64:	db01      	blt.n	800af6a <_svfiprintf_r+0xfa>
 800af66:	9207      	str	r2, [sp, #28]
 800af68:	e004      	b.n	800af74 <_svfiprintf_r+0x104>
 800af6a:	4252      	negs	r2, r2
 800af6c:	f043 0302 	orr.w	r3, r3, #2
 800af70:	9207      	str	r2, [sp, #28]
 800af72:	9304      	str	r3, [sp, #16]
 800af74:	783b      	ldrb	r3, [r7, #0]
 800af76:	2b2e      	cmp	r3, #46	; 0x2e
 800af78:	d10c      	bne.n	800af94 <_svfiprintf_r+0x124>
 800af7a:	787b      	ldrb	r3, [r7, #1]
 800af7c:	2b2a      	cmp	r3, #42	; 0x2a
 800af7e:	d133      	bne.n	800afe8 <_svfiprintf_r+0x178>
 800af80:	9b03      	ldr	r3, [sp, #12]
 800af82:	1d1a      	adds	r2, r3, #4
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	9203      	str	r2, [sp, #12]
 800af88:	2b00      	cmp	r3, #0
 800af8a:	bfb8      	it	lt
 800af8c:	f04f 33ff 	movlt.w	r3, #4294967295
 800af90:	3702      	adds	r7, #2
 800af92:	9305      	str	r3, [sp, #20]
 800af94:	4d2e      	ldr	r5, [pc, #184]	; (800b050 <_svfiprintf_r+0x1e0>)
 800af96:	7839      	ldrb	r1, [r7, #0]
 800af98:	2203      	movs	r2, #3
 800af9a:	4628      	mov	r0, r5
 800af9c:	f7f5 f918 	bl	80001d0 <memchr>
 800afa0:	b138      	cbz	r0, 800afb2 <_svfiprintf_r+0x142>
 800afa2:	2340      	movs	r3, #64	; 0x40
 800afa4:	1b40      	subs	r0, r0, r5
 800afa6:	fa03 f000 	lsl.w	r0, r3, r0
 800afaa:	9b04      	ldr	r3, [sp, #16]
 800afac:	4303      	orrs	r3, r0
 800afae:	3701      	adds	r7, #1
 800afb0:	9304      	str	r3, [sp, #16]
 800afb2:	7839      	ldrb	r1, [r7, #0]
 800afb4:	4827      	ldr	r0, [pc, #156]	; (800b054 <_svfiprintf_r+0x1e4>)
 800afb6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800afba:	2206      	movs	r2, #6
 800afbc:	1c7e      	adds	r6, r7, #1
 800afbe:	f7f5 f907 	bl	80001d0 <memchr>
 800afc2:	2800      	cmp	r0, #0
 800afc4:	d038      	beq.n	800b038 <_svfiprintf_r+0x1c8>
 800afc6:	4b24      	ldr	r3, [pc, #144]	; (800b058 <_svfiprintf_r+0x1e8>)
 800afc8:	bb13      	cbnz	r3, 800b010 <_svfiprintf_r+0x1a0>
 800afca:	9b03      	ldr	r3, [sp, #12]
 800afcc:	3307      	adds	r3, #7
 800afce:	f023 0307 	bic.w	r3, r3, #7
 800afd2:	3308      	adds	r3, #8
 800afd4:	9303      	str	r3, [sp, #12]
 800afd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800afd8:	444b      	add	r3, r9
 800afda:	9309      	str	r3, [sp, #36]	; 0x24
 800afdc:	e76d      	b.n	800aeba <_svfiprintf_r+0x4a>
 800afde:	fb05 3202 	mla	r2, r5, r2, r3
 800afe2:	2001      	movs	r0, #1
 800afe4:	460f      	mov	r7, r1
 800afe6:	e7a6      	b.n	800af36 <_svfiprintf_r+0xc6>
 800afe8:	2300      	movs	r3, #0
 800afea:	3701      	adds	r7, #1
 800afec:	9305      	str	r3, [sp, #20]
 800afee:	4619      	mov	r1, r3
 800aff0:	250a      	movs	r5, #10
 800aff2:	4638      	mov	r0, r7
 800aff4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aff8:	3a30      	subs	r2, #48	; 0x30
 800affa:	2a09      	cmp	r2, #9
 800affc:	d903      	bls.n	800b006 <_svfiprintf_r+0x196>
 800affe:	2b00      	cmp	r3, #0
 800b000:	d0c8      	beq.n	800af94 <_svfiprintf_r+0x124>
 800b002:	9105      	str	r1, [sp, #20]
 800b004:	e7c6      	b.n	800af94 <_svfiprintf_r+0x124>
 800b006:	fb05 2101 	mla	r1, r5, r1, r2
 800b00a:	2301      	movs	r3, #1
 800b00c:	4607      	mov	r7, r0
 800b00e:	e7f0      	b.n	800aff2 <_svfiprintf_r+0x182>
 800b010:	ab03      	add	r3, sp, #12
 800b012:	9300      	str	r3, [sp, #0]
 800b014:	4622      	mov	r2, r4
 800b016:	4b11      	ldr	r3, [pc, #68]	; (800b05c <_svfiprintf_r+0x1ec>)
 800b018:	a904      	add	r1, sp, #16
 800b01a:	4640      	mov	r0, r8
 800b01c:	f3af 8000 	nop.w
 800b020:	f1b0 3fff 	cmp.w	r0, #4294967295
 800b024:	4681      	mov	r9, r0
 800b026:	d1d6      	bne.n	800afd6 <_svfiprintf_r+0x166>
 800b028:	89a3      	ldrh	r3, [r4, #12]
 800b02a:	065b      	lsls	r3, r3, #25
 800b02c:	f53f af35 	bmi.w	800ae9a <_svfiprintf_r+0x2a>
 800b030:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b032:	b01d      	add	sp, #116	; 0x74
 800b034:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b038:	ab03      	add	r3, sp, #12
 800b03a:	9300      	str	r3, [sp, #0]
 800b03c:	4622      	mov	r2, r4
 800b03e:	4b07      	ldr	r3, [pc, #28]	; (800b05c <_svfiprintf_r+0x1ec>)
 800b040:	a904      	add	r1, sp, #16
 800b042:	4640      	mov	r0, r8
 800b044:	f000 f882 	bl	800b14c <_printf_i>
 800b048:	e7ea      	b.n	800b020 <_svfiprintf_r+0x1b0>
 800b04a:	bf00      	nop
 800b04c:	0800bd18 	.word	0x0800bd18
 800b050:	0800bd1e 	.word	0x0800bd1e
 800b054:	0800bd22 	.word	0x0800bd22
 800b058:	00000000 	.word	0x00000000
 800b05c:	0800adbd 	.word	0x0800adbd

0800b060 <_printf_common>:
 800b060:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b064:	4691      	mov	r9, r2
 800b066:	461f      	mov	r7, r3
 800b068:	688a      	ldr	r2, [r1, #8]
 800b06a:	690b      	ldr	r3, [r1, #16]
 800b06c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b070:	4293      	cmp	r3, r2
 800b072:	bfb8      	it	lt
 800b074:	4613      	movlt	r3, r2
 800b076:	f8c9 3000 	str.w	r3, [r9]
 800b07a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b07e:	4606      	mov	r6, r0
 800b080:	460c      	mov	r4, r1
 800b082:	b112      	cbz	r2, 800b08a <_printf_common+0x2a>
 800b084:	3301      	adds	r3, #1
 800b086:	f8c9 3000 	str.w	r3, [r9]
 800b08a:	6823      	ldr	r3, [r4, #0]
 800b08c:	0699      	lsls	r1, r3, #26
 800b08e:	bf42      	ittt	mi
 800b090:	f8d9 3000 	ldrmi.w	r3, [r9]
 800b094:	3302      	addmi	r3, #2
 800b096:	f8c9 3000 	strmi.w	r3, [r9]
 800b09a:	6825      	ldr	r5, [r4, #0]
 800b09c:	f015 0506 	ands.w	r5, r5, #6
 800b0a0:	d107      	bne.n	800b0b2 <_printf_common+0x52>
 800b0a2:	f104 0a19 	add.w	sl, r4, #25
 800b0a6:	68e3      	ldr	r3, [r4, #12]
 800b0a8:	f8d9 2000 	ldr.w	r2, [r9]
 800b0ac:	1a9b      	subs	r3, r3, r2
 800b0ae:	42ab      	cmp	r3, r5
 800b0b0:	dc28      	bgt.n	800b104 <_printf_common+0xa4>
 800b0b2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800b0b6:	6822      	ldr	r2, [r4, #0]
 800b0b8:	3300      	adds	r3, #0
 800b0ba:	bf18      	it	ne
 800b0bc:	2301      	movne	r3, #1
 800b0be:	0692      	lsls	r2, r2, #26
 800b0c0:	d42d      	bmi.n	800b11e <_printf_common+0xbe>
 800b0c2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b0c6:	4639      	mov	r1, r7
 800b0c8:	4630      	mov	r0, r6
 800b0ca:	47c0      	blx	r8
 800b0cc:	3001      	adds	r0, #1
 800b0ce:	d020      	beq.n	800b112 <_printf_common+0xb2>
 800b0d0:	6823      	ldr	r3, [r4, #0]
 800b0d2:	68e5      	ldr	r5, [r4, #12]
 800b0d4:	f8d9 2000 	ldr.w	r2, [r9]
 800b0d8:	f003 0306 	and.w	r3, r3, #6
 800b0dc:	2b04      	cmp	r3, #4
 800b0de:	bf08      	it	eq
 800b0e0:	1aad      	subeq	r5, r5, r2
 800b0e2:	68a3      	ldr	r3, [r4, #8]
 800b0e4:	6922      	ldr	r2, [r4, #16]
 800b0e6:	bf0c      	ite	eq
 800b0e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b0ec:	2500      	movne	r5, #0
 800b0ee:	4293      	cmp	r3, r2
 800b0f0:	bfc4      	itt	gt
 800b0f2:	1a9b      	subgt	r3, r3, r2
 800b0f4:	18ed      	addgt	r5, r5, r3
 800b0f6:	f04f 0900 	mov.w	r9, #0
 800b0fa:	341a      	adds	r4, #26
 800b0fc:	454d      	cmp	r5, r9
 800b0fe:	d11a      	bne.n	800b136 <_printf_common+0xd6>
 800b100:	2000      	movs	r0, #0
 800b102:	e008      	b.n	800b116 <_printf_common+0xb6>
 800b104:	2301      	movs	r3, #1
 800b106:	4652      	mov	r2, sl
 800b108:	4639      	mov	r1, r7
 800b10a:	4630      	mov	r0, r6
 800b10c:	47c0      	blx	r8
 800b10e:	3001      	adds	r0, #1
 800b110:	d103      	bne.n	800b11a <_printf_common+0xba>
 800b112:	f04f 30ff 	mov.w	r0, #4294967295
 800b116:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b11a:	3501      	adds	r5, #1
 800b11c:	e7c3      	b.n	800b0a6 <_printf_common+0x46>
 800b11e:	18e1      	adds	r1, r4, r3
 800b120:	1c5a      	adds	r2, r3, #1
 800b122:	2030      	movs	r0, #48	; 0x30
 800b124:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b128:	4422      	add	r2, r4
 800b12a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b12e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b132:	3302      	adds	r3, #2
 800b134:	e7c5      	b.n	800b0c2 <_printf_common+0x62>
 800b136:	2301      	movs	r3, #1
 800b138:	4622      	mov	r2, r4
 800b13a:	4639      	mov	r1, r7
 800b13c:	4630      	mov	r0, r6
 800b13e:	47c0      	blx	r8
 800b140:	3001      	adds	r0, #1
 800b142:	d0e6      	beq.n	800b112 <_printf_common+0xb2>
 800b144:	f109 0901 	add.w	r9, r9, #1
 800b148:	e7d8      	b.n	800b0fc <_printf_common+0x9c>
	...

0800b14c <_printf_i>:
 800b14c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b150:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800b154:	460c      	mov	r4, r1
 800b156:	7e09      	ldrb	r1, [r1, #24]
 800b158:	b085      	sub	sp, #20
 800b15a:	296e      	cmp	r1, #110	; 0x6e
 800b15c:	4617      	mov	r7, r2
 800b15e:	4606      	mov	r6, r0
 800b160:	4698      	mov	r8, r3
 800b162:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b164:	f000 80b3 	beq.w	800b2ce <_printf_i+0x182>
 800b168:	d822      	bhi.n	800b1b0 <_printf_i+0x64>
 800b16a:	2963      	cmp	r1, #99	; 0x63
 800b16c:	d036      	beq.n	800b1dc <_printf_i+0x90>
 800b16e:	d80a      	bhi.n	800b186 <_printf_i+0x3a>
 800b170:	2900      	cmp	r1, #0
 800b172:	f000 80b9 	beq.w	800b2e8 <_printf_i+0x19c>
 800b176:	2958      	cmp	r1, #88	; 0x58
 800b178:	f000 8083 	beq.w	800b282 <_printf_i+0x136>
 800b17c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b180:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800b184:	e032      	b.n	800b1ec <_printf_i+0xa0>
 800b186:	2964      	cmp	r1, #100	; 0x64
 800b188:	d001      	beq.n	800b18e <_printf_i+0x42>
 800b18a:	2969      	cmp	r1, #105	; 0x69
 800b18c:	d1f6      	bne.n	800b17c <_printf_i+0x30>
 800b18e:	6820      	ldr	r0, [r4, #0]
 800b190:	6813      	ldr	r3, [r2, #0]
 800b192:	0605      	lsls	r5, r0, #24
 800b194:	f103 0104 	add.w	r1, r3, #4
 800b198:	d52a      	bpl.n	800b1f0 <_printf_i+0xa4>
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	6011      	str	r1, [r2, #0]
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	da03      	bge.n	800b1aa <_printf_i+0x5e>
 800b1a2:	222d      	movs	r2, #45	; 0x2d
 800b1a4:	425b      	negs	r3, r3
 800b1a6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800b1aa:	486f      	ldr	r0, [pc, #444]	; (800b368 <_printf_i+0x21c>)
 800b1ac:	220a      	movs	r2, #10
 800b1ae:	e039      	b.n	800b224 <_printf_i+0xd8>
 800b1b0:	2973      	cmp	r1, #115	; 0x73
 800b1b2:	f000 809d 	beq.w	800b2f0 <_printf_i+0x1a4>
 800b1b6:	d808      	bhi.n	800b1ca <_printf_i+0x7e>
 800b1b8:	296f      	cmp	r1, #111	; 0x6f
 800b1ba:	d020      	beq.n	800b1fe <_printf_i+0xb2>
 800b1bc:	2970      	cmp	r1, #112	; 0x70
 800b1be:	d1dd      	bne.n	800b17c <_printf_i+0x30>
 800b1c0:	6823      	ldr	r3, [r4, #0]
 800b1c2:	f043 0320 	orr.w	r3, r3, #32
 800b1c6:	6023      	str	r3, [r4, #0]
 800b1c8:	e003      	b.n	800b1d2 <_printf_i+0x86>
 800b1ca:	2975      	cmp	r1, #117	; 0x75
 800b1cc:	d017      	beq.n	800b1fe <_printf_i+0xb2>
 800b1ce:	2978      	cmp	r1, #120	; 0x78
 800b1d0:	d1d4      	bne.n	800b17c <_printf_i+0x30>
 800b1d2:	2378      	movs	r3, #120	; 0x78
 800b1d4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b1d8:	4864      	ldr	r0, [pc, #400]	; (800b36c <_printf_i+0x220>)
 800b1da:	e055      	b.n	800b288 <_printf_i+0x13c>
 800b1dc:	6813      	ldr	r3, [r2, #0]
 800b1de:	1d19      	adds	r1, r3, #4
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	6011      	str	r1, [r2, #0]
 800b1e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b1e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b1ec:	2301      	movs	r3, #1
 800b1ee:	e08c      	b.n	800b30a <_printf_i+0x1be>
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	6011      	str	r1, [r2, #0]
 800b1f4:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b1f8:	bf18      	it	ne
 800b1fa:	b21b      	sxthne	r3, r3
 800b1fc:	e7cf      	b.n	800b19e <_printf_i+0x52>
 800b1fe:	6813      	ldr	r3, [r2, #0]
 800b200:	6825      	ldr	r5, [r4, #0]
 800b202:	1d18      	adds	r0, r3, #4
 800b204:	6010      	str	r0, [r2, #0]
 800b206:	0628      	lsls	r0, r5, #24
 800b208:	d501      	bpl.n	800b20e <_printf_i+0xc2>
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	e002      	b.n	800b214 <_printf_i+0xc8>
 800b20e:	0668      	lsls	r0, r5, #25
 800b210:	d5fb      	bpl.n	800b20a <_printf_i+0xbe>
 800b212:	881b      	ldrh	r3, [r3, #0]
 800b214:	4854      	ldr	r0, [pc, #336]	; (800b368 <_printf_i+0x21c>)
 800b216:	296f      	cmp	r1, #111	; 0x6f
 800b218:	bf14      	ite	ne
 800b21a:	220a      	movne	r2, #10
 800b21c:	2208      	moveq	r2, #8
 800b21e:	2100      	movs	r1, #0
 800b220:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b224:	6865      	ldr	r5, [r4, #4]
 800b226:	60a5      	str	r5, [r4, #8]
 800b228:	2d00      	cmp	r5, #0
 800b22a:	f2c0 8095 	blt.w	800b358 <_printf_i+0x20c>
 800b22e:	6821      	ldr	r1, [r4, #0]
 800b230:	f021 0104 	bic.w	r1, r1, #4
 800b234:	6021      	str	r1, [r4, #0]
 800b236:	2b00      	cmp	r3, #0
 800b238:	d13d      	bne.n	800b2b6 <_printf_i+0x16a>
 800b23a:	2d00      	cmp	r5, #0
 800b23c:	f040 808e 	bne.w	800b35c <_printf_i+0x210>
 800b240:	4665      	mov	r5, ip
 800b242:	2a08      	cmp	r2, #8
 800b244:	d10b      	bne.n	800b25e <_printf_i+0x112>
 800b246:	6823      	ldr	r3, [r4, #0]
 800b248:	07db      	lsls	r3, r3, #31
 800b24a:	d508      	bpl.n	800b25e <_printf_i+0x112>
 800b24c:	6923      	ldr	r3, [r4, #16]
 800b24e:	6862      	ldr	r2, [r4, #4]
 800b250:	429a      	cmp	r2, r3
 800b252:	bfde      	ittt	le
 800b254:	2330      	movle	r3, #48	; 0x30
 800b256:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b25a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b25e:	ebac 0305 	sub.w	r3, ip, r5
 800b262:	6123      	str	r3, [r4, #16]
 800b264:	f8cd 8000 	str.w	r8, [sp]
 800b268:	463b      	mov	r3, r7
 800b26a:	aa03      	add	r2, sp, #12
 800b26c:	4621      	mov	r1, r4
 800b26e:	4630      	mov	r0, r6
 800b270:	f7ff fef6 	bl	800b060 <_printf_common>
 800b274:	3001      	adds	r0, #1
 800b276:	d14d      	bne.n	800b314 <_printf_i+0x1c8>
 800b278:	f04f 30ff 	mov.w	r0, #4294967295
 800b27c:	b005      	add	sp, #20
 800b27e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b282:	4839      	ldr	r0, [pc, #228]	; (800b368 <_printf_i+0x21c>)
 800b284:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800b288:	6813      	ldr	r3, [r2, #0]
 800b28a:	6821      	ldr	r1, [r4, #0]
 800b28c:	1d1d      	adds	r5, r3, #4
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	6015      	str	r5, [r2, #0]
 800b292:	060a      	lsls	r2, r1, #24
 800b294:	d50b      	bpl.n	800b2ae <_printf_i+0x162>
 800b296:	07ca      	lsls	r2, r1, #31
 800b298:	bf44      	itt	mi
 800b29a:	f041 0120 	orrmi.w	r1, r1, #32
 800b29e:	6021      	strmi	r1, [r4, #0]
 800b2a0:	b91b      	cbnz	r3, 800b2aa <_printf_i+0x15e>
 800b2a2:	6822      	ldr	r2, [r4, #0]
 800b2a4:	f022 0220 	bic.w	r2, r2, #32
 800b2a8:	6022      	str	r2, [r4, #0]
 800b2aa:	2210      	movs	r2, #16
 800b2ac:	e7b7      	b.n	800b21e <_printf_i+0xd2>
 800b2ae:	064d      	lsls	r5, r1, #25
 800b2b0:	bf48      	it	mi
 800b2b2:	b29b      	uxthmi	r3, r3
 800b2b4:	e7ef      	b.n	800b296 <_printf_i+0x14a>
 800b2b6:	4665      	mov	r5, ip
 800b2b8:	fbb3 f1f2 	udiv	r1, r3, r2
 800b2bc:	fb02 3311 	mls	r3, r2, r1, r3
 800b2c0:	5cc3      	ldrb	r3, [r0, r3]
 800b2c2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800b2c6:	460b      	mov	r3, r1
 800b2c8:	2900      	cmp	r1, #0
 800b2ca:	d1f5      	bne.n	800b2b8 <_printf_i+0x16c>
 800b2cc:	e7b9      	b.n	800b242 <_printf_i+0xf6>
 800b2ce:	6813      	ldr	r3, [r2, #0]
 800b2d0:	6825      	ldr	r5, [r4, #0]
 800b2d2:	6961      	ldr	r1, [r4, #20]
 800b2d4:	1d18      	adds	r0, r3, #4
 800b2d6:	6010      	str	r0, [r2, #0]
 800b2d8:	0628      	lsls	r0, r5, #24
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	d501      	bpl.n	800b2e2 <_printf_i+0x196>
 800b2de:	6019      	str	r1, [r3, #0]
 800b2e0:	e002      	b.n	800b2e8 <_printf_i+0x19c>
 800b2e2:	066a      	lsls	r2, r5, #25
 800b2e4:	d5fb      	bpl.n	800b2de <_printf_i+0x192>
 800b2e6:	8019      	strh	r1, [r3, #0]
 800b2e8:	2300      	movs	r3, #0
 800b2ea:	6123      	str	r3, [r4, #16]
 800b2ec:	4665      	mov	r5, ip
 800b2ee:	e7b9      	b.n	800b264 <_printf_i+0x118>
 800b2f0:	6813      	ldr	r3, [r2, #0]
 800b2f2:	1d19      	adds	r1, r3, #4
 800b2f4:	6011      	str	r1, [r2, #0]
 800b2f6:	681d      	ldr	r5, [r3, #0]
 800b2f8:	6862      	ldr	r2, [r4, #4]
 800b2fa:	2100      	movs	r1, #0
 800b2fc:	4628      	mov	r0, r5
 800b2fe:	f7f4 ff67 	bl	80001d0 <memchr>
 800b302:	b108      	cbz	r0, 800b308 <_printf_i+0x1bc>
 800b304:	1b40      	subs	r0, r0, r5
 800b306:	6060      	str	r0, [r4, #4]
 800b308:	6863      	ldr	r3, [r4, #4]
 800b30a:	6123      	str	r3, [r4, #16]
 800b30c:	2300      	movs	r3, #0
 800b30e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b312:	e7a7      	b.n	800b264 <_printf_i+0x118>
 800b314:	6923      	ldr	r3, [r4, #16]
 800b316:	462a      	mov	r2, r5
 800b318:	4639      	mov	r1, r7
 800b31a:	4630      	mov	r0, r6
 800b31c:	47c0      	blx	r8
 800b31e:	3001      	adds	r0, #1
 800b320:	d0aa      	beq.n	800b278 <_printf_i+0x12c>
 800b322:	6823      	ldr	r3, [r4, #0]
 800b324:	079b      	lsls	r3, r3, #30
 800b326:	d413      	bmi.n	800b350 <_printf_i+0x204>
 800b328:	68e0      	ldr	r0, [r4, #12]
 800b32a:	9b03      	ldr	r3, [sp, #12]
 800b32c:	4298      	cmp	r0, r3
 800b32e:	bfb8      	it	lt
 800b330:	4618      	movlt	r0, r3
 800b332:	e7a3      	b.n	800b27c <_printf_i+0x130>
 800b334:	2301      	movs	r3, #1
 800b336:	464a      	mov	r2, r9
 800b338:	4639      	mov	r1, r7
 800b33a:	4630      	mov	r0, r6
 800b33c:	47c0      	blx	r8
 800b33e:	3001      	adds	r0, #1
 800b340:	d09a      	beq.n	800b278 <_printf_i+0x12c>
 800b342:	3501      	adds	r5, #1
 800b344:	68e3      	ldr	r3, [r4, #12]
 800b346:	9a03      	ldr	r2, [sp, #12]
 800b348:	1a9b      	subs	r3, r3, r2
 800b34a:	42ab      	cmp	r3, r5
 800b34c:	dcf2      	bgt.n	800b334 <_printf_i+0x1e8>
 800b34e:	e7eb      	b.n	800b328 <_printf_i+0x1dc>
 800b350:	2500      	movs	r5, #0
 800b352:	f104 0919 	add.w	r9, r4, #25
 800b356:	e7f5      	b.n	800b344 <_printf_i+0x1f8>
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d1ac      	bne.n	800b2b6 <_printf_i+0x16a>
 800b35c:	7803      	ldrb	r3, [r0, #0]
 800b35e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b362:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b366:	e76c      	b.n	800b242 <_printf_i+0xf6>
 800b368:	0800bd29 	.word	0x0800bd29
 800b36c:	0800bd3a 	.word	0x0800bd3a

0800b370 <_sbrk_r>:
 800b370:	b538      	push	{r3, r4, r5, lr}
 800b372:	4c06      	ldr	r4, [pc, #24]	; (800b38c <_sbrk_r+0x1c>)
 800b374:	2300      	movs	r3, #0
 800b376:	4605      	mov	r5, r0
 800b378:	4608      	mov	r0, r1
 800b37a:	6023      	str	r3, [r4, #0]
 800b37c:	f7f5 fff6 	bl	800136c <_sbrk>
 800b380:	1c43      	adds	r3, r0, #1
 800b382:	d102      	bne.n	800b38a <_sbrk_r+0x1a>
 800b384:	6823      	ldr	r3, [r4, #0]
 800b386:	b103      	cbz	r3, 800b38a <_sbrk_r+0x1a>
 800b388:	602b      	str	r3, [r5, #0]
 800b38a:	bd38      	pop	{r3, r4, r5, pc}
 800b38c:	20000744 	.word	0x20000744

0800b390 <__sread>:
 800b390:	b510      	push	{r4, lr}
 800b392:	460c      	mov	r4, r1
 800b394:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b398:	f000 f8d6 	bl	800b548 <_read_r>
 800b39c:	2800      	cmp	r0, #0
 800b39e:	bfab      	itete	ge
 800b3a0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b3a2:	89a3      	ldrhlt	r3, [r4, #12]
 800b3a4:	181b      	addge	r3, r3, r0
 800b3a6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b3aa:	bfac      	ite	ge
 800b3ac:	6563      	strge	r3, [r4, #84]	; 0x54
 800b3ae:	81a3      	strhlt	r3, [r4, #12]
 800b3b0:	bd10      	pop	{r4, pc}

0800b3b2 <__swrite>:
 800b3b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b3b6:	461f      	mov	r7, r3
 800b3b8:	898b      	ldrh	r3, [r1, #12]
 800b3ba:	05db      	lsls	r3, r3, #23
 800b3bc:	4605      	mov	r5, r0
 800b3be:	460c      	mov	r4, r1
 800b3c0:	4616      	mov	r6, r2
 800b3c2:	d505      	bpl.n	800b3d0 <__swrite+0x1e>
 800b3c4:	2302      	movs	r3, #2
 800b3c6:	2200      	movs	r2, #0
 800b3c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3cc:	f000 f868 	bl	800b4a0 <_lseek_r>
 800b3d0:	89a3      	ldrh	r3, [r4, #12]
 800b3d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b3d6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b3da:	81a3      	strh	r3, [r4, #12]
 800b3dc:	4632      	mov	r2, r6
 800b3de:	463b      	mov	r3, r7
 800b3e0:	4628      	mov	r0, r5
 800b3e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b3e6:	f000 b817 	b.w	800b418 <_write_r>

0800b3ea <__sseek>:
 800b3ea:	b510      	push	{r4, lr}
 800b3ec:	460c      	mov	r4, r1
 800b3ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3f2:	f000 f855 	bl	800b4a0 <_lseek_r>
 800b3f6:	1c43      	adds	r3, r0, #1
 800b3f8:	89a3      	ldrh	r3, [r4, #12]
 800b3fa:	bf15      	itete	ne
 800b3fc:	6560      	strne	r0, [r4, #84]	; 0x54
 800b3fe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b402:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b406:	81a3      	strheq	r3, [r4, #12]
 800b408:	bf18      	it	ne
 800b40a:	81a3      	strhne	r3, [r4, #12]
 800b40c:	bd10      	pop	{r4, pc}

0800b40e <__sclose>:
 800b40e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b412:	f000 b813 	b.w	800b43c <_close_r>
	...

0800b418 <_write_r>:
 800b418:	b538      	push	{r3, r4, r5, lr}
 800b41a:	4c07      	ldr	r4, [pc, #28]	; (800b438 <_write_r+0x20>)
 800b41c:	4605      	mov	r5, r0
 800b41e:	4608      	mov	r0, r1
 800b420:	4611      	mov	r1, r2
 800b422:	2200      	movs	r2, #0
 800b424:	6022      	str	r2, [r4, #0]
 800b426:	461a      	mov	r2, r3
 800b428:	f7f5 ff50 	bl	80012cc <_write>
 800b42c:	1c43      	adds	r3, r0, #1
 800b42e:	d102      	bne.n	800b436 <_write_r+0x1e>
 800b430:	6823      	ldr	r3, [r4, #0]
 800b432:	b103      	cbz	r3, 800b436 <_write_r+0x1e>
 800b434:	602b      	str	r3, [r5, #0]
 800b436:	bd38      	pop	{r3, r4, r5, pc}
 800b438:	20000744 	.word	0x20000744

0800b43c <_close_r>:
 800b43c:	b538      	push	{r3, r4, r5, lr}
 800b43e:	4c06      	ldr	r4, [pc, #24]	; (800b458 <_close_r+0x1c>)
 800b440:	2300      	movs	r3, #0
 800b442:	4605      	mov	r5, r0
 800b444:	4608      	mov	r0, r1
 800b446:	6023      	str	r3, [r4, #0]
 800b448:	f7f5 ff5c 	bl	8001304 <_close>
 800b44c:	1c43      	adds	r3, r0, #1
 800b44e:	d102      	bne.n	800b456 <_close_r+0x1a>
 800b450:	6823      	ldr	r3, [r4, #0]
 800b452:	b103      	cbz	r3, 800b456 <_close_r+0x1a>
 800b454:	602b      	str	r3, [r5, #0]
 800b456:	bd38      	pop	{r3, r4, r5, pc}
 800b458:	20000744 	.word	0x20000744

0800b45c <_fstat_r>:
 800b45c:	b538      	push	{r3, r4, r5, lr}
 800b45e:	4c07      	ldr	r4, [pc, #28]	; (800b47c <_fstat_r+0x20>)
 800b460:	2300      	movs	r3, #0
 800b462:	4605      	mov	r5, r0
 800b464:	4608      	mov	r0, r1
 800b466:	4611      	mov	r1, r2
 800b468:	6023      	str	r3, [r4, #0]
 800b46a:	f7f5 ff57 	bl	800131c <_fstat>
 800b46e:	1c43      	adds	r3, r0, #1
 800b470:	d102      	bne.n	800b478 <_fstat_r+0x1c>
 800b472:	6823      	ldr	r3, [r4, #0]
 800b474:	b103      	cbz	r3, 800b478 <_fstat_r+0x1c>
 800b476:	602b      	str	r3, [r5, #0]
 800b478:	bd38      	pop	{r3, r4, r5, pc}
 800b47a:	bf00      	nop
 800b47c:	20000744 	.word	0x20000744

0800b480 <_isatty_r>:
 800b480:	b538      	push	{r3, r4, r5, lr}
 800b482:	4c06      	ldr	r4, [pc, #24]	; (800b49c <_isatty_r+0x1c>)
 800b484:	2300      	movs	r3, #0
 800b486:	4605      	mov	r5, r0
 800b488:	4608      	mov	r0, r1
 800b48a:	6023      	str	r3, [r4, #0]
 800b48c:	f7f5 ff56 	bl	800133c <_isatty>
 800b490:	1c43      	adds	r3, r0, #1
 800b492:	d102      	bne.n	800b49a <_isatty_r+0x1a>
 800b494:	6823      	ldr	r3, [r4, #0]
 800b496:	b103      	cbz	r3, 800b49a <_isatty_r+0x1a>
 800b498:	602b      	str	r3, [r5, #0]
 800b49a:	bd38      	pop	{r3, r4, r5, pc}
 800b49c:	20000744 	.word	0x20000744

0800b4a0 <_lseek_r>:
 800b4a0:	b538      	push	{r3, r4, r5, lr}
 800b4a2:	4c07      	ldr	r4, [pc, #28]	; (800b4c0 <_lseek_r+0x20>)
 800b4a4:	4605      	mov	r5, r0
 800b4a6:	4608      	mov	r0, r1
 800b4a8:	4611      	mov	r1, r2
 800b4aa:	2200      	movs	r2, #0
 800b4ac:	6022      	str	r2, [r4, #0]
 800b4ae:	461a      	mov	r2, r3
 800b4b0:	f7f5 ff4f 	bl	8001352 <_lseek>
 800b4b4:	1c43      	adds	r3, r0, #1
 800b4b6:	d102      	bne.n	800b4be <_lseek_r+0x1e>
 800b4b8:	6823      	ldr	r3, [r4, #0]
 800b4ba:	b103      	cbz	r3, 800b4be <_lseek_r+0x1e>
 800b4bc:	602b      	str	r3, [r5, #0]
 800b4be:	bd38      	pop	{r3, r4, r5, pc}
 800b4c0:	20000744 	.word	0x20000744

0800b4c4 <memmove>:
 800b4c4:	4288      	cmp	r0, r1
 800b4c6:	b510      	push	{r4, lr}
 800b4c8:	eb01 0302 	add.w	r3, r1, r2
 800b4cc:	d807      	bhi.n	800b4de <memmove+0x1a>
 800b4ce:	1e42      	subs	r2, r0, #1
 800b4d0:	4299      	cmp	r1, r3
 800b4d2:	d00a      	beq.n	800b4ea <memmove+0x26>
 800b4d4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b4d8:	f802 4f01 	strb.w	r4, [r2, #1]!
 800b4dc:	e7f8      	b.n	800b4d0 <memmove+0xc>
 800b4de:	4283      	cmp	r3, r0
 800b4e0:	d9f5      	bls.n	800b4ce <memmove+0xa>
 800b4e2:	1881      	adds	r1, r0, r2
 800b4e4:	1ad2      	subs	r2, r2, r3
 800b4e6:	42d3      	cmn	r3, r2
 800b4e8:	d100      	bne.n	800b4ec <memmove+0x28>
 800b4ea:	bd10      	pop	{r4, pc}
 800b4ec:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b4f0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800b4f4:	e7f7      	b.n	800b4e6 <memmove+0x22>

0800b4f6 <__malloc_lock>:
 800b4f6:	4770      	bx	lr

0800b4f8 <__malloc_unlock>:
 800b4f8:	4770      	bx	lr

0800b4fa <_realloc_r>:
 800b4fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4fc:	4607      	mov	r7, r0
 800b4fe:	4614      	mov	r4, r2
 800b500:	460e      	mov	r6, r1
 800b502:	b921      	cbnz	r1, 800b50e <_realloc_r+0x14>
 800b504:	4611      	mov	r1, r2
 800b506:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b50a:	f7ff bbfd 	b.w	800ad08 <_malloc_r>
 800b50e:	b922      	cbnz	r2, 800b51a <_realloc_r+0x20>
 800b510:	f7ff fbac 	bl	800ac6c <_free_r>
 800b514:	4625      	mov	r5, r4
 800b516:	4628      	mov	r0, r5
 800b518:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b51a:	f000 f827 	bl	800b56c <_malloc_usable_size_r>
 800b51e:	42a0      	cmp	r0, r4
 800b520:	d20f      	bcs.n	800b542 <_realloc_r+0x48>
 800b522:	4621      	mov	r1, r4
 800b524:	4638      	mov	r0, r7
 800b526:	f7ff fbef 	bl	800ad08 <_malloc_r>
 800b52a:	4605      	mov	r5, r0
 800b52c:	2800      	cmp	r0, #0
 800b52e:	d0f2      	beq.n	800b516 <_realloc_r+0x1c>
 800b530:	4631      	mov	r1, r6
 800b532:	4622      	mov	r2, r4
 800b534:	f7ff f848 	bl	800a5c8 <memcpy>
 800b538:	4631      	mov	r1, r6
 800b53a:	4638      	mov	r0, r7
 800b53c:	f7ff fb96 	bl	800ac6c <_free_r>
 800b540:	e7e9      	b.n	800b516 <_realloc_r+0x1c>
 800b542:	4635      	mov	r5, r6
 800b544:	e7e7      	b.n	800b516 <_realloc_r+0x1c>
	...

0800b548 <_read_r>:
 800b548:	b538      	push	{r3, r4, r5, lr}
 800b54a:	4c07      	ldr	r4, [pc, #28]	; (800b568 <_read_r+0x20>)
 800b54c:	4605      	mov	r5, r0
 800b54e:	4608      	mov	r0, r1
 800b550:	4611      	mov	r1, r2
 800b552:	2200      	movs	r2, #0
 800b554:	6022      	str	r2, [r4, #0]
 800b556:	461a      	mov	r2, r3
 800b558:	f7f5 fe9b 	bl	8001292 <_read>
 800b55c:	1c43      	adds	r3, r0, #1
 800b55e:	d102      	bne.n	800b566 <_read_r+0x1e>
 800b560:	6823      	ldr	r3, [r4, #0]
 800b562:	b103      	cbz	r3, 800b566 <_read_r+0x1e>
 800b564:	602b      	str	r3, [r5, #0]
 800b566:	bd38      	pop	{r3, r4, r5, pc}
 800b568:	20000744 	.word	0x20000744

0800b56c <_malloc_usable_size_r>:
 800b56c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b570:	1f18      	subs	r0, r3, #4
 800b572:	2b00      	cmp	r3, #0
 800b574:	bfbc      	itt	lt
 800b576:	580b      	ldrlt	r3, [r1, r0]
 800b578:	18c0      	addlt	r0, r0, r3
 800b57a:	4770      	bx	lr

0800b57c <trunc>:
 800b57c:	e92d 48d8 	stmdb	sp!, {r3, r4, r6, r7, fp, lr}
 800b580:	ec5c bb10 	vmov	fp, ip, d0
 800b584:	f3cc 500a 	ubfx	r0, ip, #20, #11
 800b588:	f2a0 31ff 	subw	r1, r0, #1023	; 0x3ff
 800b58c:	2913      	cmp	r1, #19
 800b58e:	4664      	mov	r4, ip
 800b590:	dc11      	bgt.n	800b5b6 <trunc+0x3a>
 800b592:	2900      	cmp	r1, #0
 800b594:	bfa7      	ittee	ge
 800b596:	4b15      	ldrge	r3, [pc, #84]	; (800b5ec <trunc+0x70>)
 800b598:	fa43 f101 	asrge.w	r1, r3, r1
 800b59c:	2200      	movlt	r2, #0
 800b59e:	f00c 4300 	andlt.w	r3, ip, #2147483648	; 0x80000000
 800b5a2:	bfa4      	itt	ge
 800b5a4:	2200      	movge	r2, #0
 800b5a6:	ea2c 0301 	bicge.w	r3, ip, r1
 800b5aa:	4693      	mov	fp, r2
 800b5ac:	469c      	mov	ip, r3
 800b5ae:	ec4c bb10 	vmov	d0, fp, ip
 800b5b2:	e8bd 88d8 	ldmia.w	sp!, {r3, r4, r6, r7, fp, pc}
 800b5b6:	2933      	cmp	r1, #51	; 0x33
 800b5b8:	dd0d      	ble.n	800b5d6 <trunc+0x5a>
 800b5ba:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800b5be:	d1f6      	bne.n	800b5ae <trunc+0x32>
 800b5c0:	4663      	mov	r3, ip
 800b5c2:	ee10 2a10 	vmov	r2, s0
 800b5c6:	ee10 0a10 	vmov	r0, s0
 800b5ca:	4621      	mov	r1, r4
 800b5cc:	f7f4 fe56 	bl	800027c <__adddf3>
 800b5d0:	4683      	mov	fp, r0
 800b5d2:	468c      	mov	ip, r1
 800b5d4:	e7eb      	b.n	800b5ae <trunc+0x32>
 800b5d6:	f2a0 4013 	subw	r0, r0, #1043	; 0x413
 800b5da:	f04f 33ff 	mov.w	r3, #4294967295
 800b5de:	fa23 f000 	lsr.w	r0, r3, r0
 800b5e2:	ea2b 0600 	bic.w	r6, fp, r0
 800b5e6:	46b3      	mov	fp, r6
 800b5e8:	46a4      	mov	ip, r4
 800b5ea:	e7e0      	b.n	800b5ae <trunc+0x32>
 800b5ec:	000fffff 	.word	0x000fffff

0800b5f0 <_init>:
 800b5f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5f2:	bf00      	nop
 800b5f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b5f6:	bc08      	pop	{r3}
 800b5f8:	469e      	mov	lr, r3
 800b5fa:	4770      	bx	lr

0800b5fc <_fini>:
 800b5fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5fe:	bf00      	nop
 800b600:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b602:	bc08      	pop	{r3}
 800b604:	469e      	mov	lr, r3
 800b606:	4770      	bx	lr
